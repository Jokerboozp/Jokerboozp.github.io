<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM学习</title>
      <link href="/jokerboozp.github.io/2020/07/20/2020-07-20-JVM/"/>
      <url>/jokerboozp.github.io/2020/07/20/2020-07-20-JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM学习"><a href="#JVM学习" class="headerlink" title="JVM学习"></a>JVM学习</h2><h3 id="一、JVM体系架构"><a href="#一、JVM体系架构" class="headerlink" title="一、JVM体系架构"></a>一、JVM体系架构</h3><p><img data-src="https://s1.ax1x.com/2020/07/27/aFM5RA.png" alt="JVM体系架构"></p><ul><li>灰色表示：<ul><li>线程私有</li><li>内存占用非常少，几乎不存在GC。</li></ul></li><li>黄色表示：<ul><li>线程共享</li><li>存在垃圾回收<a id="more"></a></li></ul></li></ul><h3 id="二、类装载器ClassLoader"><a href="#二、类装载器ClassLoader" class="headerlink" title="二、类装载器ClassLoader"></a>二、类装载器ClassLoader</h3><ul><li>负责加载class文件，class文件在文件开头有特定的文件标识，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且ClassLoader只负责class文件的加载，至于他是否可以运行，则由Execution Engine决定。</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/27/aFMTMt.png" alt="ClassLoader"></p><ul><li>JVM虚拟机自带的加载器<ul><li>启动类加载器（BootStrap）：使用C++编写</li><li>拓展类加载器（Extension）：使用Java编写</li><li>应用程序类加载器（AppClassLoader）：Java也叫系统类加载器，加载当前应用的classpath的所有类。</li></ul></li><li>用户自定义加载器<ul><li>Java.lang.ClassLoader的子类，用户可以定制类的加载方式。</li></ul></li></ul><p><img data-src="https://s1.ax1x.com/2020/07/27/aFMjiQ.png" alt="ClassLoader1"></p><ul><li>示例1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(object.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上方代码运行后并不会显示BootStrap启动类加载器，因为BootStrap是C++编写的，所以只能显示出null。如果是JDK自带的，那么就会经过BootStrap类加载器。</p></li><li><p>示例2</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(test.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上方代码运行后会显示<code>sun.misc.Launcher$AppClassLoader@18b4aac2</code>，因为Test是自行编写的，所以经过AppClassLoader加载器。</p></li><li><p>示例3</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(test.getClass().getClassLoader());</span><br><span class="line">        System.out.println(test.getClass().getClassLoader().getParent());</span><br><span class="line">        System.out.println(test.getClass().getClassLoader().getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上方代码运行后会依次显示<code>sun.misc.Launcher$AppClassLoader@18b4aac2</code>、<code>sun.misc.Launcher$ExtClassLoader@4554617c</code>、<code>null</code>。也就是按照JVM类加载器的先后顺序进行显示。</li></ul><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><ul><li>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载器中，只有当父类加载器反馈自己无法完成这个请求的时候（在他的路径下没有找到所需要加载的class），子类加载器才会尝试自己去加载。</li><li>采用双亲委派机制的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪一个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。（沙箱安全）</li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>什么是类加载器</li><li>类加载器有哪些类型</li><li>双亲委派</li><li>沙箱安全</li></ol><h3 id="三、本地接口（Native）"><a href="#三、本地接口（Native）" class="headerlink" title="三、本地接口（Native）"></a>三、本地接口（Native）</h3><ul><li>不需要了解</li></ul><h3 id="四、PC寄存器（程序计数器Program-Counter-Register）"><a href="#四、PC寄存器（程序计数器Program-Counter-Register）" class="headerlink" title="四、PC寄存器（程序计数器Program Counter Register）"></a>四、PC寄存器（程序计数器Program Counter Register）</h3><ul><li>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区的方法字节码（用来存储指向下一条指令的地址，也即将要执行的代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</li><li>这块内存区域很小，他是当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li><li>如果执行一个Native方法，那这个计数器是空的。</li><li>PC寄存器用来完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出（Out Of Memory：OOM）错误。</li></ul><h3 id="五、方法区"><a href="#五、方法区" class="headerlink" title="五、方法区"></a>五、方法区</h3><ul><li>供各线程共享的运行时内存区域。他存储了<strong>每一个类的结构信息</strong>，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容。上面讲的是规范，在不同虚拟机里实现是不一样的，最典型的就是永久代（Permgen Space）和元空间（Metaspace）。</li><li><strong>但是，实例变量存放在堆内存中，和方法区无关</strong></li></ul><h3 id="六、栈"><a href="#六、栈" class="headerlink" title="六、栈"></a>六、栈</h3><ul><li><p><strong>栈管运行，堆管存储</strong></p></li><li><p>栈也叫栈内存，主管Java程序的运行， 是在线程创建时创建，他的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程结束该栈就over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是在函数的栈内存中分配。</strong></p></li><li><p>Java中的方法，进入栈后叫做栈帧。main方法永远是第一个入栈的。</p></li><li><p>栈帧中主要保存三类数据</p><ul><li><p>本地变量（Local Variables）：输入参数、输出参数以及方法内的变量</p></li><li><p>栈操作（Operand Stack）：记录出栈、入栈的操作</p></li><li><p>栈帧数据（Frame Data）：包括类文件、方法等</p></li><li><p>栈运行原理</p><ul><li>栈中的数据都是以栈帧的格式存在，栈帧是一个内存区块，是一个有关方法和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧F1，并被压入到栈中，A方法又调用了B方法，于是产生栈帧F2也被压入栈。。。。。。执行完毕后，先弹出F2栈帧，再弹出F1栈帧。。。。。。遵循“先进后出”/“后进先出”原则</li><li>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K~756K之间，约等于1MB。<br><img data-src="https://s1.ax1x.com/2020/07/27/aFMzzn.png" alt="栈"></li></ul></li></ul></li><li><p><code>java.lang.StackOverflowError</code>是一个错误，不是异常。<br><img data-src="https://s1.ax1x.com/2020/07/27/aFQEi4.png" alt="StackOverflowError"></p></li></ul><h3 id="七、堆（heap）"><a href="#七、堆（heap）" class="headerlink" title="七、堆（heap）"></a>七、堆（heap）</h3><ul><li>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件之后，需要把类，方法，常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存逻辑上分为如下三部分，物理上分为新生区和养老区。</li></ul><h4 id="7-1、新生区"><a href="#7-1、新生区" class="headerlink" title="7.1、新生区"></a>7.1、新生区</h4><ol><li>伊甸园区（Eden Space）</li></ol><ul><li>GC是在伊甸园区发生的</li></ul><ol start="2"><li>幸存0区（Survivor 0 Space），别名from区</li><li>幸存1区（Survivor 1 Space），别名to区</li></ol><p><strong>from区和to区他们的位置和名分不固定，每次GC后会交换，谁空谁是to区。</strong></p><h4 id="7-2、养老区（Tenure-Generation-Space）"><a href="#7-2、养老区（Tenure-Generation-Space）" class="headerlink" title="7.2、养老区（Tenure Generation Space）"></a>7.2、养老区（Tenure Generation Space）</h4><h4 id="7-3、元空间"><a href="#7-3、元空间" class="headerlink" title="7.3、元空间"></a>7.3、元空间</h4><h4 id="7-4、MinorGC具体流程"><a href="#7-4、MinorGC具体流程" class="headerlink" title="7.4、MinorGC具体流程"></a>7.4、MinorGC具体流程</h4><ol><li>eden、SurvivorFrom复制到SurvivorTo，年龄+1</li></ol><ul><li>首先，当Eden区满的时候会触发第一次GC，把还活着的对象拷贝到SurvivorFrom区，当Eden再次触发GC的时候会扫描Eden区和From区，对这两个区进行GC，经过这次回收后还存活的对象，则直接复制到To区域（如果有对象的年龄已经达到了老年的标准，则复制到老年代区），同时把这些对象的年龄+1</li></ul><ol start="2"><li>清空eden、SurvivorFrom</li></ol><ul><li>然后清空Eden和SurvivorFrom中的对象，也即复制之后有交换，谁空谁是to</li></ul><ol start="3"><li>SurvivorFrom和SurvivorTo交换</li></ol><ul><li>最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为下一次GC时的SurvivorFrom区。部分对象会在From和To区域中来回复制，如此交换15次（由JVM参数MaxTenuringThreshold决定，这个参数默认是15），最终如果还是存活，就存入老年代。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue1</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        age=<span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue2</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.setPersonName(<span class="string">"xxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue3</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        str=<span class="string">"xxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test1 test1 = <span class="keyword">new</span> Test1();</span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">10</span>;</span><br><span class="line">        test1.changeValue1(age);</span><br><span class="line">        System.out.println(<span class="string">"age======"</span>+age);</span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setPersonName(<span class="string">"abc"</span>);</span><br><span class="line">        test1.changeValue2(person);</span><br><span class="line">        System.out.println(<span class="string">"personName====="</span>+person.getPersonName());</span><br><span class="line"></span><br><span class="line">        String str=<span class="string">"abc"</span>;</span><br><span class="line">        test1.changeValue3(str);</span><br><span class="line">        System.out.println(<span class="string">"String======="</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age======10</span><br><span class="line">personName=====xxx</span><br><span class="line">String=======abc</span><br></pre></td></tr></table></figure><ul><li>解析</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.age:</span><br><span class="line">基本类型传复印件。main方法中的age和changeValue1方法中的age一个属于原件，一个属于副本。changeValue1只是修改了age的副本，真正的age并未修改，所以age依旧是10。</span><br><span class="line"></span><br><span class="line">2.personName:</span><br><span class="line">引用类型传递的是内存地址。所以changeValue2会被修改</span><br><span class="line"></span><br><span class="line">3.String</span><br><span class="line">因为常量池中没有str，所以会现在常量池中新建一个str，在执行changeValue3的时候，changeValue3方法会首先查找常量池中有没有`xxx`这个常量，没有的话就会新建这个常量，并且该方法指向该常量。但是main方法最后的输出是输出main方法中的str，而不是changeValue3中的str，所以依旧是abc</span><br></pre></td></tr></table></figure><h3 id="八、JVM内存调整"><a href="#八、JVM内存调整" class="headerlink" title="八、JVM内存调整"></a>八、JVM内存调整</h3><ul><li>在Java8中，永久代已经被移除，被一个成为元空间的区域所取代，元空间的本质和永久代类似。</li><li>元空间与永久代之间最大的区别在于：<ul><li>永久代使用的是JVM的堆内存，但是Java8之后的元空间并不在虚拟机中而是使用本机的物理内存。</li></ul></li><li>因此默认情况下，元空间的大小仅受本地内存限制。类的元数据放入Native Memory，字符串池河类的静态变量放入Java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而是由系统的实际可用空间来控制。</li></ul><h4 id="8-1、堆内存调优简介"><a href="#8-1、堆内存调优简介" class="headerlink" title="8.1、堆内存调优简介"></a>8.1、堆内存调优简介</h4><ul><li>Xms：设置初始分配大小，默认为物理内存的1/64</li><li>Xmx：最大分配内存，默认为物理内存的1/4</li><li>XX:+PrintGCDetail：输出详细的GC处理日志</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();<span class="comment">//返回Java虚拟机试图使用的最大内存量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory();<span class="comment">//返回Java虚拟机中的内存总量</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"MAX_MEMORY="</span>+maxMemory+<span class="string">"字节、"</span>+(maxMemory/(<span class="keyword">double</span>)<span class="number">1024</span>/<span class="number">1024</span>)+<span class="string">"MB"</span>);</span><br><span class="line">        System.out.println(<span class="string">"TOTAL_MEMORY="</span>+totalMemory+<span class="string">"字节、"</span>+(totalMemory/(<span class="keyword">double</span>)<span class="number">1024</span>/<span class="number">1024</span>)+<span class="string">"MB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用idea修改jvm内存，并显示GC处理日志。要求初始分配大小和最大分配内存相同。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms1024m -Xmx1024m -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/07/28/aktn7n.png" alt="JVM内存修改"><br><img data-src="https://s1.ax1x.com/2020/07/28/akakp6.png" alt="运行效果"></p><ul><li>所以逻辑上堆内存是由年轻代+老年代+元空间构成；物理上是由年轻代+老年代构成。因为上图中<code>PSYoungGen的容量/1024+ParOldGen的容量/1024=MAX_MEMORY</code></li></ul><h4 id="8-2、OOM"><a href="#8-2、OOM" class="headerlink" title="8.2、OOM"></a>8.2、OOM</h4><ul><li>如果出现java.lang.OutOfMemoryError:Java heap space异常，说明Java虚拟机的堆内存不够，原因有二：<ul><li>1.Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整</li><li>2.代码中创建了大量大对象。并且长时间不能被垃圾收集器收集（存在被引用）</li></ul></li></ul><h4 id="8-3、GC收集日志信息（OOM情况）"><a href="#8-3、GC收集日志信息（OOM情况）" class="headerlink" title="8.3、GC收集日志信息（OOM情况）"></a>8.3、GC收集日志信息（OOM情况）</h4><ul><li>设置Xms和Xmx为10m</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">40</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>由上述代码可以看出，JVM总内存为10M，但是代码中新建了一个大小为40M的数组，所以会产生OOM</p></li><li><p>报错信息</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">1743</span>K-&gt;<span class="number">504</span>K(<span class="number">2560</span>K)] <span class="number">1743</span>K-&gt;<span class="number">688</span>K(<span class="number">9728</span>K), <span class="number">0.0017138</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">504</span>K-&gt;<span class="number">496</span>K(<span class="number">2560</span>K)] <span class="number">688</span>K-&gt;<span class="number">728</span>K(<span class="number">9728</span>K), <span class="number">0.0013348</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 496K-&gt;0<span class="title">K</span><span class="params">(<span class="number">2560</span>K)</span>] [ParOldGen: 232K-&gt;602<span class="title">K</span><span class="params">(<span class="number">7168</span>K)</span>] 728K-&gt;602<span class="title">K</span><span class="params">(<span class="number">9728</span>K)</span>, [Metaspace: 3334K-&gt;3334<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0126571 secs] [Times: user</span>=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">0</span>K-&gt;<span class="number">0</span>K(<span class="number">2560</span>K)] <span class="number">602</span>K-&gt;<span class="number">602</span>K(<span class="number">9728</span>K), <span class="number">0.0011456</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(<span class="number">2560</span>K)</span>] [ParOldGen: 602K-&gt;584<span class="title">K</span><span class="params">(<span class="number">7168</span>K)</span>] 602K-&gt;584<span class="title">K</span><span class="params">(<span class="number">9728</span>K)</span>, [Metaspace: 3334K-&gt;3334<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0133559 secs] [Times: user</span>=<span class="number">0.06</span> sys=<span class="number">0.00</span>, real=<span class="number">0.02</span> secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">2560</span>K, used <span class="number">139</span>K [<span class="number">0x00000000ffd00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space <span class="number">2048</span>K, <span class="number">6</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffd22c78</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">7168</span>K, used <span class="number">584</span>K [<span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ffd00000</span>, <span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  object space <span class="number">7168</span>K, <span class="number">8</span>% used [<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ff6922f8</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">3393</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 372<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line">Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span><br><span class="line"> at com.sc.Test3.main(Test3.java:<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><ol><li>轻GC</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) </span><br><span class="line">[PSYoungGen: <span class="number">1743</span>K-&gt;<span class="number">504</span>K(<span class="number">2560</span>K)] <span class="number">1743</span>K-&gt;<span class="number">688</span>K(<span class="number">9728</span>K), <span class="number">0.0017138</span> secs] </span><br><span class="line">[Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/07/28/ak2PN8.png" alt="轻GC日志详情"></p><p>2.FullGC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span></span></span><br><span class="line"><span class="function">[PSYoungGen: 496K-&gt;0<span class="title">K</span><span class="params">(<span class="number">2560</span>K)</span>] </span></span><br><span class="line"><span class="function">[ParOldGen: 232K-&gt;602<span class="title">K</span><span class="params">(<span class="number">7168</span>K)</span>] 728K-&gt;602<span class="title">K</span><span class="params">(<span class="number">9728</span>K)</span>, </span></span><br><span class="line"><span class="function">[Metaspace: 3334K-&gt;3334<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0126571 secs] </span></span><br><span class="line"><span class="function">[Times: user</span>=<span class="number">0.08</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/07/28/ak2z24.png" alt="FullGC日志详情1"><br><img data-src="https://s1.ax1x.com/2020/07/28/akRCrR.png" alt="FullGC日志详情2"></p><h3 id="九、GC"><a href="#九、GC" class="headerlink" title="九、GC"></a>九、GC</h3><h4 id="9-1、GC是什么"><a href="#9-1、GC是什么" class="headerlink" title="9.1、GC是什么"></a>9.1、GC是什么</h4><ul><li>GC是分代收集算法（次数上频繁收集Young区、次数上较少收集Old区，基本不动元空间）</li></ul><h4 id="9-2、GC算法总体概述"><a href="#9-2、GC算法总体概述" class="headerlink" title="9.2、GC算法总体概述"></a>9.2、GC算法总体概述</h4><p><img data-src="https://s1.ax1x.com/2020/07/28/akb7M6.png" alt="GC算法总体"></p><ul><li><p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。</p></li><li><p>因此GC按照回收的区域又分了两种类型，一种是普通GC（Minor GC），一种是全局GC（Major GC或者Full GC）</p></li><li><p>Minor GC和Full GC的区别</p><ul><li>普通GC（Minor GC）：只针对新生代区域的GC，指发生在新生代的垃圾收集动作，因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速度也比较快。</li><li>全局GC（Full GC或者Major GC）：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴随至少一次的Minor GC（但并不是绝对的）。Major GC的速度一般要比Minor GC慢上10倍以上。</li></ul></li></ul><h3 id="十、GC四大算法"><a href="#十、GC四大算法" class="headerlink" title="十、GC四大算法"></a>十、GC四大算法</h3><h4 id="10-1、引用计数法"><a href="#10-1、引用计数法" class="headerlink" title="10.1、引用计数法"></a>10.1、引用计数法</h4><ul><li><p>JVM的实现一般不采用这种方式</p></li><li><p>缺点主要是</p><ul><li>每次对对象赋值时均要维护引用计数器，且计数器本身也有一定的消耗</li><li>较难处理循环引用</li></ul></li></ul><h4 id="10-2、复制算法（Copying）"><a href="#10-2、复制算法（Copying）" class="headerlink" title="10.2、复制算法（Copying）"></a>10.2、复制算法（Copying）</h4><ul><li><p>年轻代中使用的是Minor GC，这种GC算法采用的是复制算法（Copying）</p></li><li><p>Minor GC会把Eden中的所有活的对象都移到Survivor区域中，如果Survivor区中放不下，那么剩下的活的对象就被移到Old generation中，也即一旦收集后，Eden就变成空的了。</p></li><li><p>当对象在Eden（包括一个Survivor区域，这里假设是from区域）出生后，在经过一次Minor GC后，如果对象还存活，并且能够被另外一块Survivor区域所容纳（上面已经假设为from区域，这里应为to区域，即to区域有足够的内存空间来存储Eden和from区域中存活的对象），则使用复制算法将这些仍然存活的对象复制到另外一块Survivor区域（即to区域）中，然后清理所使用过的Eden以及Survivor区域（即from区域），并且将这些对象的年龄设置为1，以后对象在Survivor区每熬过一次Minor GC，就将对象的年龄+1，当对象的年龄达到某个值时（默认是15，通过<code>-XX:MaxTenuringThreshold</code>（设置对象在新生代中存活的次数）来设定参数），这些对象就会成为老年代。Java8最大是15，所以只能调低。</p></li><li><p>年轻代中的GC，主要是复制算法。HotSpot JVM把年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。默认比例为8:1:1，一般情况下，新创建的对象都会被分配到Eden区（一些大对象特殊处理），这些对象经过第一次Minor GC后，如果仍然存活，将会被移到Survivor区。对象在Survivor区中每熬过一次Minor GC，年龄就会增加1岁，当他的年龄增加到一定程度时，就会被移动到老年代中，因为年轻代中的对象基本是朝生夕死的（90%以上），所以在年轻代的垃圾回收算法使用的是复制算法，复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。复制算法不会产生内存碎片。</p></li><li><p><strong>原理</strong></p><ul><li>从根集合（GC Root）开始，通过Tracing从From中找到存活对象，拷贝到To中；</li><li>From和To交换身份，下次内存分配从To开始<br><img data-src="https://s1.ax1x.com/2020/08/05/asVrwD.png" alt="复制算法"></li></ul></li><li><p>辅助算法的缺点是需要双倍的空间，也就是浪费了一半的内存。</p></li></ul><h4 id="10-3、标记清除算法"><a href="#10-3、标记清除算法" class="headerlink" title="10.3、标记清除算法"></a>10.3、标记清除算法</h4><ul><li><p>主要用在老年代。老年代一般是由标记清除或者是标记清除与标记整理的混合实现。</p></li><li><p>算法分成标记和清除两个阶段，先标记出要回收的对象，然后统一回收这些对象。</p></li><li><p>当程序运行期间，若可以使用的内存被耗尽的时候，GC线程就会被出发并将程序暂停，随后将要回收的对象标记一边，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。</p></li></ul><p><img data-src="https://s1.ax1x.com/2020/08/05/asuXeP.png" alt="标记清除"></p><ul><li>首先，他的缺点就是效率比较低（递归与全堆对象遍历），而且在进行GC的时候，需要停止应用程序，这会导致用户体验非常差劲。其次，这种方式清理出来的空闲内存是不连续的，因为死亡对象都是随机的出现在内存的各个角落，把他们清除之后，内存的布局就会乱七八糟，而为了应付这一点，JVM就不得不维持一个内存的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</li></ul><h4 id="10-4、标记压缩算法"><a href="#10-4、标记压缩算法" class="headerlink" title="10.4、标记压缩算法"></a>10.4、标记压缩算法</h4><p><img data-src="https://s1.ax1x.com/2020/08/05/aslYkV.png" alt="标记压缩"></p><ul><li><p>在整理压缩阶段，不再对标记的对象做回收，而是通过所有存活对象都向一端移动，然后直接清除边界以外的内存。</p></li><li><p>标记压缩算法唯一的缺点是效率不高，不仅要标记所有存活对象，还要整理所有存活对象的引用地址。从效率上来说，标记压缩算法的效率要低于复制算法。</p></li></ul><h4 id="10-5、算法对比和整理"><a href="#10-5、算法对比和整理" class="headerlink" title="10.5、算法对比和整理"></a>10.5、算法对比和整理</h4><ul><li><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（此处的效率只是简单的对比时间复杂度）</p></li><li><p>内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</p></li><li><p>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</p></li><li><p>垃圾的分代收集算法</p><ul><li>年轻代：年轻代的特点是区域相对老年代较小，对象存活率低。这种情况下复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因而很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过HotSpot中的两个Survivor的设计得到缓解。</li><li>老年代：老年代的特点是区域较大，对象存活率高。这种情况，存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记清除或者是标记清除和标记压缩的混合实现。Mark阶段的开销与存活对象的数量成正比，这点上来说，对于老年代，标记清除或者标记压缩有一些不符，但可以通过多核/线程利用，对并发、并行的形式提升标记效率。Sweep阶段的开销与所管理区域的大小成正相关。但Sweep“就地处决”的特点，回收的过程没有对象的移动，使其相对其他有对象移动步骤的回收算法，仍然是效率最好的。但是需要解决内存碎片问题。</li></ul></li></ul><h3 id="十一、JMM"><a href="#十一、JMM" class="headerlink" title="十一、JMM"></a>十一、JMM</h3><ul><li><p>可见性</p></li><li><p>原子性</p></li><li><p>有序性</p></li></ul><h4 id="11-1、Volatile"><a href="#11-1、Volatile" class="headerlink" title="11.1、Volatile"></a>11.1、Volatile</h4><ul><li>volatile是Java虚拟机提供的轻量级的同步机制。<strong>保证可见性、不保证原子性、禁止指令重排</strong></li></ul><h4 id="11-2、JMM（Java内存模型）"><a href="#11-2、JMM（Java内存模型）" class="headerlink" title="11.2、JMM（Java内存模型）"></a>11.2、JMM（Java内存模型）</h4><ul><li>JMM（Java内存模型，Java Memory Model，简称JMM）本身是一种抽象的概念，并不真实存在，它描述的是一组规范或规则，通过这组规范定义了程序中各个变量（包括实例字段、静态字段和构成数组对象的元素）的访问方式。</li><li>JMM关于同步的规定：</li></ul><ol><li>线程解锁之前，必须把共享变量的值刷新回主内存</li><li>线程加锁之前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ol><ul><li>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方成为栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但线程对变量的操作（读取赋值等）都必须再工作内存中进行，首先要将变量从主内存拷贝到线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量，各个线程中的工作内存存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须哦那个过主内存来完成。<br><img data-src="https://s1.ax1x.com/2020/08/19/dl03cQ.png" alt="JMM"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumber</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo1205</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">1205</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*JMM=可见性（通知机制）*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyNumber myNumber = <span class="keyword">new</span> MyNumber();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"*************come in"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myNumber.addTo1205();<span class="comment">//将10修改为1205</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"A update number,number value:"</span>+myNumber.number);</span><br><span class="line">        &#125;,<span class="string">"AAA"</span>).start();</span><br><span class="line">        <span class="keyword">while</span> (myNumber.number==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//需要有一种通知机制告诉main线程，number已经修改为1205，跳出while</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"mission is over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述代码运行后，会发现无法跳出while循环，再输出number value后一直在while循环，并不会跳出。因为不同的线程间无法访问对方的工作内存，线程间的通信必须通过主内存来完成。在while循环那里，并没有转换为1025，即没有线程通知其数值已经转变。<strong>在初始类中加入volatile关键字即可,代码如下</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNumber</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTo1205</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">1205</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*JMM=可见性（通知机制）*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyNumber myNumber = <span class="keyword">new</span> MyNumber();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"*************come in"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            myNumber.addTo1205();<span class="comment">//将10修改为1205</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"A update number,number value:"</span>+myNumber.number);</span><br><span class="line">        &#125;,<span class="string">"AAA"</span>).start();</span><br><span class="line">        <span class="keyword">while</span> (myNumber.number==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">//需要有一种通知机制告诉main线程，number已经修改为1205，跳出while</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"mission is over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/08/19/dlWpWR.png" alt="代码截图"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及服务总线Bus学习</title>
      <link href="/jokerboozp.github.io/2020/07/10/2020-07-10-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8A%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BA%BFBus%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/07/10/2020-07-10-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8A%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BA%BFBus%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Bus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Bus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件之ActiveMQ学习</title>
      <link href="/jokerboozp.github.io/2020/07/10/2020-07-10-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BActiveMQ%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/07/10/2020-07-10-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BActiveMQ%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码地址"><a href="#所有代码地址" class="headerlink" title="所有代码地址"></a>所有代码地址</h2><p><a href="https://github.com/Jokerboozp/activemq_demo.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/activemq_demo.git</a></p><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><h3 id="1-1、目前系统存在的问题"><a href="#1-1、目前系统存在的问题" class="headerlink" title="1.1、目前系统存在的问题"></a>1.1、目前系统存在的问题</h3><ul><li>微服务架构后，链式调用时我们在写程序时候的一般流程，为了完成一个整体功能会将其拆分成多个函数（或者子模块）。比如模块A调用模块B，模块B调用模块C，模块C调用模块D。但是在大型分布式应用中，系统间的RPC交互繁杂。这样就会出现很多问题。<a id="more"></a></li></ul><h4 id="1-1-1、系统之间接口耦合比较严重"><a href="#1-1-1、系统之间接口耦合比较严重" class="headerlink" title="1.1.1、系统之间接口耦合比较严重"></a>1.1.1、系统之间接口耦合比较严重</h4><ul><li>每次新增一个下游功能，都要对上游的相关接口进行改造。假如系统A要发送数据给系统B和C，发送给每个系统的数据可能有差异，因此系统A对要发送给每个系统的数据进行了组装，然后逐一发送；当代码上线后，又新增了一个需求，把数据也发送给D，新上了一个D系统也要接受A系统的数据。此时就要修改A系统，让他感知到D的存在，同时把数据处理好再A给D。在这个过程中可以看到，每接入一个下游系统，就要对A系统进行代码改造，开发联调的效率很低。</li></ul><h4 id="1-1-2、面对大流量并发时，容易被冲垮"><a href="#1-1-2、面对大流量并发时，容易被冲垮" class="headerlink" title="1.1.2、面对大流量并发时，容易被冲垮"></a>1.1.2、面对大流量并发时，容易被冲垮</h4><ul><li>每个接口模块的吞吐能力是有限的，这个上限能力如果比作堤坝，当大流量来临时，容易被冲垮。</li></ul><h4 id="1-1-3、等待同步存在性能问题"><a href="#1-1-3、等待同步存在性能问题" class="headerlink" title="1.1.3、等待同步存在性能问题"></a>1.1.3、等待同步存在性能问题</h4><ul><li>RPC接口基本上是同步调用，整体的服务性能遵循“木桶理论”，即整个系统的耗时取决于链路中最慢的那个接口。</li></ul><h3 id="1-2、解决上述问题"><a href="#1-2、解决上述问题" class="headerlink" title="1.2、解决上述问题"></a>1.2、解决上述问题</h3><h4 id="1-2-1、能够解耦"><a href="#1-2-1、能够解耦" class="headerlink" title="1.2.1、能够解耦"></a>1.2.1、能够解耦</h4><ul><li>要做到系统解耦，当新的模块进来时，可以做到代码改动最小</li></ul><h4 id="1-2-2、能够消峰"><a href="#1-2-2、能够消峰" class="headerlink" title="1.2.2、能够消峰"></a>1.2.2、能够消峰</h4><ul><li>设置流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲垮</li></ul><h4 id="1-2-3、能够异步"><a href="#1-2-3、能够异步" class="headerlink" title="1.2.3、能够异步"></a>1.2.3、能够异步</h4><ul><li>强弱依赖原理能将非关键调用链路的操作异步化并提升整体系统的吞吐能力。</li></ul><h3 id="1-3、定义"><a href="#1-3、定义" class="headerlink" title="1.3、定义"></a>1.3、定义</h3><h4 id="1-3-1、什么是面向消息的中间件（MOM）"><a href="#1-3-1、什么是面向消息的中间件（MOM）" class="headerlink" title="1.3.1、什么是面向消息的中间件（MOM）"></a>1.3.1、什么是面向消息的中间件（MOM）</h4><ul><li>是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型在分布式环境下提供应用解耦、弹性伸缩、冗余存储、流量消峰、异步通信、数据同步等功能。</li></ul><h4 id="1-3-2、大致流程"><a href="#1-3-2、大致流程" class="headerlink" title="1.3.2、大致流程"></a>1.3.2、大致流程</h4><ul><li>发送者把消息发送给消息服务器，消息服务器将消息存放在若干队列/主题topic中。在合适的时候，消息服务器会将消息转发给接受者。在这个过程中，发送和接受是异步的，也就是发送无需等待，而且发送者和接受者的生命周期也没有必然关系；尤其是在发布pub/订阅sub模式下，也可以完成一对多的通信，即让一个消息有多个接受者。</li></ul><h4 id="1-3-3、特点"><a href="#1-3-3、特点" class="headerlink" title="1.3.3、特点"></a>1.3.3、特点</h4><ul><li>采用异步处理方式</li><li>应用系统之间解耦合：发送者和接受者不必了解对方，只需要确认消息；发送者和接受者不必同时在线。</li></ul><h2 id="二、ActiveMQ安装和控制台"><a href="#二、ActiveMQ安装和控制台" class="headerlink" title="二、ActiveMQ安装和控制台"></a>二、ActiveMQ安装和控制台</h2><ul><li>安装运行不再介绍，解压运行即可（需要在Linux上先安装好JDK）</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/17/UsYvRA.png" alt="安装运行"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动</span></span><br><span class="line">./activemq start</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止</span></span><br><span class="line">./activemq stop</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启</span></span><br><span class="line">./activemq restart</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看后台进程</span></span><br><span class="line">netstat -anp|grep <span class="number">61616</span></span><br></pre></td></tr></table></figure><h3 id="2-1、运行"><a href="#2-1、运行" class="headerlink" title="2.1、运行"></a>2.1、运行</h3><h4 id="2-1-1、关闭Linux防火墙"><a href="#2-1-1、关闭Linux防火墙" class="headerlink" title="2.1.1、关闭Linux防火墙"></a>2.1.1、关闭Linux防火墙</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h4 id="2-1-2、在本机和Linux互ping，确保可以互相访问"><a href="#2-1-2、在本机和Linux互ping，确保可以互相访问" class="headerlink" title="2.1.2、在本机和Linux互ping，确保可以互相访问"></a>2.1.2、在本机和Linux互ping，确保可以互相访问</h4><h4 id="2-1-3、本机访问测试地址"><a href="#2-1-3、本机访问测试地址" class="headerlink" title="2.1.3、本机访问测试地址"></a>2.1.3、本机访问测试地址</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.23.128:8161/admin/</span><br></pre></td></tr></table></figure><ul><li>默认账户名密码均为admin</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/17/UykEq0.png" alt="运行结果"></p><h3 id="2-2、注意"><a href="#2-2、注意" class="headerlink" title="2.2、注意"></a>2.2、注意</h3><ul><li>采用61616端口提供JMS服务（后台端口）</li><li>采用8161端口提供管理控制台服务（前台访问端口）</li></ul><h2 id="三、利用Java编码实现ActiveMQ队列（queue）通讯"><a href="#三、利用Java编码实现ActiveMQ队列（queue）通讯" class="headerlink" title="三、利用Java编码实现ActiveMQ队列（queue）通讯"></a>三、利用Java编码实现ActiveMQ队列（queue）通讯</h2><h3 id="3-1、MQ标准API"><a href="#3-1、MQ标准API" class="headerlink" title="3.1、MQ标准API"></a>3.1、MQ标准API</h3><h4 id="3-1-1、JMS编码总体架构"><a href="#3-1-1、JMS编码总体架构" class="headerlink" title="3.1.1、JMS编码总体架构"></a>3.1.1、JMS编码总体架构</h4><p><img data-src="https://s1.ax1x.com/2020/07/17/UymTm9.png" alt="JMS编码架构"></p><h4 id="3-1-2、两大特性模式"><a href="#3-1-2、两大特性模式" class="headerlink" title="3.1.2、两大特性模式"></a>3.1.2、两大特性模式</h4><p><img data-src="https://s1.ax1x.com/2020/07/17/UyYRte.png" alt="特性模式"></p><ul><li>在点对点的消息传递域中，目的地被称为队列（queue）</li><li>在发布订阅消息传递域中，目的地被称为主题（topic）</li></ul><h3 id="3-2、点对点消息传递"><a href="#3-2、点对点消息传递" class="headerlink" title="3.2、点对点消息传递"></a>3.2、点对点消息传递</h3><h4 id="3-2-1、创建连接工厂"><a href="#3-2-1、创建连接工厂" class="headerlink" title="3.2.1、创建连接工厂"></a>3.2.1、创建连接工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br></pre></td></tr></table></figure><h4 id="3-2-2、通过连接工厂获取到连接connection并启动"><a href="#3-2-2、通过连接工厂获取到连接connection并启动" class="headerlink" title="3.2.2、通过连接工厂获取到连接connection并启动"></a>3.2.2、通过连接工厂获取到连接connection并启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">connection.start();</span><br></pre></td></tr></table></figure><h4 id="3-2-3、创建会话Session"><a href="#3-2-3、创建会话Session" class="headerlink" title="3.2.3、创建会话Session"></a>3.2.3、创建会话Session</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><h4 id="3-2-4、创建目的地"><a href="#3-2-4、创建目的地" class="headerlink" title="3.2.4、创建目的地"></a>3.2.4、创建目的地</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = session.createQueue(QUEUE_NAME);</span><br></pre></td></tr></table></figure><h4 id="3-2-5、创建消息的生产者"><a href="#3-2-5、创建消息的生产者" class="headerlink" title="3.2.5、创建消息的生产者"></a>3.2.5、创建消息的生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MessageProducer messageProducer = session.createProducer(queue);</span><br></pre></td></tr></table></figure><h4 id="3-2-6、通过消息生产者产生消息并发送给mq"><a href="#3-2-6、通过消息生产者产生消息并发送给mq" class="headerlink" title="3.2.6、通过消息生产者产生消息并发送给mq"></a>3.2.6、通过消息生产者产生消息并发送给mq</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"msg----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-7、关闭资源"><a href="#3-2-7、关闭资源" class="headerlink" title="3.2.7、关闭资源"></a>3.2.7、关闭资源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">messageProducer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h4 id="3-2-8、最终效果"><a href="#3-2-8、最终效果" class="headerlink" title="3.2.8、最终效果"></a>3.2.8、最终效果</h4><p><img data-src="https://s1.ax1x.com/2020/07/17/UyWDcq.png" alt="浏览器访问"><br><img data-src="https://s1.ax1x.com/2020/07/17/UyW5g1.png" alt="后台显示"></p><ul><li>Number Of Pending Messages：等待消费的信息。这个是当前未出队列的数量。公式=总接收数-总出队列数</li><li>Number Of Consumers：消费者数量。消费者端的消费者数量。</li><li>Messages Enqueued：进队消息数。进入队列的总数量，包括出队列的。这个数量只增不减。</li><li>Messages Dequeued：出队消息数。可以理解为是消费者消费掉的数量。</li><li>**当有一个消息进入这个队列时，等待消费的信息是1，进入队列的消息是1；当消息消费后，等待消费的消息是0，进入队列的消息是1，出队列的消息是1；再来一条消息时，等待消费的消息是1，进入队列的消息就是2。</li></ul><h4 id="3-2-9、消息生产者完整代码"><a href="#3-2-9、消息生产者完整代码" class="headerlink" title="3.2.9、消息生产者完整代码"></a>3.2.9、消息生产者完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"queue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"msg----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、消息消费者编码"><a href="#3-3、消息消费者编码" class="headerlink" title="3.3、消息消费者编码"></a>3.3、消息消费者编码</h3><ul><li>两种消费方式：同步阻塞方式（receive）、异步非阻塞方式（onMessage）</li></ul><h4 id="3-3-1、同步阻塞方式（receive）"><a href="#3-3-1、同步阻塞方式（receive）" class="headerlink" title="3.3.1、同步阻塞方式（receive）"></a>3.3.1、同步阻塞方式（receive）</h4><ul><li>订阅者或者接收者调用MessageConsumer的receive()方法来接收消息，receive方法在能够接收到消息之前（或超时之前）将一直阻塞。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"queue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(queue);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//TextMessage textMessage = (TextMessage) messageConsumer.receive();一直等待</span></span><br><span class="line">            TextMessage textMessage = (TextMessage) messageConsumer.receive(<span class="number">4000L</span>);<span class="comment">//有等待时间，4秒钟以后停止等待</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != textMessage)&#123;</span><br><span class="line">                System.out.println(<span class="string">"*********消费者接收消息："</span>+textMessage.getText());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/08/20/d3vnaQ.png" alt="项目代码"></p><h4 id="3-3-2、通过监听的方式来获取消息"><a href="#3-3-2、通过监听的方式来获取消息" class="headerlink" title="3.3.2、通过监听的方式来获取消息"></a>3.3.2、通过监听的方式来获取消息</h4><ul><li>通过监听的方式来获取消息，也就是异步非阻塞的方式（监听器onMessage），订阅者或者接收者通过MessageConsumer的setMessageListener注册一个消息监听器，当消息到达之后，系统自动调用监听器MessageListener的onMessage方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"queue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(queue);</span><br><span class="line">       <span class="comment">/* while (true)&#123;</span></span><br><span class="line"><span class="comment">            //TextMessage textMessage = (TextMessage) messageConsumer.receive();一直等待</span></span><br><span class="line"><span class="comment">            TextMessage textMessage = (TextMessage) messageConsumer.receive(4000L);//有等待时间，4秒钟以后停止等待</span></span><br><span class="line"><span class="comment">            if (null != textMessage)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("*********消费者接收消息："+textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        messageConsumer.close();</span></span><br><span class="line"><span class="comment">        session.close();</span></span><br><span class="line"><span class="comment">        connection.close();*/</span></span><br><span class="line"></span><br><span class="line">        messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> !=message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">                    TextMessage textMessage= (TextMessage) message;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"*******消费者接收到消息:"</span>+textMessage.getText());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先生产消息：如果只启动一个消费者，那么所有的消息都由这个消费者消费。如果启动一个消费者之后，再启动另外一个消费者，那么消息就会被第一个消费者消费掉，第二个消费者并不会进行消费，只会一直进行监听。</li><li>先启动两个消费者，再生产消息，那么两个消费者就会把消息进行平均分配。</li></ul><h4 id="3-4、JMS开发的基本步骤总结"><a href="#3-4、JMS开发的基本步骤总结" class="headerlink" title="3.4、JMS开发的基本步骤总结"></a>3.4、JMS开发的基本步骤总结</h4><ol><li>创建一个connection factory</li><li>通过connection factory来创建JMS connection</li><li>启动JMS connection</li><li>通过connection 创建JMS session</li><li>创建JMS destination</li><li>创建JMS producer或者创建JMS message并设置destination</li><li>创建JMS consumer或者是注册一个JMS message listener</li><li>发送或者接受JMS message</li><li>关闭所有的JMS资源（connection、session、producer、consumer等）</li></ol><h4 id="3-5、点对点的消息传递域特点"><a href="#3-5、点对点的消息传递域特点" class="headerlink" title="3.5、点对点的消息传递域特点"></a>3.5、点对点的消息传递域特点</h4><ul><li>每个消息只能有一个消费者，类似1对1的关系。好比个人快递自己领取自己的</li><li>消息的生产者和消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运行状态，消费者都可以提取消息。好比我们的发送短信，发送者发送后不见得消费者会即收即看。</li><li>消息被消费后队列中不会再存储，所以消费者不会消费到已经被消费掉的消息。</li></ul><h2 id="四、利用Java编码实现ActiveMQ主题（topic）通讯"><a href="#四、利用Java编码实现ActiveMQ主题（topic）通讯" class="headerlink" title="四、利用Java编码实现ActiveMQ主题（topic）通讯"></a>四、利用Java编码实现ActiveMQ主题（topic）通讯</h2><h3 id="4-1、发布-订阅消息传递域的特点"><a href="#4-1、发布-订阅消息传递域的特点" class="headerlink" title="4.1、发布/订阅消息传递域的特点"></a>4.1、发布/订阅消息传递域的特点</h3><ol><li>生产者将消息发布到topic中，每个消息可以有多个消费者，属于1:N的关系</li><li>生产者和消费者之间有时间上的相关性，订阅某个主题的消费者只能消费自它订阅之后发布的消息</li><li>生产者生产时，topic不保存消息，他是无状态的，不落地。假如无人订阅就去生产，那就是一条废消息，所以，一般先启动消费者再启动生产者。</li></ol><ul><li>JMS规范允许客户创建持久订阅，这就在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费它在未处于激活状态时发送的消息。一句话，好比我们的微信公众号订阅。</li></ul><h3 id="4-2、编码实现生产者、消费者的topic消息"><a href="#4-2、编码实现生产者、消费者的topic消息" class="headerlink" title="4.2、编码实现生产者、消费者的topic消息"></a>4.2、编码实现生产者、消费者的topic消息</h3><ul><li>生产者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce_Topic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME=<span class="string">"topic01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"topicname----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer_Topic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME=<span class="string">"topic01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*messageConsumer.setMessageListener(new MessageListener() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void onMessage(Message message) &#123;</span></span><br><span class="line"><span class="comment">                if (null !=message &amp;&amp; message instanceof TextMessage)&#123;</span></span><br><span class="line"><span class="comment">                    TextMessage textMessage= (TextMessage) message;</span></span><br><span class="line"><span class="comment">                    try &#123;</span></span><br><span class="line"><span class="comment">                        System.out.println("*******消费者接收到消息:"+textMessage.getText());</span></span><br><span class="line"><span class="comment">                    &#125; catch (JMSException e) &#123;</span></span><br><span class="line"><span class="comment">                        e.printStackTrace();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        messageConsumer.setMessageListener((message) -&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">                TextMessage textMessage= (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"*************消费者接收到topic消息："</span>+textMessage.getText());</span><br><span class="line">                &#125;<span class="keyword">catch</span> (JMSException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要先启动订阅，再启动生产，不然发送的消息都是废消息。</li><li>启动三个消费者，然后生产者生产3条消息，每个消费者都会接收到三条消息，不会平均分配。</li></ul><p><img data-src="https://s1.ax1x.com/2020/08/21/dYwUmD.png" alt="项目截图"></p><h3 id="4-3、Topic模式队列和Queue模式队列区别"><a href="#4-3、Topic模式队列和Queue模式队列区别" class="headerlink" title="4.3、Topic模式队列和Queue模式队列区别"></a>4.3、Topic模式队列和Queue模式队列区别</h3><table><thead><tr><th align="left">比较项目</th><th align="right">Topic模式队列</th><th align="center">Queue模式队列</th></tr></thead><tbody><tr><td align="left">工作模式</td><td align="right">“订阅-发布”模式，如果当前没有订阅者，消息将会被丢弃。如果有多个订阅者，那么这些订阅者都会收到消息。</td><td align="center">负载均衡模式，如果当前没有消费者，消息也不会丢弃；如果有多个消费者，那么一条消息也只会发送给其中一个消费者，并且要求消费者返回信息。</td></tr><tr><td align="left">有无状态</td><td align="right">无状态</td><td align="center">Queue数据默认会在mq服务器上以文件形式保存，比如ActiveMQ一般保存在$AMQ_HOME\data\kr-store\data下面，也可以配置成DB存储</td></tr><tr><td align="left">传递完整性</td><td align="right">如果没有订阅者，消息会被丢弃</td><td align="center">消息不会丢弃</td></tr><tr><td align="left">处理效率</td><td align="right">由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议自身的性能差异</td><td align="center">由于一条消息只发送给一个消费者，所以就算消费者再多，性能也不会有明显降低，当然不同消费协议的具体性能也是有差异的</td></tr></tbody></table><h2 id="五、JMS规范和落地"><a href="#五、JMS规范和落地" class="headerlink" title="五、JMS规范和落地"></a>五、JMS规范和落地</h2><h3 id="5-1、JMS是什么"><a href="#5-1、JMS是什么" class="headerlink" title="5.1、JMS是什么"></a>5.1、JMS是什么</h3><ul><li><p>Java Message Service，Java消息服务时JavaEE中的一个技术。指的是两个应用程序之间进行异步通信的API，它为标准消息协议和消息服务提供了一组通用接口，包括创建、发送、读取消息等，用于支持Java应用程序开发。在JavaEE中，当两个应用程序使用JMS进行通信时，他们之间并不是直接相连的，而是通过一个共同的消息收发服务组件关联起来以达到解耦/异步削峰的效果。</p></li><li><p>JavaEE是一套使用Java进行企业级应用开发的，大家一致遵循的13个核心规范工业标准。JavaEE平台提供了一个基于组件的方法来加快设计、开发、装配及部署企业应用程序。主要包括：</p><ul><li>JDBC（Java Database）：数据库连接</li><li>JNDI（Java Naming and Directory Interfaces）：Java的命名和目录接口</li><li>EJB：（Enterprise JavaBean）</li><li>RMI：（Remote Method Invoke）：远程方法调用</li><li>Java IDL（Interface Description Language）/CORBA（Common Object Broker Architecture）：接口定义语言/公用对象请求代理程序体系结构</li><li>JSP：Java Server Pages</li><li>Servlet</li><li>XML：Extension Markup Language，可拓展白标记语言</li><li>JMS：Java Message Service，Java消息服务</li><li>JTA（Java Transaction API）：Java事务API</li><li>JTS（Java Transaction Service）：Java事务服务</li><li>JavaMail</li><li>JAF：JavaBean Activation Framework</li></ul></li></ul><h3 id="5-2、JMS的组成结构和特点"><a href="#5-2、JMS的组成结构和特点" class="headerlink" title="5.2、JMS的组成结构和特点"></a>5.2、JMS的组成结构和特点</h3><h4 id="5-2-1、JMS-provider"><a href="#5-2-1、JMS-provider" class="headerlink" title="5.2.1、JMS provider"></a>5.2.1、JMS provider</h4><ul><li>实现JMS接口和规范的消息中间件，也就是MQ服务器</li></ul><h4 id="5-2-2、JMS-producer"><a href="#5-2-2、JMS-producer" class="headerlink" title="5.2.2、JMS producer"></a>5.2.2、JMS producer</h4><ul><li>消息生产者，创建和发送JMS消息的客户端应用</li></ul><h4 id="5-2-3、JMS-consumer"><a href="#5-2-3、JMS-consumer" class="headerlink" title="5.2.3、JMS consumer"></a>5.2.3、JMS consumer</h4><ul><li>消息消费者，接受和处理JMS消息的客户端应用</li></ul><h4 id="5-2-4、JMS-message"><a href="#5-2-4、JMS-message" class="headerlink" title="5.2.4、JMS message"></a>5.2.4、JMS message</h4><ul><li><p>消息头</p><ul><li>JMSDestination：消息发送的目的地，主要是指Queue和Topic</li><li>JMSDeliveryMode：持久模式和非持久模式（一条持久性的信息，应该被传送“一次，仅仅一次”，这就意味着如果JMS提供者出现故障，该消息并不会丢失，他会在服务器恢复之后再次传递；一条非持久的消息，最多会传送一次，这意味着服务器出现故障，该消息将永远丢失）</li><li>JMSExpiration：可以设置消息在一定时间后过期，默认是永不过期。消息过期时间，等于Destination的send方法中的timeToLive值加上发送时刻的GMT时间值。如果timeToLive值等于0，则JMSExpiration被设为0，表示该消息永不过期。如果发送后，在消息过期时间之后消息还没有被发送到目的地，则该消息被清除。</li><li>JMSPriority：消息优先级，从0<del>9十个级别，0</del>4是普通消息，5~9是加急消息。JMS不要求MQ严格按照这十个优先级发送消息，但必须保证加急消息要先于普通消息到达，默认是４级。</li><li>JMSMessageID：唯一识别每个消息的标识，由MQ产生</li></ul></li><li><p>消息属性</p><ul><li>如果需要除消息头字段之外的值，那么可以使用消息属性</li><li>他们是以属性名和属性值对的形式制定的，可以将属性视为消息头的扩展，属性执行一些消息头没有包括的附加信息，比如可以在属性里指定消息选择器。</li><li>消息的属性就像可以分配给一条消息的附加消息头一样，他们允许开发者添加有关消息的不透明附加消息。</li><li>他们还用于暴露消息选择器在过滤是使用的数据。</li><li>识别、去重、重点标注等操作都是非常有用的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TextMessage message=session.createTextMessage();</span><br><span class="line">message.setText(text);</span><br><span class="line">message.setStringProperty(<span class="string">"username"</span>,<span class="string">"z3"</span>);   <span class="comment">//自定义属性</span></span><br></pre></td></tr></table></figure><ul><li><p>消息体（封装具体的消息数据）</p><ul><li><strong>五种消息体格式（发送和接收的消息体类型必须一致对应）</strong></li><li>TextMessage：普通字符串消息，包含一个String</li><li>MapMessage：一个Map类型的信息，key为String类型，而值为Java的基本类型</li><li>BytesMessage：二进制数组消息，包含一个byte[]</li><li>StreamMessage：Java数据流消息，用标准流操作来顺序的填充和读取</li><li>ObjectMessage：对象消息，包含一个可序列化的Java对象</li></ul></li></ul><h3 id="5-3、-JMS的可靠性"><a href="#5-3、-JMS的可靠性" class="headerlink" title="5.3、 JMS的可靠性"></a>5.3、 JMS的可靠性</h3><h4 id="5-3-1、持久性"><a href="#5-3-1、持久性" class="headerlink" title="5.3.1、持久性"></a>5.3.1、持久性</h4><ul><li>非持久（服务器宕机，消息不存在）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br></pre></td></tr></table></figure><ul><li>持久（服务器宕机，消息依然存在）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br></pre></td></tr></table></figure><ul><li><p>队列的默认消息传送模式是持久化消息，此模式保证这些消息只被传送一次和成功使用一次，对于这些消息，可靠性是优先考虑的因素。</p></li><li><p>可靠性的另一个重要方面是确保持久性消息传送至目标后，消息服务在向消费者传送他们之前不会丢失这些消息。</p></li><li><p><strong>持久化topic</strong></p><ul><li>一定要先运行一次消费者，等于向MQ注册，类似于我订阅了这个主题。然后再运行生产者发送消息，此时无论消费者是否在线，都会接收到，不在线的话，下次连接的时候，会把没有收过的消息都接收下来。</li></ul></li></ul><ol><li>Consumer</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer_Topic_Persist</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME=<span class="string">"Topic-Persist"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*********z3"</span>);</span><br><span class="line"></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.setClientID(<span class="string">"z3"</span>);</span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line">        TopicSubscriber topicSubscriber = session.createDurableSubscriber(topic, <span class="string">"remark"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        Message message = topicSubscriber.receive();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">null</span> !=message)&#123;</span><br><span class="line">            TextMessage textMessage= (TextMessage) message;</span><br><span class="line">            System.out.println(<span class="string">"**********收到的持久化topic:"</span>+textMessage.getText());</span><br><span class="line">            message = topicSubscriber.receive(<span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Producer</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProducer_Topic_Persist</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME=<span class="string">"Topic-Persist"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line"></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line"></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = (TextMessage) session.createTextMessage(<span class="string">"msg-persist----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2、消息的生产者事务"><a href="#5-3-2、消息的生产者事务" class="headerlink" title="5.3.2、消息的生产者事务"></a>5.3.2、消息的生产者事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure><ul><li>生产者在创建session时，事务可以选择true或者false，选择true的话，先执行send再执行commit，消息才被真正的提交到队列中。消息需要批量发送，需要缓冲区处理。选择false的话，只需要执行send，就进入到队列中，关闭事务，那第二个签收参数的设置需要有效。</li></ul><ol><li>如果选择false，那么在生产消息后，只需要执行send，消息就会进入到队列中。无需进行其他操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProducer_TX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"queue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息非持久化</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"tx msg----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"tx消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行完毕后可以看到消息成功进入MQ队列<br><img data-src="https://s1.ax1x.com/2020/09/03/wCICw9.png" alt="关闭事务"></li></ul><ol start="2"><li>如果选择true，那么需要先执行send再执行commit，消息才被真正的提交到队列中。按照false的方式进行提交是无法进入队列的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProducer_TX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"tx-message"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息非持久化</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"tx msg----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"tx消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行完毕后可以看到消息并没有成功进入MQ队列<br><img data-src="https://s1.ax1x.com/2020/09/03/wCojrF.png" alt="事务开启，但未提交"></p></li><li><p>添加提交代码后,可以看到消息成功进入MQ队列</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProducer_TX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"tx-message"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂,按照给定的url地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过连接工厂获得连接Connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建会话session</span></span><br><span class="line">        <span class="comment">//两个参数：第一个叫事务，第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">true</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地（具体是队列还是主题）</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消息的生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息非持久化</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过使用消息生产者生产3条消息发送到mq队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//创建消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"tx msg----:"</span> + i);<span class="comment">//创建一个字符串</span></span><br><span class="line">            <span class="comment">//通过消息生产者发送给mq</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"tx消息发送到mq完成"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/09/03/wCICw9.png" alt="开启事务，并且提交"></p><ul><li>设置事务提交为true的作用，主要是可以进行回滚操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//ok session.commit</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//error</span></span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !=session)&#123;</span><br><span class="line">                session.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-3、消息的消费者事务"><a href="#5-3-3、消息的消费者事务" class="headerlink" title="5.3.3、消息的消费者事务"></a>5.3.3、消息的消费者事务</h4><ul><li>消费者事务和生产者相同，设置为true时需要先执行send，再执行commit，否则会出现重复消费，也就是后台显示已经碰到了生产者产生的消息，但是消费者并没有消费，所以再次运行程序，同样会提示消费者消费了消息，但是实际上并没有，这样就会一直提示重复消费，但是消息却一直存在。</li></ul><h4 id="5-3-4、签收"><a href="#5-3-4、签收" class="headerlink" title="5.3.4、签收"></a>5.3.4、签收</h4><ul><li><p>分为自动签收<code>Session.AUTO_ACKNOWLEDGE</code>，手动签收<code>Session.CLIENT_ACKNOWLWDGE</code>，允许重复消息<code>Session.DUPS_OK_ACKNOWLEDGE</code></p></li><li><p>在事务性会话中，当一个事务被成功提交则消息被自动签收。如果事务回滚，则消息会被再次传送。</p></li><li><p>在非事务性绘画中，消息何时被确认取决于创建会话时的应答模式(acknowledgement mode),如果是自动，那么无需添加任何代码，手动的话必须添加<code>textMessage.acknowledge();</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer_TX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL=<span class="string">"tcp://192.168.64.128:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">"tx-message"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        Session session=connection.createSession(<span class="keyword">false</span>,Session.CLIENT_ACKNOWLEDGE);</span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建消费者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(queue);</span><br><span class="line"></span><br><span class="line">        messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> !=message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">                    TextMessage textMessage= (TextMessage) message;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"*******消费者接收到消息:"</span>+textMessage.getText());</span><br><span class="line">                        textMessage.acknowledge();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">        messageConsumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4、点对点和发布订阅总结"><a href="#5-4、点对点和发布订阅总结" class="headerlink" title="5.4、点对点和发布订阅总结"></a>5.4、点对点和发布订阅总结</h3><h4 id="5-4-1、点对点模型"><a href="#5-4-1、点对点模型" class="headerlink" title="5.4.1、点对点模型"></a>5.4.1、点对点模型</h4><ul><li>点对点模型是基于队列的，生产者发消息到队列，消费者从队列接收消息，队列的存在使得消息的异步传输成为可能。<ul><li>如果在Session关闭时有部分消息已被收到但还没有被签收（acknowledged），那当消费者下次连接到相同的队列时，这些消息还会被再次接收</li><li>队列可以长久的保存消息直到消费者收到消息，消费者不需要因为担心消息会丢失而时刻和队列保持激活的连接状态，充分体现了异步传输模式的优势。</li></ul></li></ul><h4 id="5-4-2、发布订阅模型"><a href="#5-4-2、发布订阅模型" class="headerlink" title="5.4.2、发布订阅模型"></a>5.4.2、发布订阅模型</h4><ul><li>发布订阅模型定义了如何向一个内容节点发布和订阅消息，这些节点被称为topic，主题可以被认为是消息的传输中介，发布者发布消息到主题，订阅者从主题订阅消息，主题使得消息订阅者和消息发布者保持互相独立，不需要接触即可保证消息的传送。</li></ul><h4 id="5-4-3、非持久订阅"><a href="#5-4-3、非持久订阅" class="headerlink" title="5.4.3、非持久订阅"></a>5.4.3、非持久订阅</h4><ul><li>非持久订阅只有当客户端处于激活状态，也就是和MQ保持连接状态才能收到发送到某个主题的信息。</li><li>如果消费者处于离线状态，生产者发送的主题消息将会丢失作废，消费者永远不会收到。</li><li><strong>先要订阅注册才能接收到发布，只给订阅者发布消息</strong></li></ul><h4 id="5-4-4、持久订阅"><a href="#5-4-4、持久订阅" class="headerlink" title="5.4.4、持久订阅"></a>5.4.4、持久订阅</h4><ul><li>客户端首先向MQ注册一个自己的身份ID识别号，当这个客户端处于离线时，生产者会为这个ID保存所有发送到主题的消息，当客户再次连接到MQ时会根据消费者的ID得到所有当自己处于离线时发送到主题的消息。</li><li>非持久订阅状态下，不能恢复或者重新派送一个未签收的消息。</li><li>持久订阅才能恢复或者重新派送一个未签收的消息。</li><li><strong>当所有的消息必须被接收，则用持久订阅。当丢失消息能够被容忍，则用非持久订阅</strong></li></ul><h2 id="六、Active-MQ的Broker"><a href="#六、Active-MQ的Broker" class="headerlink" title="六、Active MQ的Broker"></a>六、Active MQ的Broker</h2><ul><li>broker相当于一个ActiveMQ的实例。broker其实就是实现了用代码的形式启动Active MQ，将MQ嵌入到Java代码中，以便随时用随时启动，在用的时候再去启动，这样能节省了资源，也保证了可靠性。</li></ul><h2 id="七、Spring整合ActiveMQ"><a href="#七、Spring整合ActiveMQ" class="headerlink" title="七、Spring整合ActiveMQ"></a>七、Spring整合ActiveMQ</h2><h3 id="7-1、框架搭建"><a href="#7-1、框架搭建" class="headerlink" title="7.1、框架搭建"></a>7.1、框架搭建</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--activemq所需要的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--spring aop等相关jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--activemq对jms的支持，整合spring和activemq--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.23.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--activemq所需要的pool包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启包的自动扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sc.activemq"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--真正可以产生connection的connectionFactory，由对应的JMS服务商提供--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.64.128:61616"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--队列目的地，点对点的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destinationQueue"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-active-queue"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring提供的JMS工具类，它可以进行消息发送、接收等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destinationQueue"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2、生产者"><a href="#7-2、生产者" class="headerlink" title="7.2、生产者"></a>7.2、生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.MessageCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        SpringMQ_Producer produce = (SpringMQ_Producer) ctx.getBean(<span class="string">"springMQ_Producer"</span>);</span><br><span class="line"></span><br><span class="line">        produce.jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                TextMessage textMessage = session.createTextMessage(<span class="string">"********spring和ActiveMQ的整合例子******"</span>);</span><br><span class="line">                <span class="keyword">return</span> textMessage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"send task over**********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3、消费者"><a href="#7-3、消费者" class="headerlink" title="7.3、消费者"></a>7.3、消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        SpringMQ_Consumer consumer = (SpringMQ_Consumer) ctx.getBean(<span class="string">"springMQ_Consumer"</span>);</span><br><span class="line"></span><br><span class="line">        String retValue = (String) consumer.jmsTemplate.receiveAndConvert();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"********消费者收到的消息:"</span>+retValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4、主题"><a href="#7-4、主题" class="headerlink" title="7.4、主题"></a>7.4、主题</h3><ul><li>修改applicationContext.xml配置即可。不需要进行其他更改</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--主题--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destinationTopic"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-active-topic"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--spring提供的JMS工具类，它可以进行消息发送、接收等--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destinationTopic"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5、监听"><a href="#7-5、监听" class="headerlink" title="7.5、监听"></a>7.5、监听</h3><ul><li><p>在Spring里面实现消费者不启动，直接通过配置监听完成</p></li><li><p>applicationContext.xml</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--监听器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"destinationQueue"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyMessageListener</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.activemq.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">            TextMessage textMessage=(TextMessage)message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完成后只需要启动生产者，消费者不用启动，自动会监听记录。</li></ul><p><img data-src="https://s1.ax1x.com/2020/09/04/wFzVfK.png" alt="运行结果"></p><h2 id="八、SpringBoot整合ActiveMQ"><a href="#八、SpringBoot整合ActiveMQ" class="headerlink" title="八、SpringBoot整合ActiveMQ"></a>八、SpringBoot整合ActiveMQ</h2><h3 id="8-1、队列"><a href="#8-1、队列" class="headerlink" title="8.1、队列"></a>8.1、队列</h3><h4 id="8-1-1、队列生产者"><a href="#8-1-1、队列生产者" class="headerlink" title="8.1.1、队列生产者"></a>8.1.1、队列生产者</h4>]]></content>
      
      
      <categories>
          
          <category> AvtiveMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及服务配置Config学习</title>
      <link href="/jokerboozp.github.io/2020/07/08/2020-07-08-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8A%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEConfig%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/07/08/2020-07-08-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8A%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AEConfig%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="一、SpringCloud-Config"><a href="#一、SpringCloud-Config" class="headerlink" title="一、SpringCloud Config"></a>一、SpringCloud Config</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><h4 id="1-1-1、分布式系统的配置问题"><a href="#1-1-1、分布式系统的配置问题" class="headerlink" title="1.1.1、分布式系统的配置问题"></a>1.1.1、分布式系统的配置问题</h4><ul><li>微服务意味着要将单体应用中的业务拆分成一个个子业务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</li><li>SpringCloud提供了ConfigServer来解决这个问题。<a id="more"></a></li></ul><h4 id="1-1-2、SpringCloud-Config是什么"><a href="#1-1-2、SpringCloud-Config是什么" class="headerlink" title="1.1.2、SpringCloud Config是什么"></a>1.1.2、SpringCloud Config是什么</h4><ul><li>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</li></ul><h4 id="1-1-3、SpringCloud-Config具体"><a href="#1-1-3、SpringCloud-Config具体" class="headerlink" title="1.1.3、SpringCloud Config具体"></a>1.1.3、SpringCloud Config具体</h4><ul><li>SpringCloud Config分为服务端和客户端两部分</li><li>服务端也称为分布式配置中心，他是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</li><li>客户端则是用过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用Git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过Git客户端工具来方便的管理和访问配置内容。</li></ul><h4 id="1-1-4、SpringCloud-Config能干嘛"><a href="#1-1-4、SpringCloud-Config能干嘛" class="headerlink" title="1.1.4、SpringCloud Config能干嘛"></a>1.1.4、SpringCloud Config能干嘛</h4><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署。比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息。</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露。</li></ul><h3 id="1-2、Config服务端配置与测试"><a href="#1-2、Config服务端配置与测试" class="headerlink" title="1.2、Config服务端配置与测试"></a>1.2、Config服务端配置与测试</h3><h4 id="1-2-1、创建一个Repository"><a href="#1-2-1、创建一个Repository" class="headerlink" title="1.2.1、创建一个Repository"></a>1.2.1、创建一个Repository</h4><ul><li>名称随意，我的是springcloud-config</li><li>在仓库中新建几个yml文件。如下图<br><img data-src="https://s1.ax1x.com/2020/07/09/UmMFv6.png" alt="仓库"></li></ul><h4 id="1-2-2、新建cloud-config-center-3344模块"><a href="#1-2-2、新建cloud-config-center-3344模块" class="headerlink" title="1.2.2、新建cloud-config-center-3344模块"></a>1.2.2、新建cloud-config-center-3344模块</h4><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/Jokerboozp/springcloud-config.git</span> <span class="comment"># GitHub上的仓库链接</span></span><br><span class="line">          <span class="comment"># 搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">         <span class="comment"># 读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>主启动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>host</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1      config-3344.com</span><br></pre></td></tr></table></figure><h4 id="1-2-3、测试"><a href="#1-2-3、测试" class="headerlink" title="1.2.3、测试"></a>1.2.3、测试</h4><ul><li>启动微服务3344和eureka7001，访问<a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a>，即可看到成功访问yml文件内容。</li></ul><h3 id="1-3、Config客户端配置"><a href="#1-3、Config客户端配置" class="headerlink" title="1.3、Config客户端配置"></a>1.3、Config客户端配置</h3><h4 id="1-3-1、新建cloud-config-client-3355"><a href="#1-3-1、新建cloud-config-client-3355" class="headerlink" title="1.3.1、新建cloud-config-client-3355"></a>1.3.1、新建cloud-config-client-3355</h4><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>新建bootstrap.yml</p><ul><li>bootstrap.yml是系统级的，优先级更高；application.yml是用户级的资源配置项。</li><li>SpringCloud会创建一个“BootStrap Context”，作为Spring应用的“Application Context”的父上下文。初始化的时候，”BootStrap Context”负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的“Environment”.</li><li>“BootStrap”属性有高优先级，默认情况下，他们不会被本地配置覆盖。“BootStrap Context”和“Application Context”有着不同的约定，所以新增了一个“bootstrap.yml”文件，保证“BootStrap Context”和“Application Context”配置的分离。</li><li>所以将application.yml文件改为bootstrap.yml，因为bootstrap.yml比application.yml优先级高，优先加载。</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment"># config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment"># 分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment"># 配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment"># 读取后缀名称    上述三个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment"># 配置中心地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>主启动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;info&#125;"</span>)   <span class="comment">//此处是远程仓库的info</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/configInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://s1.ax1x.com/2020/07/10/UugveP.png" alt="info"></p><h4 id="1-3-2、错误解决"><a href="#1-3-2、错误解决" class="headerlink" title="1.3.2、错误解决"></a>1.3.2、错误解决</h4><ul><li>错误信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.</span><br><span class="line">2020-07-10 11:09:27.544 ERROR 3764 --- [  restartedMain] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;configClientController&#39;: Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder &#39;config.info&#39; in value &quot;$&#123;config.info&#125;&quot;</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1422) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">at com.sc.ConfigClientMain3355.main(ConfigClientMain3355.java:11) [classes&#x2F;:na]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]</span><br><span class="line">at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &#39;config.info&#39; in value &quot;$&#123;config.info&#125;&quot;</span><br><span class="line">at org.springframework.util.PropertyPlaceholderHelper.parseStringValue(PropertyPlaceholderHelper.java:178) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.util.PropertyPlaceholderHelper.replacePlaceholders(PropertyPlaceholderHelper.java:124) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.core.env.AbstractPropertyResolver.doResolvePlaceholders(AbstractPropertyResolver.java:236) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.core.env.AbstractPropertyResolver.resolveRequiredPlaceholders(AbstractPropertyResolver.java:210) ~[spring-core-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.context.support.PropertySourcesPlaceholderConfigurer.lambda$processProperties$0(PropertySourcesPlaceholderConfigurer.java:175) ~[spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.resolveEmbeddedValue(AbstractBeanFactory.java:908) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1228) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:116) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">... 22 common frames omitted</span><br></pre></td></tr></table></figure><ul><li>解决方法：<a href="https://blog.csdn.net/weixin_43409994/article/details/106966485" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43409994/article/details/106966485</a></li></ul><h4 id="1-3-3、测试"><a href="#1-3-3、测试" class="headerlink" title="1.3.3、测试"></a>1.3.3、测试</h4><ul><li>启动7001、3344、3355</li><li>打开<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a>和<a href="http://config-3344.com:3344/master/config-dev.yml" target="_blank" rel="noopener">http://config-3344.com:3344/master/config-dev.yml</a>。发现两者信息内容相同，则代表搭建成功。即实现了客户端3355访问Spring Cloud Config3344通过Github获取配置信息。<br><img data-src="https://s1.ax1x.com/2020/07/10/UuRp0x.png" alt="3355"><br><img data-src="https://s1.ax1x.com/2020/07/10/UuRFhD.png" alt="3344"></li></ul><h3 id="1-4、Config客户端的动态刷新"><a href="#1-4、Config客户端的动态刷新" class="headerlink" title="1.4、Config客户端的动态刷新"></a>1.4、Config客户端的动态刷新</h3><ul><li>在仓库中修改yml文件内容后，发现ConfigServer配置中心会立即响应，但是ConfigClient客户端没有任何响应。如果想让客户端有变化只有重启或者重新加载。这样对于一个微服务是不能接受的，所以就需要用到动态刷新功能。</li></ul><h4 id="1-4-1、修改3355模块"><a href="#1-4-1、修改3355模块" class="headerlink" title="1.4.1、修改3355模块"></a>1.4.1、修改3355模块</h4><ul><li>1.确保pom.xml中有如下依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.暴露监控端口，修改yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><ul><li>3.修改Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="meta">@RefreshScop</span>注解</span><br></pre></td></tr></table></figure><h4 id="1-4-2、测试"><a href="#1-4-2、测试" class="headerlink" title="1.4.2、测试"></a>1.4.2、测试</h4><ul><li>使用curl命令发送post请求。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST "http://localhost:3355/actuator/refresh"</span><br></pre></td></tr></table></figure><ul><li>刷新<a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a>后即可看到更改。</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/10/UKFR4x.png" alt="测试"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Config </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及GateWay学习</title>
      <link href="/jokerboozp.github.io/2020/07/08/2020-07-08-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AGateWay%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/07/08/2020-07-08-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AGateWay%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><img data-src="https://s1.ax1x.com/2020/07/08/UElcAs.png" alt="SpringCloud"></p><ul><li>GateWay是在Spring生态系统之上构建的API网关服务，基于Spring5、Spring Boot2和Project Reactor等技术。GateWay旨在提供一种简单有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</li><li>Spring Cloud GateWay座椅Spring CLoud生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.X非Reactor模式的老版本<a id="more"></a>。而为了提升网关的性能，Spring Cloud GateWay是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</li><li>SpringCloud GateWay的目标是提供统一的路由方式，且基于Fliter链的方式提供了网关基本的功能，例如：安全、监控/指标、限流等。</li></ul><h3 id="1-1、SpringCloud-GateWay的特性"><a href="#1-1、SpringCloud-GateWay的特性" class="headerlink" title="1.1、SpringCloud GateWay的特性"></a>1.1、SpringCloud GateWay的特性</h3><ol><li>基于Spring FrameWork 5.Project Reactor和Spring Boot 2.0进行构建。</li><li>动态路由：可以匹配任何请求属性。</li><li>可以对路由指定Predicate（断言）和Fliter（过滤器）。</li><li>集成Hystrix的断路器功能。</li><li>集成SpringCloud服务发现功能。</li><li>易于编写的Predicate（断言）和Filter（过滤器）。</li><li>请求限流功能。</li><li>支持路径重写。</li></ol><h3 id="1-2、Spring-Cloud-GateWay和Zuul的区别"><a href="#1-2、Spring-Cloud-GateWay和Zuul的区别" class="headerlink" title="1.2、Spring Cloud GateWay和Zuul的区别"></a>1.2、Spring Cloud GateWay和Zuul的区别</h3><ol><li>Zuul 1.X是一个基于阻塞I/O的API Gateway</li><li>Zuul 1.X基于Servlet 2.5使用阻塞架构。它不支持任何长连接(如webSocket)。Zuul的设计模式和Nginx较像，每次I/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第一次加载较慢的情况，使得Zuul的性能相对较差。</li><li>Zuul 2.X的理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前没有整合。Zuul2.X的性能较Zuul 1.X有较大提升。在性能方面，根据官方提供的基准测试，SpringCloud GateWay的RPS（每秒请求数）是Zuul的1.6倍。</li><li>Spring Cloud GateWay建立在Spring FrameWork5，Project Reactor和Spring Boot 2之上，使用非阻塞API。</li><li>Spring Cloud GateWay还支持webSocket，并且与Spring紧密集成拥有更好的开发体验。</li></ol><h3 id="1-3、WebFlux"><a href="#1-3、WebFlux" class="headerlink" title="1.3、WebFlux"></a>1.3、WebFlux</h3><p><img data-src="https://s1.ax1x.com/2020/07/08/UEUNND.png" alt="WebFlux"></p><ul><li><p>官方文档地址：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-new-framework</a></p></li><li><p>传统的Web框架，比如说Struts2，SpringMVC都是在ServletAPI与Servlet容器基础之上运行的。</p></li><li><p>但是，在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型的异步非阻塞的框架，它的核心是基于Reactor的相关API实现的。相对于传统的Web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程。</p></li><li><p>Spring WebFlux是Spring 5.0引入的新的响应式框架，区别于SpringMVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p></li></ul><h2 id="二、三大核心概念"><a href="#二、三大核心概念" class="headerlink" title="二、三大核心概念"></a>二、三大核心概念</h2><h3 id="2-1、Route（路由）"><a href="#2-1、Route（路由）" class="headerlink" title="2.1、Route（路由）"></a>2.1、Route（路由）</h3><ul><li>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成。如果断言为true，则匹配该路由。</li></ul><h3 id="2-2、Predicate（断言）"><a href="#2-2、Predicate（断言）" class="headerlink" title="2.2、Predicate（断言）"></a>2.2、Predicate（断言）</h3><ul><li>参考的是Java8的<code>java.util.function.Predicate</code>。开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由。</li></ul><h3 id="2-3、Filter（过滤）"><a href="#2-3、Filter（过滤）" class="headerlink" title="2.3、Filter（过滤）"></a>2.3、Filter（过滤）</h3><ul><li>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或后对请求进行更改。</li></ul><h3 id="2-4、总结"><a href="#2-4、总结" class="headerlink" title="2.4、总结"></a>2.4、总结</h3><ul><li>Web请求，通过一些匹配条件，定位到真正的服务节点，并在这个转发过程的前后，进行一些精细化控制。predicate就是我们的匹配条件。而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了。</li></ul><h2 id="三、GateWay工作流程"><a href="#三、GateWay工作流程" class="headerlink" title="三、GateWay工作流程"></a>三、GateWay工作流程</h2><p><img data-src="https://s1.ax1x.com/2020/07/08/UEdul9.png" alt="GateWay流程"></p><ul><li><p>官方文档地址：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html/</a></p></li><li><p>客户端向SpringCloud GateWay发出请求。然后在GateWay Handler Mapping中找到与请求相匹配的路由，将其发送到GateWay Web Handler。</p></li><li><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p></li><li><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（”pre”）或之后（”post”）执行业务逻辑。</p></li><li><p>Filter在”pre“类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等；在”post“类型的过滤器中可以做响应内容，响应头的修改，日志的输出，流量监控等。</p></li><li><p><strong>GateWay的核心逻辑是路由转发+执行过滤器链</strong></p></li></ul><h2 id="四、GateWay入门配置"><a href="#四、GateWay入门配置" class="headerlink" title="四、GateWay入门配置"></a>四、GateWay入门配置</h2><h3 id="4-1、新建cloud-gateway-gateway9527"><a href="#4-1、新建cloud-gateway-gateway9527" class="headerlink" title="4.1、新建cloud-gateway-gateway9527"></a>4.1、新建cloud-gateway-gateway9527</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="string">ture</span></span><br><span class="line">      <span class="attr">fetch-register:</span> <span class="string">ture</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>主启动</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayMain9527<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、9527做路由映射"><a href="#4-2、9527做路由映射" class="headerlink" title="4.2、9527做路由映射"></a>4.2、9527做路由映射</h3><ul><li>YML新增网关配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span>    <span class="comment">#路由的ID，没有固定规则，但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>    <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>     <span class="comment">#断言。路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span>   <span class="comment">#路由的ID，没有固定规则，但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>    <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=?payment/lb/**</span>     <span class="comment">#断言。路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure><ul><li>如上配置解释：如果外部想要访问<a href="http://localhost:8001/payment/get/**" target="_blank" rel="noopener">http://localhost:8001/payment/get/**</a>或<a href="http://localhost:8001/payment/lb/**" target="_blank" rel="noopener">http://localhost:8001/payment/lb/**</a>，则需要9527网关进行验证，只有符合uri和断言的配置，才会提供服务。</li></ul><h3 id="4-3、测试"><a href="#4-3、测试" class="headerlink" title="4.3、测试"></a>4.3、测试</h3><ul><li>启动7001、8001、8527。</li><li>在地址栏输入<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a>会发现也可以查询到<a href="http://localhost:8001/payment/get/1" target="_blank" rel="noopener">http://localhost:8001/payment/get/1</a>的相应信息。</li></ul><h4 id="4-3-1、具体逻辑"><a href="#4-3-1、具体逻辑" class="headerlink" title="4.3.1、具体逻辑"></a>4.3.1、具体逻辑</h4><p><img data-src="https://s1.ax1x.com/2020/07/08/UEfPde.png" alt="具体逻辑"></p><ul><li>按照网关9527的路由规则，如果通过9527可以访问到8001地址，那么就会调用断言，来进行判断，判断8001地址中是否有<code>/payment/get/**</code>的链接，如果路由上的predicates为真，那么访问<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a>就会成功，对应的信息是访问<a href="http://localhost:8001/payment/get/1" target="_blank" rel="noopener">http://localhost:8001/payment/get/1</a>的内容。</li><li>这样就不会暴露原本的服务地址，改由网关统一访问。</li></ul><h3 id="4-4、GateWay配置的第二种方法：在代码中注入RouteLocator的Bean"><a href="#4-4、GateWay配置的第二种方法：在代码中注入RouteLocator的Bean" class="headerlink" title="4.4、GateWay配置的第二种方法：在代码中注入RouteLocator的Bean"></a>4.4、GateWay配置的第二种方法：在代码中注入RouteLocator的Bean</h3><ul><li><p><strong>测试实现功能：通过9527网关访问到外网的本人博客</strong></p></li><li><p>GateWayConfig</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    配置了一个id为path_route_zp的路由规则，当访问地址http://localhost:9527/categories时会自动转发到本人博客的分类页面：https://jokerboozp.top/categories/</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">"path_route_zp"</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">"/categories"</span>)</span><br><span class="line">                        .uri(<span class="string">"https://jokerboozp.top/categories/"</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、通过微服务名实现动态路由"><a href="#五、通过微服务名实现动态路由" class="headerlink" title="五、通过微服务名实现动态路由"></a>五、通过微服务名实现动态路由</h2><ul><li><p><strong>默认情况下GateWay会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能。</strong></p></li><li><p>前提：启动7001和微服务提供者8001、8002</p></li></ul><h3 id="5-1、修改yml文件"><a href="#5-1、修改yml文件" class="headerlink" title="5.1、修改yml文件"></a>5.1、修改yml文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>    <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span>    <span class="comment">#路由的ID，没有固定规则，但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001    #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>     <span class="comment">#断言。路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span>   <span class="comment">#路由的ID，没有固定规则，但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001    #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=?payment/lb/**</span>     <span class="comment">#断言。路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure><h3 id="5-2、测试"><a href="#5-2、测试" class="headerlink" title="5.2、测试"></a>5.2、测试</h3><ul><li>修改完毕后，运行网关。在地址栏输入<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a>，并不断刷新，可以看到信息正常查询，并且端口号在进行轮询。说明动态配置路由生效。</li></ul><h2 id="六、常用的Predicate和Filter"><a href="#六、常用的Predicate和Filter" class="headerlink" title="六、常用的Predicate和Filter"></a>六、常用的Predicate和Filter</h2><ul><li>具体请查看官方文档<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.3.RELEASE/reference/html</a></li></ul><h2 id="七、自定义的全局GlobalFilter"><a href="#七、自定义的全局GlobalFilter" class="headerlink" title="七、自定义的全局GlobalFilter"></a>七、自定义的全局GlobalFilter</h2><h3 id="7-1、两个主要接口"><a href="#7-1、两个主要接口" class="headerlink" title="7.1、两个主要接口"></a>7.1、两个主要接口</h3><ul><li><code>GlobalFilter和Ordered</code></li></ul><h3 id="7-2、作用"><a href="#7-2、作用" class="headerlink" title="7.2、作用"></a>7.2、作用</h3><ul><li>全局日志记录</li><li>统一网关鉴权</li><li>。。。。。。</li></ul><h3 id="7-3、测试"><a href="#7-3、测试" class="headerlink" title="7.3、测试"></a>7.3、测试</h3><ul><li>MyLogGateWayFilter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"**********com in MyLogGateWayFilter"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">"uname"</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname==<span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"*******用户名为null，非法用户"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在地址栏中输入<a href="http://localhost:9527/payment/get/1" target="_blank" rel="noopener">http://localhost:9527/payment/get/1</a>会发现无法访问，在地址后方输入uname之后即可正常访问<a href="http://localhost:9527/payment/get/1?uname=31213" target="_blank" rel="noopener">http://localhost:9527/payment/get/1?uname=31213</a>。说明全局自定义filter生效。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> GateWay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GateWay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及Hystrix断路器学习</title>
      <link href="/jokerboozp.github.io/2020/07/05/2020-07-05-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AHystrix%E6%96%AD%E8%B7%AF%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/07/05/2020-07-05-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AHystrix%E6%96%AD%E8%B7%AF%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1、分布式系统面临的问题"><a href="#1-1、分布式系统面临的问题" class="headerlink" title="1.1、分布式系统面临的问题"></a>1.1、分布式系统面临的问题</h3><ul><li>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败。</li></ul><h3 id="1-2、服务雪崩"><a href="#1-2、服务雪崩" class="headerlink" title="1.2、服务雪崩"></a>1.2、服务雪崩</h3><ul><li>多个微服务之间调用的时候，假设微服务A调用微服务B和C，微服务B和C又调用其他的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，这就是所谓的“雪崩效应”。<a id="more"></a></li><li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序和系统。</li><li>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接受流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</li></ul><h3 id="1-3、Hystrix是什么"><a href="#1-3、Hystrix是什么" class="headerlink" title="1.3、Hystrix是什么"></a>1.3、Hystrix是什么</h3><ul><li>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免地会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</li><li>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个服务预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</li></ul><h2 id="二、Hystrix重要概念"><a href="#二、Hystrix重要概念" class="headerlink" title="二、Hystrix重要概念"></a>二、Hystrix重要概念</h2><h3 id="2-1、服务降级"><a href="#2-1、服务降级" class="headerlink" title="2.1、服务降级"></a>2.1、服务降级</h3><ul><li>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback。</li></ul><h3 id="2-2、触发服务降级的情况"><a href="#2-2、触发服务降级的情况" class="headerlink" title="2.2、触发服务降级的情况"></a>2.2、触发服务降级的情况</h3><ul><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满导致服务降级</li></ul><h3 id="2-3、服务熔断"><a href="#2-3、服务熔断" class="headerlink" title="2.3、服务熔断"></a>2.3、服务熔断</h3><ul><li>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</li></ul><p><code>服务的降级-&gt;进而熔断-&gt;回复调用链路</code></p><h3 id="2-4、服务限流"><a href="#2-4、服务限流" class="headerlink" title="2.4、服务限流"></a>2.4、服务限流</h3><ul><li>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。</li></ul><h2 id="三、Hystrix案例"><a href="#三、Hystrix案例" class="headerlink" title="三、Hystrix案例"></a>三、Hystrix案例</h2><h3 id="3-1、构建"><a href="#3-1、构建" class="headerlink" title="3.1、构建"></a>3.1、构建</h3><h4 id="3-1-1、取消Eureka集群配置"><a href="#3-1-1、取消Eureka集群配置" class="headerlink" title="3.1.1、取消Eureka集群配置"></a>3.1.1、取消Eureka集群配置</h4><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false代表不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心。职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址。查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment">#设置单机</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2、新建cloud-provider-hystrix-payment8001"><a href="#3-1-2、新建cloud-provider-hystrix-payment8001" class="headerlink" title="3.1.2、新建cloud-provider-hystrix-payment8001"></a>3.1.2、新建cloud-provider-hystrix-payment8001</h4><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>业务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">" paymentInfo_ok,id: "</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timenumber=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timenumber);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">" paymentInfo_timeout,id: "</span>+id+<span class="string">"耗时:"</span>+timenumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentService.paymentIfo_ok(id);</span><br><span class="line">        log.info(<span class="string">"***********resule:"</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String resultTimeout = paymentService.paymentInfo_timeout(id);</span><br><span class="line">        log.info(<span class="string">"**********timeout:"</span>+resultTimeout);</span><br><span class="line">        <span class="keyword">return</span> resultTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目结构</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/06/UPP7Ke.png" alt="项目结构"></p><h4 id="3-1-3、Jmeter高并发压力测试"><a href="#3-1-3、Jmeter高并发压力测试" class="headerlink" title="3.1.3、Jmeter高并发压力测试"></a>3.1.3、Jmeter高并发压力测试</h4><ul><li>利用Jmeter执行20000个并发操作访问8001的timeout链接，观察变化。</li><li>本来ok链接不需要等待，在20000个并发操作进入后，ok链接也开始进行等待。</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/06/UPMMLt.png" alt="Jmeter"><br><img data-src="https://s1.ax1x.com/2020/07/06/UPMyYF.png" alt="后台日志"></p><ul><li>原因是tomcat默认的工作线程数被打满了，没有多余的线程来分解压力的处理。所以会出现两个接口都在进行等待。如果这时外部的消费者80也来访问，那消费者只能等待，最终导致消费者80不满意，服务端8001直接被拖死。</li></ul><h5 id="80新建加入（cloud-consumer-feign-hystrix-order80）"><a href="#80新建加入（cloud-consumer-feign-hystrix-order80）" class="headerlink" title="80新建加入（cloud-consumer-feign-hystrix-order80）"></a>80新建加入（cloud-consumer-feign-hystrix-order80）</h5><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>Service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.service.PaymentHystrixService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentIfo_ok(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目结构</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/06/UPNvvT.png" alt="项目结构"></p><h5 id="进行压力测试"><a href="#进行压力测试" class="headerlink" title="进行压力测试"></a>进行压力测试</h5><ul><li><p>对8001端口的timeout链接进行压力测试，访问消费端，会发现消费端开始卡顿，甚至会出现超时报错页面</p></li><li><p>8001同一层次的其他接口被困死，因为tomcat线程池里面的工作线程已经被挤占完毕。80此时调用8001，客户端响应就会变得很慢，甚至超时异常报错。</p></li><li><p><strong>正因为由上述故障或不佳表现，才有了降级、容错、限流等技术的诞生</strong></p></li></ul><h2 id="三、解决上述错误"><a href="#三、解决上述错误" class="headerlink" title="三、解决上述错误"></a>三、解决上述错误</h2><h3 id="3-1、解决的要求"><a href="#3-1、解决的要求" class="headerlink" title="3.1、解决的要求"></a>3.1、解决的要求</h3><ul><li>超时导致服务器变慢（转圈）——&gt;超时不再等待</li><li>出错（宕机或程序运行出错）——-&gt;出错要有兜底</li></ul><h3 id="3-2、解决目标"><a href="#3-2、解决目标" class="headerlink" title="3.2、解决目标"></a>3.2、解决目标</h3><ul><li>对方服务（8001）超时了，调用者（80）不能一直卡死等待，必须有服务降级。</li><li>对方服务（8001）宕机了，调用者（80）不能一直卡死等待，必须有服务降级。</li><li>对方服务（8001）ok，调用者（80）自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级。</li></ul><h2 id="四、服务降级"><a href="#四、服务降级" class="headerlink" title="四、服务降级"></a>四、服务降级</h2><h3 id="4-1、降级配置"><a href="#4-1、降级配置" class="headerlink" title="4.1、降级配置"></a>4.1、降级配置</h3><ul><li>使用注解<code>@HystrixCommand</code></li></ul><h3 id="4-2、8001fallback（支付侧）"><a href="#4-2、8001fallback（支付侧）" class="headerlink" title="4.2、8001fallback（支付侧）"></a>4.2、8001fallback（支付侧）</h3><ul><li>设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作降级服务的fallback。</li></ul><h4 id="4-2-1、业务类添加HystrixCommand"><a href="#4-2-1、业务类添加HystrixCommand" class="headerlink" title="4.2.1、业务类添加HystrixCommand"></a>4.2.1、业务类添加<code>HystrixCommand</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">" paymentInfo_ok,id: "</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_timeoutHandler"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value = <span class="string">"3000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timenumber=<span class="number">5</span>;</span><br><span class="line">        <span class="comment">//int age=10/0;</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timenumber);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">" paymentInfo_timeout,id: "</span>+id+<span class="string">"耗时:"</span>+timenumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">" paymentInfo_timeoutHandler,id: "</span>+id+<span class="string">"已超时，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2、主启动类添加注解-EnableCircuitBreaker"><a href="#4-2-2、主启动类添加注解-EnableCircuitBreaker" class="headerlink" title="4.2.2、主启动类添加注解@EnableCircuitBreaker"></a>4.2.2、主启动类添加注解<code>@EnableCircuitBreaker</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3、测试结果及结论"><a href="#4-2-3、测试结果及结论" class="headerlink" title="4.2.3、测试结果及结论"></a>4.2.3、测试结果及结论</h4><ul><li>运行7001和8001后，访问<a href="http://localhost:8001/payment/hystrix/timeout/1" target="_blank" rel="noopener">http://localhost:8001/payment/hystrix/timeout/1</a>链接会发现程序后台报错，前台显示Hystrix的提示页面。</li><li>只要当前服务不可用，作服务降级，兜底的方案都是<code>paymentInfo_timeoutHandler</code>。不管是超时还是其他异常，都会触发降级操作。</li><li>项目结构<br><img data-src="https://s1.ax1x.com/2020/07/07/UF05AU.png" alt="项目结构"></li></ul><h3 id="4-3、80fallback（订单侧）"><a href="#4-3、80fallback（订单侧）" class="headerlink" title="4.3、80fallback（订单侧）"></a>4.3、80fallback（订单侧）</h3><h4 id="4-3-1、修改application-yml"><a href="#4-3-1、修改application-yml" class="headerlink" title="4.3.1、修改application.yml"></a>4.3.1、修改application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2、主启动类添加-EnableHystrix注解"><a href="#4-3-2、主启动类添加-EnableHystrix注解" class="headerlink" title="4.3.2、主启动类添加@EnableHystrix注解"></a>4.3.2、主启动类添加<code>@EnableHystrix</code>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3、修改Controller"><a href="#4-3-3、修改Controller" class="headerlink" title="4.3.3、修改Controller"></a>4.3.3、修改Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.PaymentHystrixService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentIfo_ok(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymenttimeoutFallBackMethod"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value = <span class="string">"1500"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymenttimeoutFallBackMethod</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是消费者80，对方支付系统繁忙，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4、测试结果"><a href="#4-3-4、测试结果" class="headerlink" title="4.3.4、测试结果"></a>4.3.4、测试结果</h4><p><img data-src="https://s1.ax1x.com/2020/07/07/UFoIpR.png" alt="项目结构"></p><h3 id="4-4、全局服务降级"><a href="#4-4、全局服务降级" class="headerlink" title="4.4、全局服务降级"></a>4.4、全局服务降级</h3><ul><li><strong>现在每一个业务方法都对应一个兜底的方法，导致代码膨胀。所以我们可以创建一个统一的兜底方法，如果需要自定义，那么就在对应的业务方法上添加一个自定义的兜底方法即可。</strong></li></ul><h4 id="4-4-1、解决每个方法配置一个兜底方法导致代码膨胀的问题"><a href="#4-4-1、解决每个方法配置一个兜底方法导致代码膨胀的问题" class="headerlink" title="4.4.1、解决每个方法配置一个兜底方法导致代码膨胀的问题"></a>4.4.1、解决每个方法配置一个兜底方法导致代码膨胀的问题</h4><ul><li><p><code>@DefaultProperties(defaultFallback=&quot;&quot;)</code>注解</p></li><li><p>除了个别重要核心业务有专属，其他普通的可以通过<code>@DefaultProperties(defaultFallback=&quot;&quot;)</code>统一跳转到统一处理结果页面。通用的和独享的各自分开，避免了代码膨胀，合理减少了代码量。</p></li><li><p>Controller</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.PaymentHystrixService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"payment_Global_Fallbackmethod"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentIfo_ok(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="comment">/*@HystrixCommand(fallbackMethod = "paymenttimeoutFallBackMethod",commandProperties = &#123;</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")</span></span><br><span class="line"><span class="comment">    &#125;)*/</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_timeout(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymenttimeoutFallBackMethod</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是消费者80，对方支付系统繁忙，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_Fallbackmethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"全局降级服务生效，请稍后再试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2、解决和业务逻辑混在一起导致混乱的问题"><a href="#4-4-2、解决和业务逻辑混在一起导致混乱的问题" class="headerlink" title="4.4.2、解决和业务逻辑混在一起导致混乱的问题"></a>4.4.2、解决和业务逻辑混在一起导致混乱的问题</h4><ul><li>新建PaymentFallbackService实现Hystrix接口PaymentHystrixService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-------PaymentFallbackService fall back-paymentIfo_ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"-------PaymentFallbackService fall back-paymentInfo_timeout"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改Hystrix接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>,fallback = PaymentFallbackService<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentIfo_ok</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/hystrix/timeout/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_timeout</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><ul><li>打开7001、8001、80服务，访问<a href="http://localhost/consumer/payment/hystrix/ok/1" target="_blank" rel="noopener">http://localhost/consumer/payment/hystrix/ok/1</a>，会发现服务访问正常。</li><li>这时关闭8001，重新访问链接，会发现已经触发了服务降级。</li></ul></li></ul><p><img data-src="https://s1.ax1x.com/2020/07/07/Uk1qr4.png" alt="测试结果"></p><ul><li>关闭8001后，此服务端provider已经宕机了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器。</li></ul><h2 id="五、服务熔断"><a href="#五、服务熔断" class="headerlink" title="五、服务熔断"></a>五、服务熔断</h2><h3 id="5-1、熔断机制"><a href="#5-1、熔断机制" class="headerlink" title="5.1、熔断机制"></a>5.1、熔断机制</h3><ul><li>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。</li><li>当检测到该节点微服务调用响应正常后，恢复调用链路。</li><li>在SpringCloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。</li><li>熔断机制的注解是<code>@HystrixCommand</code>。</li><li>关于熔断机制的详情可以看<a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/CircuitBreaker.html</a>。</li></ul><h3 id="5-2、项目整合熔断机制"><a href="#5-2、项目整合熔断机制" class="headerlink" title="5.2、项目整合熔断机制"></a>5.2、项目整合熔断机制</h3><h4 id="5-2-1、修改cloud-provider-hystrix-payment8001"><a href="#5-2-1、修改cloud-provider-hystrix-payment8001" class="headerlink" title="5.2.1、修改cloud-provider-hystrix-payment8001"></a>5.2.1、修改cloud-provider-hystrix-payment8001</h4><ul><li>PaymentService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    服务熔断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentCircuitBreaker_fallback"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>,value = <span class="string">"ture"</span>),<span class="comment">//是否开启断路器</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),<span class="comment">//请求次数</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"1000"</span>),<span class="comment">//时间窗口期</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>),<span class="comment">//失败率达到多少后跳闸</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"*************id不能为负数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">"\t"</span>+<span class="string">"调用成功，流水号："</span>+serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"id 不能为负数，请稍后再试，id："</span>+id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>PaymentController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   服务熔断</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/payment/circuit/&#123;id&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">       String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">       log.info(<span class="string">"*********result:"</span>+result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2、测试"><a href="#5-2-2、测试" class="headerlink" title="5.2.2、测试"></a>5.2.2、测试</h4><ul><li>正常情况下，访问<a href="http://localhost:8001/payment/circuit/-1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/-1</a>会进行服务降级。</li><li>但是当在一段时间内疯狂访问<a href="http://localhost:8001/payment/circuit/-1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/-1</a>后，错误率急剧上升，符合了之前在注解中配置的熔断触发标准，就会触发熔断。这时候访问<a href="http://localhost:8001/payment/circuit/1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/1</a>发现也发生了服务降级。</li></ul><h3 id="5-3、总结"><a href="#5-3、总结" class="headerlink" title="5.3、总结"></a>5.3、总结</h3><p><img data-src="https://s1.ax1x.com/2020/07/07/Uktha4.png" alt="熔断"></p><ol><li>熔断打开：请求不再进行调用当前服务，内部设置始终一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</li></ol><h4 id="5-3-1、断路器在什么情况下开始起作用"><a href="#5-3-1、断路器在什么情况下开始起作用" class="headerlink" title="5.3.1、断路器在什么情况下开始起作用"></a>5.3.1、断路器在什么情况下开始起作用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentCircuitBreaker_fallback"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>,value = <span class="string">"ture"</span>),<span class="comment">//是否开启断路器</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),<span class="comment">//请求次数</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"1000"</span>),<span class="comment">//时间窗口期</span></span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>),<span class="comment">//失败率达到多少后跳闸</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>涉及到三个重要参数：快照时间窗，请求总数阈值，错误百分比阈值</li></ul><ol><li>快照时间窗：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认统计最近的10秒</li><li>请求总数阈值：在快照时间窗内，必须满足请求总数阈值才有资格熔断。默认为20，意味着在10秒内，如果该Hystrix命令的调用次数不足20次，即使所有的请求都超时或者因其他原因失败，断路器都不会打开。</li><li>错误百分比阈值：当请求总数在快照时间窗内超过了阈值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误比，在默认设定50%阈值的情况下，这时候就会将断路器打开。</li></ol><h4 id="5-3-2、断路器开启或者关闭的条件"><a href="#5-3-2、断路器开启或者关闭的条件" class="headerlink" title="5.3.2、断路器开启或者关闭的条件"></a>5.3.2、断路器开启或者关闭的条件</h4><ul><li>当满足一定的阈值的时候（默认十秒内超过20个请求次数）</li><li>当失败率达到一定的阈值的时候（默认十秒内超过50%的请求失败）</li><li>达到以上阈值，断路器会开启</li><li>当开启的时候，所有请求都不会进行转发</li><li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复第四步和第五步。</li></ul><h4 id="5-3-3、断路器打开之后对请求的响应。"><a href="#5-3-3、断路器打开之后对请求的响应。" class="headerlink" title="5.3.3、断路器打开之后对请求的响应。"></a>5.3.3、断路器打开之后对请求的响应。</h4><ul><li>断路器打开后，再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动的发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</li></ul><h4 id="5-3-4、原来的主逻辑要如何恢复。"><a href="#5-3-4、原来的主逻辑要如何恢复。" class="headerlink" title="5.3.4、原来的主逻辑要如何恢复。"></a>5.3.4、原来的主逻辑要如何恢复。</h4><ul><li>当断路器打开，对主逻辑进行熔断后，Hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的主逻辑。当休眠时间窗到期，断路器进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复；如果此次请求依然有问题，断路器继续进入打开状态，休眠时间窗会重新计时。</li></ul><h4 id="5-3-5、Hystrix工作流程"><a href="#5-3-5、Hystrix工作流程" class="headerlink" title="5.3.5、Hystrix工作流程"></a>5.3.5、Hystrix工作流程</h4><p><img data-src="https://s1.ax1x.com/2020/07/07/Uk4vGR.png" alt="Hystrix工作流程"></p><h2 id="六、HystrixDashBoard图形化界面"><a href="#六、HystrixDashBoard图形化界面" class="headerlink" title="六、HystrixDashBoard图形化界面"></a>六、HystrixDashBoard图形化界面</h2><h3 id="6-1、概述"><a href="#6-1、概述" class="headerlink" title="6.1、概述"></a>6.1、概述</h3><ul><li>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix DashBoard），Hystrix会持续的记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。</li></ul><h3 id="6-2、创建仪表盘9001"><a href="#6-2、创建仪表盘9001" class="headerlink" title="6.2、创建仪表盘9001"></a>6.2、创建仪表盘9001</h3><h4 id="6-2-1、新建cloud-consumer-hystrix-dashboard9001"><a href="#6-2-1、新建cloud-consumer-hystrix-dashboard9001" class="headerlink" title="6.2.1、新建cloud-consumer-hystrix-dashboard9001"></a>6.2.1、新建cloud-consumer-hystrix-dashboard9001</h4><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><ul><li>主启动(添加一个新注解<code>@EnableHystrixDashboard</code>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashBoardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashBoardMain9001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>所有微服务提供类都需要监控依赖配置</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动9001后在浏览器地址栏输入<a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a>即可看到效果</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/07/UkbBTK.png" alt="HystrixDashBoard"></p><h3 id="6-3、修改hystrix8001，使9001展示结果"><a href="#6-3、修改hystrix8001，使9001展示结果" class="headerlink" title="6.3、修改hystrix8001，使9001展示结果"></a>6.3、修改hystrix8001，使9001展示结果</h3><ul><li>主启动类添加如下代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">     *ServletRegistrationBean因为springboot的默认路径不是"/hystrix.stream"，</span></span><br><span class="line"><span class="comment">     *只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>确保pom文件中有actuator依赖</li></ul><h3 id="6-4、测试"><a href="#6-4、测试" class="headerlink" title="6.4、测试"></a>6.4、测试</h3><ul><li>输入<a href="http://localhost:8001/payment/circuit/1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/1</a>、<a href="http://localhost:8001/payment/circuit/-1" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/-1</a>进行程序测试，无误后，输入<a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a>,输入如下图，并点击按钮。</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/07/UkOmSe.png" alt="测试"></p><ul><li>不断访问如上两个链接，会发现曲线一直在变化。数值代表的意义界面英文相对应，可自行查看。</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/07/UkOaOs.png" alt="monitor变化"></p><h2 id="七、完毕"><a href="#七、完毕" class="headerlink" title="七、完毕"></a>七、完毕</h2><p>Hystrix学习完毕。奥里给！</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Hystrix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及OpenFeign学习</title>
      <link href="/jokerboozp.github.io/2020/06/29/2020-06-29-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AOpenFeign%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/06/29/2020-06-29-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AOpenFeign%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1、OpenFeign是什么"><a href="#1-1、OpenFeign是什么" class="headerlink" title="1.1、OpenFeign是什么"></a>1.1、OpenFeign是什么</h3><ul><li>Feign是一个声明式WebService客户端。使用Feign能让编写WebService客户端更加简单。</li><li>他的使用方法是定义一个服务接口然后在上面添加注解。Feign也支持可插拔式的编码器和解码器。SpringCloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。<a id="more"></a></li></ul><h3 id="1-2、Feign能干什么"><a href="#1-2、Feign能干什么" class="headerlink" title="1.2、Feign能干什么"></a>1.2、Feign能干什么</h3><ul><li>Feign旨在使编写Java Http客户端变得更容易。</li><li>前面在使用Ribbon+RestTemplate是，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置他（以前是Dao接口上面标注了Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可），即可完成对服务提供方的接口绑定，简化了使用SpringCloud Ribbon时，自动封装服务调用客户端的开发量。</li><li>Feign集成了Ribbon。利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h2 id="二、OpenFeign使用步骤"><a href="#二、OpenFeign使用步骤" class="headerlink" title="二、OpenFeign使用步骤"></a>二、OpenFeign使用步骤</h2><h3 id="2-1、接口-注解"><a href="#2-1、接口-注解" class="headerlink" title="2.1、接口+注解"></a>2.1、接口+注解</h3><p><code>微服务调用接口+@FeignClient</code></p><h3 id="2-2、新建cloud-consumer-feign-order80-Feign是用在消费端"><a href="#2-2、新建cloud-consumer-feign-order80-Feign是用在消费端" class="headerlink" title="2.2、新建cloud-consumer-feign-order80(Feign是用在消费端)"></a>2.2、新建cloud-consumer-feign-order80(Feign是用在消费端)</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> feign.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.PaymentFeignService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img data-src="https://s1.ax1x.com/2020/07/05/USw4Zd.png" alt="项目结构"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li>输入<a href="http://localhost/consumer/payment/get/1" target="_blank" rel="noopener">http://localhost/consumer/payment/get/1</a>进行测试。</li></ul><h2 id="三、OpenFeign超时控制"><a href="#三、OpenFeign超时控制" class="headerlink" title="三、OpenFeign超时控制"></a>三、OpenFeign超时控制</h2><h3 id="3-1、为什么会出现超时"><a href="#3-1、为什么会出现超时" class="headerlink" title="3.1、为什么会出现超时"></a>3.1、为什么会出现超时</h3><ul><li>消费侧去调用服务侧的接口，如果对于服务侧，完成某个业务逻辑需要三秒钟，那么对于服务的提供方来说，这是正常的；但是对于消费侧来说，他等不了三秒钟，消费侧只愿意等两秒钟。这样就会造成服务侧提供者处理完业务后是正常的，但是消费侧只给了两秒钟，这种情况下就会产生时间差。就会导致超时调用报错。</li><li>简单来说就是：默认Feign客户端只等待一秒钟，但是服务端处理需要超过一秒钟，导致Feign客户端不想等待了，直接返回报错。</li><li>为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。</li></ul><h3 id="3-2、设置超时来进行错误展示"><a href="#3-2、设置超时来进行错误展示" class="headerlink" title="3.2、设置超时来进行错误展示"></a>3.2、设置超时来进行错误展示</h3><h4 id="3-2-1、服务提供方8001故意写暂停程序"><a href="#3-2-1、服务提供方8001故意写暂停程序" class="headerlink" title="3.2.1、服务提供方8001故意写暂停程序"></a>3.2.1、服务提供方8001故意写暂停程序</h4><ul><li>PaymentController（payment8001）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/payment/feign/timeout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置暂停三秒钟</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serverPort;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>PaymentFeignService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/payment/feign/timeout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>OrderFeignController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/feign/timeout"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//openfeign-ribbon,客户端一般默认等待1秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.paymentFeignTimeOut();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>项目结构</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/05/US4EIf.png" alt="项目结构"></p><ul><li>测试结果</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/05/US4JiT.png" alt="测试结果"></p><h4 id="3-2-2、yml文件里开启Open-Feign客户端超时控制"><a href="#3-2-2、yml文件里开启Open-Feign客户端超时控制" class="headerlink" title="3.2.2、yml文件里开启Open Feign客户端超时控制"></a>3.2.2、yml文件里开启Open Feign客户端超时控制</h4><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h3 id="3-3、OpenFeign日志打印功能"><a href="#3-3、OpenFeign日志打印功能" class="headerlink" title="3.3、OpenFeign日志打印功能"></a>3.3、OpenFeign日志打印功能</h3><ul><li>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中Http请求的细节。说白了就是对Feign接口的调用情况进行监控和输出。</li></ul><h4 id="3-3-1、日志级别"><a href="#3-3-1、日志级别" class="headerlink" title="3.3.1、日志级别"></a>3.3.1、日志级别</h4><ol><li>NONE: 默认的，不显示任何日志</li><li>BASIC: 仅记录请求方法、URL、响应状态码及执行时间</li><li>HEADERS: 除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据。</li></ol><h4 id="3-3-2、配置日志bean，设置需要开启日志的Feign客户端"><a href="#3-3-2、配置日志bean，设置需要开启日志的Feign客户端" class="headerlink" title="3.3.2、配置日志bean，设置需要开启日志的Feign客户端"></a>3.3.2、配置日志bean，设置需要开启日志的Feign客户端</h4><ul><li>FeignConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span> </span><br><span class="line">    <span class="comment">#feign日志以什么级别监控哪一个接口</span></span><br><span class="line">    <span class="attr">com.sc.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><ul><li>测试结果</li></ul><p><img data-src="https://s1.ax1x.com/2020/07/05/USHpz8.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> OpenFeign </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenFeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及Ribbon学习</title>
      <link href="/jokerboozp.github.io/2020/06/28/2020-06-28-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8ARibbon%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/06/28/2020-06-28-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8ARibbon%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h2><ul><li><p><strong>首先启动前面搭建的Eureka集群</strong><br><img data-src="https://s1.ax1x.com/2020/06/28/NgBOSA.png" alt="集群测试"></p><a id="more"></a><h3 id="1、Ribbon是什么？"><a href="#1、Ribbon是什么？" class="headerlink" title="1、Ribbon是什么？"></a>1、Ribbon是什么？</h3></li><li><p>Spring Cloud Ribbon是基于Neflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong>。</p></li><li><p>简单的来说，Ribbon是Netflix发布的开源项目，主要功能是提供客户端的负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单地说，就是在配置文件中列出Load Balance（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询、随即连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p></li></ul><h3 id="2、负载均衡是什么？Ribbon本地端负载均衡和Nginx服务端负载均衡有什么区别？"><a href="#2、负载均衡是什么？Ribbon本地端负载均衡和Nginx服务端负载均衡有什么区别？" class="headerlink" title="2、负载均衡是什么？Ribbon本地端负载均衡和Nginx服务端负载均衡有什么区别？"></a>2、负载均衡是什么？Ribbon本地端负载均衡和Nginx服务端负载均衡有什么区别？</h3><h4 id="2-1、简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的高可用。"><a href="#2-1、简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的高可用。" class="headerlink" title="2.1、简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的高可用。"></a>2.1、简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的高可用。</h4><h4 id="2-2、Nginx是服务器负载均衡（集中式LB），客户端所有请求都会交给Nginx，然后由Nginx实现请求转发。即负载均衡是由服务端实现的。"><a href="#2-2、Nginx是服务器负载均衡（集中式LB），客户端所有请求都会交给Nginx，然后由Nginx实现请求转发。即负载均衡是由服务端实现的。" class="headerlink" title="2.2、Nginx是服务器负载均衡（集中式LB），客户端所有请求都会交给Nginx，然后由Nginx实现请求转发。即负载均衡是由服务端实现的。"></a>2.2、Nginx是服务器负载均衡（集中式LB），客户端所有请求都会交给Nginx，然后由Nginx实现请求转发。即负载均衡是由服务端实现的。</h4><ul><li>集中式LB：即在服务的消费方和提供方之间使用独立的LB设施（可以是硬件也可以是软件），由该设施负责把访问请求通过某种策略转发至服务的提供方。<h4 id="2-3、Ribbon本地负载均衡（进程内LB），在调用微服务接口的时候，会在注册中心上获取注册信息列表，之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。"><a href="#2-3、Ribbon本地负载均衡（进程内LB），在调用微服务接口的时候，会在注册中心上获取注册信息列表，之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。" class="headerlink" title="2.3、Ribbon本地负载均衡（进程内LB），在调用微服务接口的时候，会在注册中心上获取注册信息列表，之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。"></a>2.3、Ribbon本地负载均衡（进程内LB），在调用微服务接口的时候，会在注册中心上获取注册信息列表，之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</h4></li><li>进程内LB：将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于进程内LB，他只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。<h4 id="2-4、一句话来说：Ribbon就是负载均衡-RestTemplate调用"><a href="#2-4、一句话来说：Ribbon就是负载均衡-RestTemplate调用" class="headerlink" title="2.4、一句话来说：Ribbon就是负载均衡+RestTemplate调用"></a>2.4、<strong>一句话来说：Ribbon就是负载均衡+RestTemplate调用</strong></h4></li></ul><h3 id="3、Ribbon的负载均衡和RestTemplate"><a href="#3、Ribbon的负载均衡和RestTemplate" class="headerlink" title="3、Ribbon的负载均衡和RestTemplate"></a>3、Ribbon的负载均衡和RestTemplate</h3><p><img data-src="https://s1.ax1x.com/2020/06/28/Ng262D.png" alt="Ribbon"></p><h4 id="3-1、Ribbon在工作时分成两步："><a href="#3-1、Ribbon在工作时分成两步：" class="headerlink" title="3.1、Ribbon在工作时分成两步："></a>3.1、Ribbon在工作时分成两步：</h4><ul><li>第一步先选择EurekaServer，它优先选择在同一个区域内负载较少的server</li><li>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。<br>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</li></ul><h3 id="4、Ribbon核心组件IRule"><a href="#4、Ribbon核心组件IRule" class="headerlink" title="4、Ribbon核心组件IRule"></a>4、Ribbon核心组件IRule</h3><h4 id="4-1、IRule：根据特定算法从服务列表中选取一个要访问的服务。"><a href="#4-1、IRule：根据特定算法从服务列表中选取一个要访问的服务。" class="headerlink" title="4.1、IRule：根据特定算法从服务列表中选取一个要访问的服务。"></a>4.1、IRule：根据特定算法从服务列表中选取一个要访问的服务。</h4><p><img data-src="https://s1.ax1x.com/2020/06/28/Ng20V1.png" alt="IRule算法"></p><h3 id="5、Ribbon负载均衡规则替换"><a href="#5、Ribbon负载均衡规则替换" class="headerlink" title="5、Ribbon负载均衡规则替换"></a>5、Ribbon负载均衡规则替换</h3><h4 id="5-1、修改cloud-consumer-order80"><a href="#5-1、修改cloud-consumer-order80" class="headerlink" title="5.1、修改cloud-consumer-order80"></a>5.1、修改cloud-consumer-order80</h4><ul><li>Ribbon官方文档给出了警告，负载均衡替换的自定义配置类不能放在@ComponentScan所扫描的当前包以及子包下。否则自定义的配置类就会被所有Ribbon客户端所共享，达不到特殊化定制的目的了。</li><li>在主启动类中有@SpringBootApplication注解，点开其源码会发现其自带@ComponentScan注解，也就代表不能在启动类所在的包中新建负载均衡的自定义配置类，否则会被所有访问此服务的Ribbon客户端共享。<br><img data-src="https://s1.ax1x.com/2020/06/29/NW1FG6.png" alt="@SpringBootApplication"></li></ul><h4 id="5-2、项目修改内容"><a href="#5-2、项目修改内容" class="headerlink" title="5.2、项目修改内容"></a>5.2、项目修改内容</h4><ul><li><p>项目结构<br><img data-src="https://s1.ax1x.com/2020/06/29/NW8a80.png" alt="修改后结构"></p></li><li><p>MySelfRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OrderMain80</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ysc.MySelfRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>,configuration = MySelfRule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改完毕后，在地址<code>http://localhost/consumer/payment/get/1</code>即可看到效果，访问端口号的规则已从默认的轮询更改为随机。</p></li></ul><h4 id="5-3、默认负载轮询算法的原理"><a href="#5-3、默认负载轮询算法的原理" class="headerlink" title="5.3、默认负载轮询算法的原理"></a>5.3、默认负载轮询算法的原理</h4><ul><li>具体公式：<code>rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标</code>，<strong>每次服务重启后rest接口计数从1开始</strong>。</li><li>举例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances &#x3D; discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">List[0] instances&#x3D;127.0.0.1:8002</span><br><span class="line">List[1] instances&#x3D;127.0.0.1:8001</span><br><span class="line"></span><br><span class="line">8001+8002组成集群，总计两台机器。集群总数为2，按照轮询算法原理：</span><br><span class="line"></span><br><span class="line">当请求总数为1时：1%2&#x3D;1，对应下标位置为1，则获得服务地址为127.0.0.1:8001</span><br><span class="line">当请求总数为2时：2%2&#x3D;0，对应下标位置为0，则获得服务地址为127.0.0.1:8002</span><br><span class="line">当请求总数为3时：3%2&#x3D;1，对应下标位置为1，则获得服务地址为127.0.0.1:8001</span><br><span class="line">以此类推。。。。。。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Ribbon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及Consul学习</title>
      <link href="/jokerboozp.github.io/2020/06/27/2020-06-27-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AConsul%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/06/27/2020-06-27-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AConsul%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="注册中心学习之Consul"><a href="#注册中心学习之Consul" class="headerlink" title="注册中心学习之Consul"></a>注册中心学习之Consul</h2><h3 id="1、什么是Consul？"><a href="#1、什么是Consul？" class="headerlink" title="1、什么是Consul？"></a>1、什么是Consul？</h3><ul><li>Consul是一套开源的分布式服务发现和配置管理系统，由HashiCorp公司用Go语言开发。</li><li>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网络，总之Consul提供了一种完整的服务网格解决方案。<a id="more"></a></li><li>他具有很多优点。包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议；支持跨数据中心的WAN集群；提供图形界面；跨平台，支持Linux，Mac，Windows。</li></ul><h3 id="2、安装并运行Consul"><a href="#2、安装并运行Consul" class="headerlink" title="2、安装并运行Consul"></a>2、安装并运行Consul</h3><ul><li>在官网下载解压Consul即可。</li><li>运行命令<code>consul agent -dev</code>，运行后打开浏览器，输入<code>localhost:8500</code>即可看到运行后效果。<br><img data-src="https://s1.ax1x.com/2020/06/28/NcOKXt.png" alt="consul运行结果"></li></ul><h3 id="3、创建服务提供者"><a href="#3、创建服务提供者" class="headerlink" title="3、创建服务提供者"></a>3、创建服务提供者</h3><ul><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-providerconsul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="comment">#consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>PaymentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/payment/consul"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentconsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SpringCloud With Consul:"</span>+serverPort+<span class="string">"\t"</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img data-src="https://s1.ax1x.com/2020/06/28/NcxVbt.png" alt="consul测试结果1"><br><img data-src="https://s1.ax1x.com/2020/06/28/NcxmUf.png" alt="consul测试结果2"></p></li></ul><h3 id="4、创建服务消费者"><a href="#4、创建服务消费者" class="headerlink" title="4、创建服务消费者"></a>4、创建服务消费者</h3><ul><li><p>创建过程和Zookeeper大体相同，具体配置换成Consul即可，这里不再展示。有兴趣可去代码仓库中获取。</p></li><li><p>测试结果<br><img data-src="https://s1.ax1x.com/2020/06/28/NgSUc4.png" alt="consul消费者测试"><br><img data-src="https://s1.ax1x.com/2020/06/28/NgCJ4P.png" alt="消费者浏览器端测试"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Consul </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及Zookeeper学习</title>
      <link href="/jokerboozp.github.io/2020/06/26/2020-06-26-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AZookeeper%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/06/26/2020-06-26-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AZookeeper%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="注册中心学习之Zookeeper"><a href="#注册中心学习之Zookeeper" class="headerlink" title="注册中心学习之Zookeeper"></a>注册中心学习之Zookeeper</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>请自行安装CentOS7虚拟机，并在上安装Zookeeper，保证在虚拟机中可以ping通实体机的IP，并且zookeeper可以正常启动。并且关闭Centos防火墙。<br><img data-src="https://s1.ax1x.com/2020/06/27/N6PvRO.png" alt="本机和虚拟机IP地址互通"><a id="more"></a><br><img data-src="https://s1.ax1x.com/2020/06/27/N6kXiq.png" alt="本机和虚拟机IP地址互通"><br><img data-src="https://s1.ax1x.com/2020/06/27/N6iPeA.png" alt="zookeeper启动"></li></ul><h3 id="1、创建服务提供者模块"><a href="#1、创建服务提供者模块" class="headerlink" title="1、创建服务提供者模块"></a>1、创建服务提供者模块</h3><ul><li><p>1.1、具体步骤和Eureka相同，这里不再赘述。不同的地方如下所示。</p></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.23</span><span class="number">.128</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SpringCloud With Zookeeper:"</span>+serverPort+<span class="string">"\t"</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1.2、完成后启动主启动类。之后在centos中连接zookeeper客户端，查看是否注册成功。在Windows本机中测试是否可以正常访问。<br><img data-src="https://s1.ax1x.com/2020/06/27/N6ZFoj.png" alt="zookeeper测试"><br><img data-src="https://s1.ax1x.com/2020/06/27/N6ZdmD.png" alt="Windows本机测试"></p></li><li><p>1.3、zookeeper的服务节点是临时节点，如果长时间不回应，会把相应的节点干掉。不像Eureka一样，会开启自我保护机制。</p></li></ul><h3 id="2、创建服务消费者模块"><a href="#2、创建服务消费者模块" class="headerlink" title="2、创建服务消费者模块"></a>2、创建服务消费者模块</h3><ul><li><p>2.1 具体步骤同上，不再赘述，相关更改见下方。</p></li><li><p>ApplicationContextConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OrderZKController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL=<span class="string">"http://cloud-provider-payment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">"/payment/zk"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.23</span><span class="number">.128</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li><li><p>2.2、测试结果。<br><img data-src="https://s1.ax1x.com/2020/06/27/N6Qa8J.png" alt="Centos测试"><br><img data-src="https://s1.ax1x.com/2020/06/27/N6QwvR.png" alt="Windows测试1"><br><img data-src="https://s1.ax1x.com/2020/06/27/N6QDDx.png" alt="Windows测试2"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础及Eureka学习</title>
      <link href="/jokerboozp.github.io/2020/06/22/2020-06-22-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AEureka%E5%AD%A6%E4%B9%A0/"/>
      <url>/jokerboozp.github.io/2020/06/22/2020-06-22-SpringCloud%E5%9F%BA%E7%A1%80%E5%8F%8AEureka%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有代码所在仓库"><a href="#所有代码所在仓库" class="headerlink" title="所有代码所在仓库"></a>所有代码所在仓库</h2><p><a href="https://github.com/Jokerboozp/springcloudTest.git" target="_blank" rel="noopener">https://github.com/Jokerboozp/springcloudTest.git</a></p><h2 id="SpringCloud学习版本要求"><a href="#SpringCloud学习版本要求" class="headerlink" title="SpringCloud学习版本要求"></a>SpringCloud学习版本要求</h2><ol><li>SpringCloud版本：Hoxton.SR1</li><li>SpringBoot版本：2.2.2.RELEASE</li><li>SpringCloud Alibaba版本：2.1.0.RELEASE</li><li>Java版本：Java8</li><li>Maven版本：3.5及以上</li><li>MySql版本：5.7及以上</li></ol><h2 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h2><p><img data-src="https://s1.ax1x.com/2020/06/22/N8oqOJ.png" alt="学习内容"><a id="more"></a></p><h2 id="一、父工程project创建"><a href="#一、父工程project创建" class="headerlink" title="一、父工程project创建"></a>一、父工程project创建</h2><ul><li>1、new project<br><img data-src="https://s1.ax1x.com/2020/06/23/NNGJvF.png" alt="新建项目"></li><li>2、聚合总父工程名字</li><li>3、Maven选版本</li><li>4、工程名字</li><li>5、字符编码<br><img data-src="https://s1.ax1x.com/2020/06/23/NN8j1O.png" alt="字符编码"></li><li>6、注解生效激活<br><img data-src="https://s1.ax1x.com/2020/06/23/NNGzGV.png" alt="注解生效激活"></li><li>7、Java编译版本选8<br><img data-src="https://s1.ax1x.com/2020/06/23/NNJZPx.png" alt="Java编译版本选择"></li></ul><h2 id="二、父工程pom文件优化"><a href="#二、父工程pom文件优化" class="headerlink" title="二、父工程pom文件优化"></a>二、父工程pom文件优化</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--统一管理jar包版本--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven中的DependencyManagement和Dependencies有什么区别？"><a href="#Maven中的DependencyManagement和Dependencies有什么区别？" class="headerlink" title="Maven中的DependencyManagement和Dependencies有什么区别？"></a>Maven中的DependencyManagement和Dependencies有什么区别？</h3><ul><li>Maven使用DependencyManagement元素来提供了一种管理依赖版本号的方式。通常会在一个组织或者项目的最顶层的父pom中看到DependencyManagement元素。使用DependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。Maven会沿着父子层次向上走，直到找到一个拥有DependencyManagement元素的项目，然后他就会使用这个DependencyManagement元素中指定的版本号。如果有多个子项目都引用 同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或者切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version即可。</li><li><strong>DependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显式的声明需要用的依赖。</strong></li><li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom。</li><li>如果子项目中指定了版本号，那么就会使用子项目中指定的jar版本。</li></ul><h3 id="Maven中跳过单元测试"><a href="#Maven中跳过单元测试" class="headerlink" title="Maven中跳过单元测试"></a>Maven中跳过单元测试</h3><ul><li>点击红框选中的按钮即可在maven生命周期中跳过单元测试。<br><img data-src="https://s1.ax1x.com/2020/06/23/NNByFg.png" alt="跳过单元测试"></li></ul><h3 id="父工程创建完执行mvn-install将父工程发布到仓库方便子工程继承。"><a href="#父工程创建完执行mvn-install将父工程发布到仓库方便子工程继承。" class="headerlink" title="父工程创建完执行mvn:install将父工程发布到仓库方便子工程继承。"></a>父工程创建完执行mvn:install将父工程发布到仓库方便子工程继承。</h3><p><img data-src="https://s1.ax1x.com/2020/06/23/NNDipd.png" alt="发布父工程"></p><h2 id="三、Rest微服务工程构建"><a href="#三、Rest微服务工程构建" class="headerlink" title="三、Rest微服务工程构建"></a>三、Rest微服务工程构建</h2><h3 id="3-1：创建微服务提供者支付Module模块"><a href="#3-1：创建微服务提供者支付Module模块" class="headerlink" title="3.1：创建微服务提供者支付Module模块"></a>3.1：创建微服务提供者支付Module模块</h3><ul><li><strong>建module、改pom、写yml、主启动、业务类</strong></li></ul><h4 id="1、建module"><a href="#1、建module" class="headerlink" title="1、建module"></a>1、建module</h4><p><img data-src="https://s1.ax1x.com/2020/06/23/NNsCQA.png" alt="建module"></p><h4 id="2、改pom"><a href="#2、改pom" class="headerlink" title="2、改pom"></a>2、改pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、写yml"><a href="#3、写yml" class="headerlink" title="3、写yml"></a>3、写yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sc.entity</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><h4 id="4、主启动"><a href="#4、主启动" class="headerlink" title="4、主启动"></a>4、主启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、业务类（简单的例子）"><a href="#5、业务类（简单的例子）" class="headerlink" title="5、业务类（简单的例子）"></a>5、业务类（简单的例子）</h4><ul><li><p>sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table payment(</span><br><span class="line">    id bigint(20) not null auto_increment comment &#39;ID&#39;,</span><br><span class="line">    serial varchar(200) default &#39;&#39;,</span><br><span class="line">    primary key (id)</span><br><span class="line">)engine &#x3D;InnoDB auto_increment&#x3D;1 default char set &#x3D;utf8</span><br></pre></td></tr></table></figure></li><li><p>entity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Payment</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CommentResult</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sc.mapper.PaymentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span> <span class="attr">parameterType</span>=<span class="string">"Payment"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into payment(serial)  values(#&#123;serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.sc.entity.Payment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"serial"</span> <span class="attr">property</span>=<span class="string">"serial"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPaymentById"</span> <span class="attr">parameterType</span>=<span class="string">"Long"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>service</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PaymentService</span></span><br><span class="line"><span class="keyword">package</span> com.sc.servie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//PaymentServiceImpl</span></span><br><span class="line"><span class="keyword">package</span> com.sc.servie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.PaymentMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentMapper paymentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentMapper.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> com.sc.servie.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">"*******插入结果"</span>+result);</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"插入数据库成功"</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">"插入数据库失败"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">"**********查询结果"</span>+payment);</span><br><span class="line">        <span class="keyword">if</span> (payment!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"查询数据成功"</span>,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">"查询数据失败"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img data-src="https://s1.ax1x.com/2020/06/24/NduaBn.png" alt="测试结果"></p></li></ul><h3 id="3-2：创建微服务消费者"><a href="#3-2：创建微服务消费者" class="headerlink" title="3.2：创建微服务消费者"></a>3.2：创建微服务消费者</h3><h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><ul><li>RestTemplate提供了多种便捷访问远程Http服务的方法</li><li>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集。</li><li>官网：<a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html</a></li><li>配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="消费者创建"><a href="#消费者创建" class="headerlink" title="消费者创建"></a>消费者创建</h4><ul><li><p>entity层和提供者一样</p></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL=<span class="string">"http://localhost:8001"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">"/payment/create"</span>,payment,CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">"/payment/get/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>测试结果<br><img data-src="https://s1.ax1x.com/2020/06/24/Ndt3lt.png" alt="消费者测试结果"></p></li><li><p>项目结构<br><img data-src="https://s1.ax1x.com/2020/06/24/NdtGOf.png" alt="项目结构"></p></li><li><p><strong>注意，此时需要在提供者controller的create方法的入参写上@RequestBody方法，否则从消费者侧无法添加数据到数据库</strong></p></li></ul><h3 id="3-3：工程重构"><a href="#3-3：工程重构" class="headerlink" title="3.3：工程重构"></a>3.3：工程重构</h3><ul><li><strong>系统中现在有重复部分，所以进行重构</strong></li></ul><h4 id="1、创建公共api模块"><a href="#1、创建公共api模块" class="headerlink" title="1、创建公共api模块"></a>1、创建公共api模块</h4><ul><li>pom.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud20220<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2、创建公共实体类，并删除两个微服务的实体类"><a href="#2、创建公共实体类，并删除两个微服务的实体类" class="headerlink" title="2、创建公共实体类，并删除两个微服务的实体类"></a>2、创建公共实体类，并删除两个微服务的实体类</h4><h4 id="3、利用maven进行clean和install公共api"><a href="#3、利用maven进行clean和install公共api" class="headerlink" title="3、利用maven进行clean和install公共api"></a>3、利用maven进行clean和install公共api</h4><h4 id="4、在两个微服务的pom文件中引入公共api的依赖"><a href="#4、在两个微服务的pom文件中引入公共api的依赖" class="headerlink" title="4、在两个微服务的pom文件中引入公共api的依赖"></a>4、在两个微服务的pom文件中引入公共api的依赖</h4><h4 id="5、项目结构"><a href="#5、项目结构" class="headerlink" title="5、项目结构"></a>5、项目结构</h4><p><img data-src="https://s1.ax1x.com/2020/06/25/N0lwqg.png" alt="项目结构"></p><h2 id="四、服务注册中心学习（Eureka、Zookeeper、Consul、Nacos）"><a href="#四、服务注册中心学习（Eureka、Zookeeper、Consul、Nacos）" class="headerlink" title="四、服务注册中心学习（Eureka、Zookeeper、Consul、Nacos）"></a>四、服务注册中心学习（Eureka、Zookeeper、Consul、Nacos）</h2><h3 id="1、Eureka学习"><a href="#1、Eureka学习" class="headerlink" title="1、Eureka学习"></a>1、Eureka学习</h3><h4 id="1-1：Eureka系统架构"><a href="#1-1：Eureka系统架构" class="headerlink" title="1.1：Eureka系统架构"></a>1.1：Eureka系统架构</h4><p><img data-src="https://s1.ax1x.com/2020/06/25/N0UyFS.png" alt="Eureka系统架构图"></p><h4 id="1-2：什么是服务治理"><a href="#1-2：什么是服务治理" class="headerlink" title="1.2：什么是服务治理"></a>1.2：什么是服务治理</h4><ul><li>SpringCloud封装了Netflix公司开发的Eureka模块来实现服务治理。在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册。</li></ul><h4 id="1-3：什么是服务注册与发现"><a href="#1-3：什么是服务注册与发现" class="headerlink" title="1.3：什么是服务注册与发现"></a>1.3：什么是服务注册与发现</h4><ul><li>Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，他是服务注册中心，而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接，这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常。</li><li>在服务注册与发现中，有一个注册中心，当服务器启动的时候，会把当前自己服务器的信息，比如服务地址、通讯地址等以别名的方式注册当注册中心上。另一方（消费者|服务提供者），以该别名的方式去注册中心上获取到实际的服务通讯地址，然后在实现本地RPC调用</li><li>RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何RPC远程框架中，都会有一个注册中心。存放服务地址（接口地址）相关信息。</li></ul><h4 id="1-4：Eureka的两个组件"><a href="#1-4：Eureka的两个组件" class="headerlink" title="1.4：Eureka的两个组件"></a>1.4：Eureka的两个组件</h4><ul><li>Eureka包含两个组件:Eureka Server和Eureka Client<ul><li>Eureka Server提供服务注册服务：各个微服务节点通过配置启动后，会在Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</li><li>Eureka Client通过注册中心进行访问：是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）。</li></ul></li></ul><p><img data-src="https://s1.ax1x.com/2020/06/25/NBVDk6.png" alt="Eureka工作流程"></p><h4 id="1-5：单机Eureka构架步骤"><a href="#1-5：单机Eureka构架步骤" class="headerlink" title="1.5：单机Eureka构架步骤"></a>1.5：单机Eureka构架步骤</h4><ul><li><p><strong>1.5.1：主要构建步骤和上面相同，yml文件如下。主启动类要加上@EnableEurekaServer注解来声明当前模块是服务中心。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false代表不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心。职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址。查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>运行后结果<br><img data-src="https://s1.ax1x.com/2020/06/25/N0JpB8.png" alt="Eureka结果"></p></li><li><p><strong>1.5.2：Eureka Client端cloud-provider-payment8001将注册进EurekaServer成为服务提供者。</strong></p><ul><li>更改pom文件，添加EurekaClient依赖。主启动添加@EnableEurekaClient注解，yml配置文件添加EurekaClient配置</li></ul></li><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      spring-cloud-starter-netflix-eureka-client</span><br><span class="line">   <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer，默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>运行结果<br><img data-src="https://s1.ax1x.com/2020/06/25/N0tFln.png" alt="cloud-provider-payment8001"></p></li><li><p><strong>1.5.3：EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer。</strong></p><ul><li>pom、yml、主启动文件修改同上，直接添加即可</li></ul></li><li><p>运行结果<br><img data-src="https://s1.ax1x.com/2020/06/25/N0N5Pe.png" alt="cloud-consumer-order80"></p></li></ul><h4 id="1-6：Eureka集群搭建"><a href="#1-6：Eureka集群搭建" class="headerlink" title="1.6：Eureka集群搭建"></a>1.6：Eureka集群搭建</h4><ul><li><p>1.6.1：创建cloud-erueka-server7002,和创建7001步骤相同，这里不再赘述。</p></li><li><p>1.6.2：更改本机host文件，添加如下两个host配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1      eureka7001.com</span><br><span class="line">127.0.0.1      eureka7002.com</span><br></pre></td></tr></table></figure></li><li><p>更改7001和7001的yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">7001:</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false代表不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心。职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址。查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line"><span class="string">**********************************************************</span></span><br><span class="line"><span class="string">**********************************************************</span></span><br><span class="line"><span class="attr">7002:</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false代表不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心。职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址。查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>启动测试。在<code>eureka7001.com:7001</code>中可以看到<code>eureka7002.com</code>，之后在<code>eureka7002.com:7002</code>中可以看到<code>eureka7001.com</code>则代表建立成功。</p></li></ul><p><img data-src="https://s1.ax1x.com/2020/06/25/NBneNq.png" alt="eureka7001"><br><img data-src="https://s1.ax1x.com/2020/06/25/NBnMgU.png" alt="eureka7002"></p><h4 id="1-7：将80和8001两个订单支付微服务注册金Eureka集群"><a href="#1-7：将80和8001两个订单支付微服务注册金Eureka集群" class="headerlink" title="1.7：将80和8001两个订单支付微服务注册金Eureka集群"></a>1.7：将80和8001两个订单支付微服务注册金Eureka集群</h4><ul><li>1.7.1：更改8001和80的yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><ul><li>1.7.2：启动测试</li></ul><p>先启动7001，再启动7002，然后是8001，最后启动80。测试结果如下。</p><p><img data-src="https://s1.ax1x.com/2020/06/26/NDLXuD.png" alt="项目结构"><br><img data-src="https://s1.ax1x.com/2020/06/26/NDLjDe.png" alt="Eureka7001"><br><img data-src="https://s1.ax1x.com/2020/06/26/NDLvHH.png" alt="Eureka7002"><br><img data-src="https://s1.ax1x.com/2020/06/26/NDLzEd.png" alt="postman测试"></p><h4 id="1-8：支付服务提供者8001集群环境搭建"><a href="#1-8：支付服务提供者8001集群环境搭建" class="headerlink" title="1.8：支付服务提供者8001集群环境搭建"></a>1.8：支付服务提供者8001集群环境搭建</h4><ul><li>1.8.1：创建cloud-provider-payment8002，具体步骤和8001创建步骤相同。</li><li>1.8.2：修改8001和8002的controller，修改地方相同。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> com.sc.servie.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(@RequestBody Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">"*******插入结果"</span>+result);</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"插入数据库成功,serverPort:"</span>+serverPort,result);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">"插入数据库失败"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">"**********查询结果"</span>+payment);</span><br><span class="line">        <span class="keyword">if</span> (payment!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">"查询数据成功,serverPort:"</span>+serverPort,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">"查询数据失败"</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1.8.3：运行测试。<br><img data-src="https://s1.ax1x.com/2020/06/26/NDXYy8.png" alt="Eureka7001"><br><img data-src="https://s1.ax1x.com/2020/06/26/NDj8AJ.png" alt="8002端口"><br><img data-src="https://s1.ax1x.com/2020/06/26/NDXqmD.png" alt="80端口"></li></ul><h4 id="1-9：为订单支付微服务集群添加负载均衡"><a href="#1-9：为订单支付微服务集群添加负载均衡" class="headerlink" title="1.9：为订单支付微服务集群添加负载均衡"></a>1.9：为订单支付微服务集群添加负载均衡</h4><ul><li><p>在上方的集群测试中，会发现80端口每次都是访问8001端口，并不会进行更改。所以需要配置负载均衡来减轻同一个服务器端口的压力。</p></li><li><p>更改支付微服务的controller和ApplicationContextConfig即可</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OrderController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public static final String PAYMENT_URL="http://localhost:8001";</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL=<span class="string">"http://CLOUD-PAYMENT-SERVICE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">"/payment/create"</span>,payment,CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">"/payment/get/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ApplicationContextConfig</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span><span class="comment">//使用@LoadBalanced注解赋予了RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>更改完毕以后即可看到负载均衡效果。</li></ul><h4 id="1-10：actuator微服务信息完善"><a href="#1-10：actuator微服务信息完善" class="headerlink" title="1.10：actuator微服务信息完善"></a>1.10：actuator微服务信息完善</h4><ul><li><p>1.10.1：服务名称修改</p><ul><li>在8001和8002的yml文件中添加如下配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>1.10.2：访问信息有ip信息提示</p><ul><li>在yml文件中添加如下配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prefer-ip-address:</span> <span class="literal">true</span>   <span class="comment">#访问路径可以显示ip地址</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>1.10.3：最终效果<br>鼠标放在链接处，即可在左下角看到对用的IP地址<br><img data-src="https://s1.ax1x.com/2020/06/26/NrpdTU.png" alt="最终效果"></p></li></ul><h4 id="1-11：服务发现Discovery。"><a href="#1-11：服务发现Discovery。" class="headerlink" title="1.11：服务发现Discovery。"></a>1.11：服务发现Discovery。</h4><p>对于注册进Eureka里面的微服务，可以通过服务发现来获得该服务的信息。</p><ul><li>1.11.1：修改8001、8002的controller和主启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"> <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/discovery"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element:services)&#123;</span><br><span class="line">            log.info(<span class="string">"**********element:"</span>+element);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"CLOUD-PAYMENT-SERVICE"</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance serviceInstance:instances)&#123;</span><br><span class="line">            log.info(serviceInstance.getServiceId()+<span class="string">"\t"</span>+serviceInstance.getHost()+<span class="string">"/t"</span>+serviceInstance.getPort()+<span class="string">"/t"</span>+serviceInstance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主启动类</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure><ul><li>1.11.2：测试结果<br><img data-src="https://s1.ax1x.com/2020/06/26/NrPUmt.png" alt="测试结果"><br><img data-src="https://s1.ax1x.com/2020/06/26/Nri8EV.png" alt="控制台输出日志"></li></ul><h4 id="1-12：Eureka自我保护"><a href="#1-12：Eureka自我保护" class="headerlink" title="1.12：Eureka自我保护"></a>1.12：Eureka自我保护</h4><ul><li><p><strong>1.12.1</strong>：保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护，一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何服务。如果在Eureka Server首页看到以下这段提示，则说明Eureka进入了保护模式。<br><img data-src="https://s1.ax1x.com/2020/06/26/NrizV0.png" alt="Eureka保护机制提示图"></p></li><li><p><strong>1.12.2</strong>：也就是说某个时刻某一个服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p></li><li><p><strong>1.12.3</strong>：为什么会产生Eureka自我保护机制？</p><ul><li>为了防止EurekaClient可以正常运行，但是与EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除。</li></ul></li><li><p><strong>1.12.4</strong>：什么是自我保护模式？</p><ul><li>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生（延时、卡顿、拥挤）时，微服务与EurekaServer之间无法正常通信，以上行为可能就变得非常危险了，因为服务本身是健康的，<strong>此时本不应该注销这个服务</strong>。Eureka通过“自我保护模式”来解决这个问题：当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</li><li>在自我保护模式中，EurekaServer会保护服务注册表中的信息，不再注销任何服务实例。</li></ul></li></ul><h4 id="1-13：Eureka已经停更，所以不再使用Eureka进行分布式构建。仅学习其思想即可。"><a href="#1-13：Eureka已经停更，所以不再使用Eureka进行分布式构建。仅学习其思想即可。" class="headerlink" title="1.13：Eureka已经停更，所以不再使用Eureka进行分布式构建。仅学习其思想即可。"></a>1.13：Eureka已经停更，所以不再使用Eureka进行分布式构建。仅学习其思想即可。</h4>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> Eureka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo学习</title>
      <link href="/jokerboozp.github.io/2020/03/13/2020-03-13-Dubbo/"/>
      <url>/jokerboozp.github.io/2020/03/13/2020-03-13-Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="架构生命周期"><a href="#架构生命周期" class="headerlink" title="架构生命周期"></a>架构生命周期</h1><p><img data-src="https://s2.ax1x.com/2020/03/10/8Pl9GF.png" alt="8Pl9GF.png"></p><h2 id="第一时期"><a href="#第一时期" class="headerlink" title="第一时期"></a>第一时期</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><p>all in one：所有的模块和代码都放在一起，技术也不分层<a id="more"></a></p><p><strong>问题</strong></p><ol><li>代码不具备可维护性</li><li>容错性差（因为所有代码都写在JSP页面中，当用户访问或某些原因发生异常时：用户会直接看到异常信息，某些情况下，该错误会直接导致服务器宕机）</li></ol><h2 id="第一时期后阶段"><a href="#第一时期后阶段" class="headerlink" title="第一时期后阶段"></a>第一时期后阶段</h2><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>分层开发（提高维护性）</li><li>MVC架构：MVC是一个基于Java WEB应用的设计模式</li><li>服务器分离部署</li></ol><p>特点：</p><ol><li>MVC分层开发（提高了可维护性、解决了容错性问题）</li><li>数据库和项目分离部署</li></ol><p>问题：<br>随着用户访问量持续增加，单台应用服务器已无法满足需求<br><strong>解决方案</strong><br>集群</p><h3 id="会出现如下问题"><a href="#会出现如下问题" class="headerlink" title="会出现如下问题"></a>会出现如下问题</h3><p>在互联网项目下，因单个tomcat默认并发量有限制，如果需求量过大，就会产生如下问题：<br><strong>高并发</strong><br>是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指通过设计保证系统能够同时并行处理很多请求。<br>高并发相关常用的一些指标有响应时间、吞吐量、每秒查询率QPS、并发用户数等<br>响应时间：系统对请求做出响应的时间。例如系统处理一个HTTP请求需要200ms，这个200ms就是系统的响应时间<br>吞吐量：单位时间内处理的请求数量<br>QPS：每秒响应请求数，在互联网领域，这个指标和吞吐量区分的没有那么明显<br>并发用户数：同时承载正常使用系统功能的用户数量</p><p><strong>高可用</strong><br>通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>高性能</strong><br>是指服务响应时间快，（CPU/处理器/内存）特别是在高并发下响应时间不会急剧增加</p><h3 id="提高系统的并发能力"><a href="#提高系统的并发能力" class="headerlink" title="提高系统的并发能力"></a>提高系统的并发能力</h3><p>提高系统并发能力大的方式，主要有两种：垂直扩展（Scale Up）和水平扩展（Scale Out）</p><p>垂直扩展：提升单机处理能力，垂直扩展的方式有两种：<br>（1）增强单机硬件性能，例如：增加CPU核数，升级更好的网卡，升级更好的硬盘，扩充硬盘容量，扩充系统内存<br>（2）提升单机架构性能：例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间</p><p>水平扩展：只要增加服务器数量，就能线性扩充系统性能，水平扩展对系统架构设计是有要求的，难点在于如何在架构各层进行可水平扩展的设计</p><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><p>集群：同一个业务，部署在多个服务器上<br><img data-src="https://s2.ax1x.com/2020/03/11/8kAtUg.md.png" alt="8kAtUg.md.png"></p><p>特点：<br>支持高并发，支持高可用<br><strong>问题</strong></p><ol><li>集群用户的请求应该往哪里转发</li><li>Session如何共享</li></ol><p><strong>解决</strong><br>转发请求使用Nginx反向代理和负载均衡<br><img data-src="https://s2.ax1x.com/2020/03/11/8kEDWd.png" alt="8kEDWd.png"><br>session共享使用Redis Cluster集群<br><img data-src="https://s2.ax1x.com/2020/03/11/8kVmpd.png" alt="8kVmpd.png"></p><h2 id="出现的新问题"><a href="#出现的新问题" class="headerlink" title="出现的新问题"></a>出现的新问题</h2><p>数据库的压力变大。我们通过nginx+tomcat集群方案支持高并发（应用的性能进行提升访问），但是数据库的负载能力慢慢增加。<br>所以怎么降低数据库层面的访问压力？<br><strong>解决方案</strong><br>读写分离（主从复制）<br><img data-src="https://s2.ax1x.com/2020/03/11/8kZ3K1.png" alt="8kZ3K1.png"><br>特点：<br>主从数据库之间进行数据同步：master主要负责增删改操作，slave负责查询（读）操作<br>MySQL本身就支持master-slave的功能（主从复制）</p><h2 id="使用搜索引擎环节数据库访问压力-能力"><a href="#使用搜索引擎环节数据库访问压力-能力" class="headerlink" title="使用搜索引擎环节数据库访问压力+能力"></a>使用搜索引擎环节数据库访问压力+能力</h2><p>数据库本身对大数据量查询效率慢，对模糊查询支持不是很优秀。（所以即使做了读写分离，和诺功能也不能有效解决）。针对该问题，有必要引入全文检索服务器功能。</p><p><strong>目前市场上主流的搜索引擎技术</strong><br>Solr ElasticSearch<br><img data-src="https://s2.ax1x.com/2020/03/11/8kmKXR.png" alt="8kmKXR.png"></p><h2 id="引入缓存机制"><a href="#引入缓存机制" class="headerlink" title="引入缓存机制"></a>引入缓存机制</h2><p>随着访问量的持续增加，数据库的访问压力会持续增大，甚至无法满足需求。虽然做了主从复制，对于热点数据，如果每个都从数据库中查询的话，数据库会无法应对，甚至无法对外提供服务</p><p><strong>最佳解决方案：Redis</strong></p><ol><li>读写性能非常好</li><li>提供了丰富的数据类型</li><li>原子性</li></ol><p><img data-src="https://s2.ax1x.com/2020/03/11/8knGbq.png" alt="8knGbq.png"></p><h2 id="对数据库的表进行水平-垂直拆分"><a href="#对数据库的表进行水平-垂直拆分" class="headerlink" title="对数据库的表进行水平/垂直拆分"></a>对数据库的表进行水平/垂直拆分</h2><p>一张表里面有1000条数据，查询的性能很高；如果有100万数据，查询的性能很慢<br>单个表性能做提升。（能力终归还是有限的）<br><strong>表为主</strong><br><strong>垂直</strong>：<br>假设一张表里面有30个字段（id，姓名，身份证号，身高，性别，体重，手机号。。。。。。）<br>热数据/冷数据<br>user(id，姓名，身份证号，性别，手机号)<br>user_info(id，身高，体重。。。)<br><strong>水平</strong>：<br>按照需求进行拆分<br><strong>分库分表</strong><br>采用第三方数据库中间件：mycat、sharding-jdbc、drds（阿里）<br><a href="https://blog.csdn.net/jornada_/article/details/82947677" target="_blank" rel="noopener">https://blog.csdn.net/jornada_/article/details/82947677</a><br><img data-src="https://img-blog.csdn.net/20181005223747851?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvcm5hZGFf/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""><br><img data-src="https://s2.ax1x.com/2020/03/11/8kMGqA.png" alt="8kMGqA.png"></p><h2 id="当前设计特点"><a href="#当前设计特点" class="headerlink" title="当前设计特点"></a>当前设计特点</h2><p>通过设计保证高并发，高可用（不断地对服务器进行扩容）<br>当前很多公司用的这种架构<br><img data-src="https://s2.ax1x.com/2020/03/11/8kMIsJ.png" alt="8kMIsJ.png"></p><p><strong>问题</strong></p><ol><li>服务器价钱（忙闲不均问题）【服务器的维护、人工成本】</li><li>可维护性差</li><li>可扩展性差</li><li>协同开发不方便（大家都去修改相同业务代码，易发生代码冲突/错误问题）</li><li>单体架构（随着业务需求不断增加，应用代码会变得越来越多）。导致服务器部署时占用的硬盘也大</li></ol><h2 id="第二时期"><a href="#第二时期" class="headerlink" title="第二时期"></a>第二时期</h2><p><strong>垂直应用架构</strong><br>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><strong>水平拆分（横着拆）</strong></p><p>按照层来拆分<br>将一个大的应用拆分成多个小应用。<br>（entity、mapper、service、controller）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">parent pom <span class="comment">//父工程（放所有的pom.xml）</span></span><br><span class="line">common.jar <span class="comment">//公共库（相关工具类）</span></span><br><span class="line">entity.jar <span class="comment">//java bean</span></span><br><span class="line">mapper.jar <span class="comment">//数据持久层</span></span><br><span class="line">service.jar <span class="comment">//业务逻辑层</span></span><br><span class="line">web.war <span class="comment">//web访问层</span></span><br></pre></td></tr></table></figure><p>maven分层</p><p><strong>垂直拆分（竖着拆）</strong></p><p>按照功能拆分<br>将一个大的应用按照功能拆分成多个互不相干的小应用，每个应用都是一个独立的web应用程序=====&gt;分布式<br><img data-src="https://s2.ax1x.com/2020/03/11/8kYCjK.png" alt="8kYCjK.png"></p><p><strong>解决问题</strong></p><ol><li>维护性（如果发生需求变更，只需要更改某个应用模块即可）</li><li>功能扩展（随着业务的不断增加，只需要创建新的web程序即可）</li><li>协同开发（不同团队修改不同的代码）</li><li>部署内容大小（性能扩展），如果哪台访问量大，只需要对该服务多部署几台即可</li></ol><p>此时，用于加速前端页面开发的web框架（MVC）是关键</p><p><strong>问题</strong></p><ol><li>客户对页面的需求会越来越高。频繁修改页面需要重新部署后台应用程序，每一个应用从头到尾都是完整的。</li><li>随着需求不断增加，需要很多互不相干的应用部署。这些应用之间一定会需要业务交互。</li></ol><h2 id="第三时期"><a href="#第三时期" class="headerlink" title="第三时期"></a>第三时期</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p><strong>分布式服务架构</strong><br>分布式：将一个业务拆分成多个子业务，部署在不同的服务器上。</p><p><strong>问题</strong></p><p><strong>1.客户对页面的需求会越来越高。频繁修改页面需要重新部署后台应用程序，每一个应用从头到尾都是完整的。如何快速的响应多变的市场需求？</strong><br>答：页面+业务代码（前后端分离开发/部署）<br><img data-src="https://s2.ax1x.com/2020/03/11/8kUtCd.png" alt="8kUtCd.png"></p><p><strong>2.随着需求不断增加，需要很多互不相干的应用部署。这些应用之间一定会需要业务交互。如何进行交互？</strong><br><img data-src="https://s2.ax1x.com/2020/03/11/8karsx.png" alt="8karsx.png"><br><strong>分析</strong>：<br>以前如果统一在一台服务器上，模块之间通过依赖jar完成调用<br>现在是在不同的服务器上做的部署（分布式），服务和服务之间通过进程调用</p><p><strong>解决方法</strong>：RPC</p><h2 id="架构的改变一定会带来一些新的技术和新的问题"><a href="#架构的改变一定会带来一些新的技术和新的问题" class="headerlink" title="架构的改变一定会带来一些新的技术和新的问题"></a>架构的改变一定会带来一些新的技术和新的问题</h2><p>问题：分布式事务、分布式锁、分布式session、分布式日志</p><h2 id="RPC带来的问题"><a href="#RPC带来的问题" class="headerlink" title="RPC带来的问题"></a>RPC带来的问题</h2><ol><li>当服务越来越多，服务和服务之间的调用非常的混乱</li><li>当服务器越来越多，容量的评估，小服务资源浪费等问题逐渐显现</li></ol><h2 id="第四时期"><a href="#第四时期" class="headerlink" title="第四时期"></a>第四时期</h2><p><strong>流动计算架构</strong><br>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><p><strong>SOA（面向服务的架构）</strong><br>服务治理中间件：Dubbo、SpringCloud<br>基于访问压力实时管理集群容量，提高集群利用率</p><p><img data-src="https://s2.ax1x.com/2020/03/11/8kDTIK.png" alt="8kDTIK.png"><br>Dubbo底层用的是RPC协议（Dubbo是一个RPC框架），SpringCloud底层用的是HTTP协议</p><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h4 id="1-dubbo是什么"><a href="#1-dubbo是什么" class="headerlink" title="1.dubbo是什么"></a>1.dubbo是什么</h4><p>dubbo（开源分布式服务框架）。是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可以通过高性能的RPC实现服务的输入和输出功能，可以和Spring框架无缝集成。</p><p><strong>RPC主要解决的问题</strong></p><ol><li>解决分布式系统中，服务之间的调用问题</li><li>远程调用时，需要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑</li></ol><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架（RPC）是关键</p><h5 id="Zookeeper注册中心"><a href="#Zookeeper注册中心" class="headerlink" title="Zookeeper注册中心"></a>Zookeeper注册中心</h5><p><strong>安装Zookeeper</strong><br>安装环境必须是JDK1.6版本以上。</p><p><strong>1.zookeeper目录解压</strong></p><p><img data-src="https://s2.ax1x.com/2020/03/11/8k2EyF.png" alt="8k2EyF.png"></p><ul><li>bin目录<ul><li>zookeeper的可执行脚本目录，包括zookeeper服务进程，zookeeper客户端等脚本</li><li>其中.sh是Linux环境下的脚本，.cmd是Windows环境下的脚本</li></ul></li><li>conf目录<ul><li>配置文件目录，zoo_sample.cfg为样例配置文件，需要修改为自己的名称</li><li>一般为zoo.cfg。log4j.properties为日志配置文件</li></ul></li><li>lib<ul><li>zookeeper依赖的包</li></ul></li><li>contrib目录<ul><li>一些用于操作zookeeper的工具包</li></ul></li><li>recipes目录<ul><li>zookeeper某些用法的代码示例</li></ul></li></ul><p><strong>2.Zookeeper修改配置文件</strong></p><p><img data-src="https://s2.ax1x.com/2020/03/11/8k2mw9.png" alt="8k2mw9.png"><br>将conf下的zoo_simple.cfg复制一份改名为zoo.cfg即可</p><p><strong>1.tickTime</strong></p><ul><li>时长单位为毫秒，为zookeeper使用的基本时间度量单位。例如，<code>1*tickTime</code>是客户端与zookeeper服务端的心跳时间。<code>2*tickTime</code>是客户端会话的超时时间。</li><li>tickTime的默认值为2000毫秒，更低的tickTime值可以更快的发现超时问题，但也会导致更高的网络流量（心跳消息）和更高的CPU使用率（会话的跟踪处理）</li></ul><p><strong>2.clientPort</strong></p><ul><li>zook服务进程坚挺的TCP端口，默认情况下，服务端会监听2181端口</li></ul><p><strong>3.dataDir（默认是Linux目录结构）</strong></p><ul><li>无默认配置，必须配置，用于配置存储快照文件的目录。如果没有配置dataLogDir，那么事务日志也会存储在此目录。</li></ul><p><strong>安装Dubbo Monitor</strong></p><ul><li>GitHub下载master分支下的Dubbo Admin版本。</li><li>解压后利用maven打包Dubbo Admin</li><li>运行zookeeper server</li><li>运行Dubbo Admin打包后的jar包（<code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code>）</li><li>打开localhost:7001，输入用户名和密码即可进入Dubbo</li></ul><h4 id="简单Demo创建"><a href="#简单Demo创建" class="headerlink" title="简单Demo创建"></a>简单Demo创建</h4><p><strong>需求功能：会议查询时，需要调用用户服务获取某个用户的联系方式。通过会议编号查询会议详细信息，同时还要查询出来是哪一位用户发布的会议</strong></p><p><strong>模块：会议管理模块（会议发布），用户服务模块（查询用户信息）</strong></p><p><strong>项目结构</strong><br><img data-src="https://s1.ax1x.com/2020/03/12/8ZFTmt.png" alt="8ZFTmt.png"></p><ul><li>1.用户服务模块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String telphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserService</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserServiceImpl</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"joker"</span>);</span><br><span class="line">        user.setTelphone(<span class="string">"15239593182"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.sc&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;user_service_provider&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;user_service_provider&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project<span class="string">'s website --&gt;</span></span><br><span class="line"><span class="string">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;properties&gt;</span></span><br><span class="line"><span class="string">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class="line"><span class="string">  &lt;/properties&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;dependencies&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="string">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">  &lt;/dependencies&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.会议管理模块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MeetingPub</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingPub</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主键ID</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//会议编号</span></span><br><span class="line">    <span class="keyword">private</span> String pcode;</span><br><span class="line">    <span class="comment">//会议标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//会议内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MeetingPubService</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.MeetingPub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MeetingPubService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MeetingPub <span class="title">selectByPcode</span><span class="params">(String pcode)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MeetingPubServiceImpl</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.MeetingPub;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.MeetingPubService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingPubServiceImpl</span> <span class="keyword">implements</span> <span class="title">MeetingPubService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MeetingPub <span class="title">selectByPcode</span><span class="params">(String pcode)</span> </span>&#123;</span><br><span class="line">        MeetingPub meetingPub = <span class="keyword">new</span> MeetingPub();</span><br><span class="line">        meetingPub.setId(<span class="string">"1001"</span>);</span><br><span class="line">        meetingPub.setPcode(pcode);</span><br><span class="line">        meetingPub.setTitle(<span class="string">"dubbo"</span>);</span><br><span class="line">        meetingPub.setContent(<span class="string">"dubbo是一个RPC框架，是一个分布式服务解决方案"</span>);</span><br><span class="line">        <span class="keyword">return</span> meetingPub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.sc&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;meeting_service_consumer&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;meeting_service_consumer&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project<span class="string">'s website --&gt;</span></span><br><span class="line"><span class="string">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;properties&gt;</span></span><br><span class="line"><span class="string">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class="line"><span class="string">  &lt;/properties&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;dependencies&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="string">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">  &lt;/dependencies&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><p><strong>服务最佳化</strong></p><p>创建上述的项目后，发现并不能实现功能（即在查询会议信息的时候并不能查询出发布用户信息）。按照原来的方式进行修改的话，会发现无法引入User，因为User在另一个微服务项目中，这时候就需要采用Dubbo提供的服务最佳化来完成相关功能。</p><p><strong>项目结构</strong><br><img data-src="https://s1.ax1x.com/2020/03/12/8ZZDZn.png" alt="8ZZDZn.png"></p><ul><li>1.meeting_interface_api（公共的服务接口）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String telphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserService</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectById</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.sc&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;meeting_interface_api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;meeting_interface_api&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project<span class="string">'s website --&gt;</span></span><br><span class="line"><span class="string">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;properties&gt;</span></span><br><span class="line"><span class="string">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class="line"><span class="string">  &lt;/properties&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;dependencies&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="string">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">  &lt;/dependencies&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.meeting_service_consumer：服务消费者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MeetingPub</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingPub</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主键ID</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//会议编号</span></span><br><span class="line">    <span class="keyword">private</span> String pcode;</span><br><span class="line">    <span class="comment">//会议标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//会议内容</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="comment">//用户ID</span></span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关联用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MeetingPubServiceImpl</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.MeetingPub;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.MeetingPubService;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingPubServiceImpl</span> <span class="keyword">implements</span> <span class="title">MeetingPubService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MeetingPub <span class="title">selectByPcode</span><span class="params">(String pcode)</span> </span>&#123;</span><br><span class="line">        MeetingPub meetingPub = <span class="keyword">new</span> MeetingPub();</span><br><span class="line">        meetingPub.setId(<span class="string">"1001"</span>);</span><br><span class="line">        meetingPub.setPcode(pcode);</span><br><span class="line">        meetingPub.setTitle(<span class="string">"dubbo"</span>);</span><br><span class="line">        meetingPub.setContent(<span class="string">"dubbo是一个RPC框架，是一个分布式服务解决方案"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用user_service_provider信息</span></span><br><span class="line">        User user = userService.selectById(meetingPub.getUid());</span><br><span class="line">        meetingPub.setUser(user);</span><br><span class="line">        <span class="keyword">return</span> meetingPub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pom</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.sc&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;meeting_service_consumer&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;meeting_service_consumer&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project<span class="string">'s website --&gt;</span></span><br><span class="line"><span class="string">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;properties&gt;</span></span><br><span class="line"><span class="string">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class="line"><span class="string">  &lt;/properties&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;dependencies&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="string">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;com.sc&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;meeting_interface_api&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">  &lt;/dependencies&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提供者注册到注册中心"><a href="#提供者注册到注册中心" class="headerlink" title="提供者注册到注册中心"></a>提供者注册到注册中心</h4><ul><li>1.启动zookeeper和dubbo admin</li><li>2.用Spring配置声明暴露服务（配置在prvider的pom文件中）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建provider.xml文件(放置在resources目录中，请自行创建)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 服务的应用名称：尽量和你的应用服务名一样--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user_service_provider"</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.sc.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userServiceImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.sc.serviceimpl.UserServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加载Spring配置"><a href="#加载Spring配置" class="headerlink" title="加载Spring配置"></a>加载Spring配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"classpath:provider.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line">        System.in.read(); <span class="comment">// 按任意键退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目文件后，刷新dubbo admin即可看到提供者信息<br><img data-src="https://s1.ax1x.com/2020/03/12/8ZMFqe.png" alt="8ZMFqe.png"></p><h4 id="消费者订阅注册中心"><a href="#消费者订阅注册中心" class="headerlink" title="消费者订阅注册中心"></a>消费者订阅注册中心</h4><ul><li>1.配置maven依赖，并通过Spring配置远程引用服务，创建consumer.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">//pom.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>meeting_service_consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>meeting_service_consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>meeting_interface_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//consumer.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">               http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sc"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"meeting_service_consumer"</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"com.sc.service.UserService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.加载Spring配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.MeetingPub;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.MeetingPubService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[] &#123;<span class="string">"classpath:consumer.xml"</span>&#125;);</span><br><span class="line">        context.start();</span><br><span class="line"></span><br><span class="line">        MeetingPubService meetingPubService = context.getBean(MeetingPubService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        MeetingPub meetingPub = meetingPubService.selectByPcode(<span class="string">"1001"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println( meetingPub );</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MeetingPubServiceImpl</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.MeetingPub;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.MeetingPubService;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingPubServiceImpl</span> <span class="keyword">implements</span> <span class="title">MeetingPubService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MeetingPub <span class="title">selectByPcode</span><span class="params">(String pcode)</span> </span>&#123;</span><br><span class="line">        MeetingPub meetingPub = <span class="keyword">new</span> MeetingPub();</span><br><span class="line">        meetingPub.setId(<span class="string">"1001"</span>);</span><br><span class="line">        meetingPub.setPcode(pcode);</span><br><span class="line">        meetingPub.setTitle(<span class="string">"dubbo"</span>);</span><br><span class="line">        meetingPub.setContent(<span class="string">"dubbo是一个RPC框架，是一个分布式服务解决方案"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用user_service_provider信息</span></span><br><span class="line">        System.out.println(<span class="string">"-----远程服务访问---------"</span>+userService);</span><br><span class="line">        User user = userService.selectById(meetingPub.getUid());</span><br><span class="line">        meetingPub.setUser(user);</span><br><span class="line">        <span class="keyword">return</span> meetingPub;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行项目后就能在dubbo admin看到消费者。<br><img data-src="https://s1.ax1x.com/2020/03/12/8Z8s8s.png" alt="8Z8s8s.png"></li></ul><h2 id="Dubbo和Springboot整合"><a href="#Dubbo和Springboot整合" class="headerlink" title="Dubbo和Springboot整合"></a>Dubbo和Springboot整合</h2><ul><li>1.利用Springboot创建用户微服务模块。功能：利用用户ID查询用户信息（简单的项目写法，这里直接上代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String userRealName;</span><br><span class="line">    <span class="comment">//用户性别</span></span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="comment">//用户电话</span></span><br><span class="line">    <span class="keyword">private</span> String userTel;</span><br><span class="line">    <span class="comment">//用户邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line">    <span class="comment">//用户密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//角色ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="comment">//用户生日</span></span><br><span class="line">    <span class="keyword">private</span> Date userBirth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserMapper.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据Id查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据角色ID查询用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByRoleId</span><span class="params">(Integer roleId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询除了管理员外的用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserWithOutAdmin</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">searchUser</span><span class="params">(String userRealName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserMapper.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.sc.mapper.UserMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getAllUser"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * FROM user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updateUser"</span> parameterType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        update user</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test="userName!=null"&gt;user_name=#&#123;userName&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userRealName!=null"&gt;user_realname=#&#123;userRealName&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userSex!=null"&gt;user_sex=#&#123;userSex&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="password!=null"&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userEmail!=null"&gt;user_email=#&#123;userEmail&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userTel!=null"&gt;user_tel=#&#123;userTel&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="roleId!=null"&gt;role_id=#&#123;roleId&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userBirth!=null"&gt;user_birth=#&#123;userBirth&#125;&lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        where user_id=#&#123;userId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserById"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * FROM user where user_id=#&#123;userId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserByRoleId"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * FROM user where role_id=#&#123;roleId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getUserWithOutAdmin"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * <span class="function">FROM user where role_id not <span class="title">in</span> <span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    &lt;/select&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;select id</span>=<span class="string">"getUserByName"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * FROM user where user_name=#&#123;userName&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"searchUser"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"com.sc.entity.User"</span>&gt;</span><br><span class="line">        SELECT * FROM user where user_realname like #&#123;userRealName&#125; and role_id not in (1)</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"addUser"</span> parameterType=<span class="string">"com.sc.entity.User"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"userId"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">user</span><span class="params">(user_id,user_name,user_realname,password,role_id,user_sex,user_tel,user_email,user_birth)</span> <span class="title">values</span> <span class="params">(#&#123;userId&#125;,#&#123;userName&#125;,#&#123;userRealName&#125;,#&#123;password&#125;,#&#123;roleId&#125;,#&#123;userSex&#125;,#&#123;userTel&#125;,#&#123;userEmail&#125;,#&#123;userBirth&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;delete id</span>=<span class="string">"deleteUser"</span> parameterType=<span class="string">"Integer"</span>&gt;</span><br><span class="line">        delete from user where user_id=#&#123;userId&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserService.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据Id查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据角色ID查询用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByRoleId</span><span class="params">(Integer roleId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询除了管理员外的用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserWithOutAdmin</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">searchUser</span><span class="params">(String userRealName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        userMapper.deleteUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserByRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByRoleId(roleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByName(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserWithOutAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserWithOutAdmin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">searchUser</span><span class="params">(String userRealName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userRealName!=<span class="keyword">null</span> &amp;&amp; !userRealName.equals(<span class="string">" "</span>))</span><br><span class="line">            userRealName=<span class="string">"%"</span>+userRealName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            userRealName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> userMapper.searchUser(userRealName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserController.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户ID查询用户信息</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;userId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span>Integer userId)</span>&#123;</span><br><span class="line">        User user = userService.getUserById(userId);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.sc.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootUserServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootUserServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application.yml</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">///documents?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: <span class="number">20</span>MB</span><br><span class="line">      max-request-size: <span class="number">100</span>MB</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.sc.entity</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line"><span class="comment">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="comment">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line"><span class="comment">    &lt;parent&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="comment">    &lt;/parent&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;com.sc&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;boot_user_service&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;boot_user_service&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/properties&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;dependencies&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;2.1.1&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;5.1.41&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">            &lt;/exclusions&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependencies&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;build&gt;</span></span><br><span class="line"><span class="comment">        &lt;plugins&gt;</span></span><br><span class="line"><span class="comment">            &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                    &lt;fork&gt;true&lt;/fork&gt;</span></span><br><span class="line"><span class="comment">                &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">            &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugins&gt;</span></span><br><span class="line"><span class="comment">    &lt;/build&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img data-src="https://s1.ax1x.com/2020/03/13/8nYs6H.png" alt="8nYs6H.png"></p><ul><li>2.创建文件微服务（同上，基本项目创建，直接上代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StudyFile.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileId;</span><br><span class="line">    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="keyword">private</span> String studyfileName;</span><br><span class="line">    <span class="comment">//上传人ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//文件简介</span></span><br><span class="line">    <span class="keyword">private</span> String studyfileInfo;</span><br><span class="line">    <span class="comment">//文件审核状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileStatus;</span><br><span class="line">    <span class="comment">//文件喜欢数</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileFav;</span><br><span class="line">    <span class="comment">//文件评论数</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileReview;</span><br><span class="line">    <span class="comment">//上传文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String studyfilePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileMapper.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudyFileMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户ID查看文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件ID查看信息</span></span><br><span class="line">    <span class="function">StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件状态查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看今日文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer stufyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询以审核通过的文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一年内每个月上传的文件数</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileMapper.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.sc.mapper.StudyFileMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getAllStudyFile"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"updateStudyFile"</span> parameterType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        update studyfile</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;if test="studyfileName!=null"&gt;studyfile_name=#&#123;studyfileName&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="userId!=null"&gt;user_id=#&#123;userId&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="childtypeId!=null"&gt;childtype_id=#&#123;childtypeId&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="createTime!=null"&gt;create_time=#&#123;createTime&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="studyfileInfo!=null"&gt;studyfile_info=#&#123;studyfileInfo&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="studyfileStatus!=null"&gt;studyfile_status=#&#123;studyfileStatus&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="studyfileFav!=null"&gt;studyfile_fav=#&#123;studyfileFav&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="studyfileReview!=null"&gt;studyfile_review=#&#123;studyfileReview&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="studyfilePath!=null"&gt;studyfile_path=#&#123;studyfilePath&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="maintypeId!=null"&gt;maintype_id=#&#123;maintypeId&#125;,&lt;/if&gt;</span><br><span class="line">            &lt;if test="fileLevel!=null"&gt;file_level=#&#123;fileLevel&#125;&lt;/if&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        where studyfile_id=#&#123;studyfileId&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getStudyFileById"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where studyfile_id=#&#123;studyfileId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getFileByType"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where childtype_id=#&#123;childtypeId&#125; and studyfile_status=1</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getFileByMainType"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where maintype_id=#&#123;maintypeId&#125; and studyfile_status=1</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getFileByStatus"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where studyfile_status=#&#123;studyfileStatus&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getStudyFileByUser"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where user_id=#&#123;userId&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"searchFile"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where studyfile_name like #&#123;studyfileName&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"searchPassFile"</span> parameterType=<span class="string">"String"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where studyfile_name like #&#123;studyfileName&#125; and studyfile_status=1</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getYearPerMonthFile"</span> resultType=<span class="string">"Integer"</span>&gt;</span><br><span class="line">        <span class="function">select <span class="title">COUNT</span><span class="params">(*)</span> from studyfile where <span class="title">year</span><span class="params">(create_time)</span></span>=<span class="number">2020</span> <span class="function">GROUP BY <span class="title">MONTH</span><span class="params">(create_time)</span></span>;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"addStudyFile"</span> parameterType=<span class="string">"com.sc.entity.StudyFile"</span> useGeneratedKeys=<span class="string">"true"</span> keyProperty=<span class="string">"studyfileId"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">studyfile</span><span class="params">(studyfile_id, studyfile_name, user_id, childtype_id, create_time, studyfile_info, studyfile_status, studyfile_fav, studyfile_review,studyfile_path,maintype_id,file_level)</span></span></span><br><span class="line"><span class="function">        values</span></span><br><span class="line"><span class="function">        <span class="params">(#&#123;studyfileId&#125;,#&#123;studyfileName&#125;,#&#123;userId&#125;,#&#123;childtypeId&#125;,#&#123;createTime&#125;,#&#123;studyfileInfo&#125;,#&#123;studyfileStatus&#125;,#&#123;studyfileFav&#125;,#&#123;studyfileReview&#125;,#&#123;studyfilePath&#125;,#&#123;maintypeId&#125;,#&#123;fileLevel&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;delete id</span>=<span class="string">"deleteStudyFile"</span> parameterType=<span class="string">"Integer"</span>&gt;</span><br><span class="line">        delete from studyfile where studyfile_id=#&#123;studyfileId&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"getTodayFile"</span> parameterType=<span class="string">"Integer"</span> resultType=<span class="string">"com.sc.entity.StudyFile"</span>&gt;</span><br><span class="line">        SELECT * FROM studyfile where to_days(create_time) = to_days(now()) and studyfile_status=#&#123;studyfileStatus&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileService.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户ID查看文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件ID查看信息</span></span><br><span class="line">    <span class="function">StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件状态查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看今日文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer stufyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询以审核通过的文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一年内每个月上传的文件数</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.StudyFileMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.StudyFileService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFileServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudyFileMapper studyFileMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.addStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.deleteStudyFile(studyfileId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.updateStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getAllStudyFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getStudyFileByUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getStudyFileById(studyfileId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByType(childtypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByStatus(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByMainType(maintypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getTodayFile(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchPassFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getYearPerMonthFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileController.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.StudyFileService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudyFileService studyFileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/studyfile/&#123;studyfileId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudyFile <span class="title">getFileById</span><span class="params">(@PathVariable(<span class="string">"studyfileId"</span>)</span>Integer studyfileId)</span>&#123;</span><br><span class="line">        StudyFile studyFileById = studyFileService.getStudyFileById(studyfileId);</span><br><span class="line">        <span class="keyword">return</span> studyFileById;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.sc.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootFileServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootFileServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application.yml</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">///documents?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: <span class="number">20</span>MB</span><br><span class="line">      max-request-size: <span class="number">100</span>MB</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.sc.entity</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line"><span class="comment">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="comment">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line"><span class="comment">    &lt;parent&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="comment">    &lt;/parent&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;com.sc&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;boot_file_service&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;boot_file_service&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;properties&gt;</span></span><br><span class="line"><span class="comment">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/properties&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;dependencies&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;2.1.2&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;5.1.41&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">            &lt;exclusions&gt;</span></span><br><span class="line"><span class="comment">                &lt;exclusion&gt;</span></span><br><span class="line"><span class="comment">                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;/exclusion&gt;</span></span><br><span class="line"><span class="comment">            &lt;/exclusions&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependencies&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;build&gt;</span></span><br><span class="line"><span class="comment">        &lt;plugins&gt;</span></span><br><span class="line"><span class="comment">            &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">                &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                    &lt;fork&gt;true&lt;/fork&gt;</span></span><br><span class="line"><span class="comment">                &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">            &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugins&gt;</span></span><br><span class="line"><span class="comment">    &lt;/build&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><p>项目效果<br><img data-src="https://s1.ax1x.com/2020/03/13/8n01Ej.png" alt="8n01Ej.png"></p><ul><li>3.服务化最佳实践（创建maven项目，具体代码如下）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StudyFile.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileId;</span><br><span class="line">    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="keyword">private</span> String studyfileName;</span><br><span class="line">    <span class="comment">//上传人ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//文件简介</span></span><br><span class="line">    <span class="keyword">private</span> String studyfileInfo;</span><br><span class="line">    <span class="comment">//文件审核状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileStatus;</span><br><span class="line">    <span class="comment">//文件喜欢数</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileFav;</span><br><span class="line">    <span class="comment">//文件评论数</span></span><br><span class="line">    <span class="keyword">private</span> Integer studyfileReview;</span><br><span class="line">    <span class="comment">//上传文件路径</span></span><br><span class="line">    <span class="keyword">private</span> String studyfilePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//User.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">//用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String userRealName;</span><br><span class="line">    <span class="comment">//用户性别</span></span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="comment">//用户电话</span></span><br><span class="line">    <span class="keyword">private</span> String userTel;</span><br><span class="line">    <span class="comment">//用户邮箱</span></span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line">    <span class="comment">//用户密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//角色ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="comment">//用户生日</span></span><br><span class="line">    <span class="keyword">private</span> Date userBirth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StudyFileService.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户ID查看文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件ID查看信息</span></span><br><span class="line">    <span class="function">StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据大类查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据文件状态查看文件列表</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看今日文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer stufyfileStatus)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询以审核通过的文件</span></span><br><span class="line">    <span class="function">List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一年内每个月上传的文件数</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserService.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找所有用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据Id查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据角色ID查询用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByRoleId</span><span class="params">(Integer roleId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询除了管理员外的用户列表</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserWithOutAdmin</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">searchUser</span><span class="params">(String userRealName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.sc&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;boot_interface_api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;boot_interface_api&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project<span class="string">'s website --&gt;</span></span><br><span class="line"><span class="string">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;properties&gt;</span></span><br><span class="line"><span class="string">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span></span><br><span class="line"><span class="string">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span></span><br><span class="line"><span class="string">  &lt;/properties&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;dependencies&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="string">      &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">    &lt;dependency&gt;</span></span><br><span class="line"><span class="string">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">      &lt;version&gt;1.18.10&lt;/version&gt;</span></span><br><span class="line"><span class="string">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="string">  &lt;/dependencies&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure><p>**更改上述两个项目的项目结构，删除多余的实体类的service接口。并在pom文件中引入公共API。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot_interface_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目结构：<br><img data-src="https://s1.ax1x.com/2020/03/13/8nyqHO.png" alt="8nyqHO.png"></p><ul><li>4.服务和服务之间的调用。（根据文件ID查询到文件信息后，可以直接得到文件所属用户的全部信息）.也就代表，用户信息服务是提供者，文件信息服务是消费者，文件信息服务根据用户信息服务提供的信息来返回用户信息<ul><li>4.1 最佳化实践，分包。增加pom依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>4.2 将提供者注册到注册中心去。修改yml文件，并在ServiceImpl添加dubbo的Service注解。最终在启动类中添加@EnableDubbo注解，使项目可以扫描到@Service注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//UserServiceImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        userMapper.deleteUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserByRoleId</span><span class="params">(Integer roleId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByRoleId(roleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserByName(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserWithOutAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserWithOutAdmin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">searchUser</span><span class="params">(String userRealName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userRealName!=<span class="keyword">null</span> &amp;&amp; !userRealName.equals(<span class="string">" "</span>))</span><br><span class="line">            userRealName=<span class="string">"%"</span>+userRealName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            userRealName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> userMapper.searchUser(userRealName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.sc.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootUserServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootUserServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application.yml</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">///documents?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: <span class="number">20</span>MB</span><br><span class="line">      max-request-size: <span class="number">100</span>MB</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.sc.entity</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment">dubbo:</span></span><br><span class="line"><span class="comment">  application:</span></span><br><span class="line"><span class="comment">    name: boot_user_service</span></span><br><span class="line"><span class="comment">  registry:</span></span><br><span class="line"><span class="comment">    address: zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">  protocol:</span></span><br><span class="line"><span class="comment">    name: dubbo</span></span><br><span class="line"><span class="comment">    port: 20880</span></span><br></pre></td></tr></table></figure><p>运行项目后即可在dubbo中查看到已添加提供者<br><img data-src="https://s1.ax1x.com/2020/03/13/8n7QpV.png" alt="8n7QpV.png"></p><ul><li>4.2 将服务的消费者注册到注册中心去进行消费服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StudyFileServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.StudyFileMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.StudyFileService;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFileServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudyFileMapper studyFileMapper;</span><br><span class="line">    <span class="meta">@Reference</span> <span class="comment">//注解 注册中心引用服务</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.addStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.deleteStudyFile(studyfileId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.updateStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getAllStudyFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getStudyFileByUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        StudyFile studyFileById = studyFileMapper.getStudyFileById(studyfileId);</span><br><span class="line">        User userById = userService.getUserById(studyFileById.getUserId());</span><br><span class="line">        studyFileById.setUser(userById);</span><br><span class="line">        <span class="keyword">return</span> studyFileById;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByType(childtypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByStatus(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByMainType(maintypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getTodayFile(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchPassFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getYearPerMonthFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Application.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.sc.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootFileServiceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootFileServiceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pom.xml</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application.yml</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">///documents?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: <span class="number">20</span>MB</span><br><span class="line">      max-request-size: <span class="number">100</span>MB</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.sc.entity</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">dubbo:</span></span><br><span class="line"><span class="comment">  application:</span></span><br><span class="line"><span class="comment">    name: boot_file_service</span></span><br><span class="line"><span class="comment">  registry:</span></span><br><span class="line"><span class="comment">    address: zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p>运行项目后可看到消费者成功添加入dubbo。并且可以看到文件信息中成功查询出用户信息<br><img data-src="https://s1.ax1x.com/2020/03/13/8nqAOO.png" alt="8nqAOO.png"><br><img data-src="https://s1.ax1x.com/2020/03/13/8nqeTH.png" alt="8nqeTH.png"></p><h4 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h4><ul><li>Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 check=”true”。</li><li>可以通过 check=”false” 关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</li><li>另外，如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭 check，否则服务临时不可用时，会抛出异常，拿到 null 引用，如果 check=”false”，总是会返回引用，当服务恢复时，能自动连上。</li><li>把需要关闭检查的服务都设置为不检查，就可以避免启动后查询数据报错，并且两个会自动连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//StudyFileServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.StudyFileMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.StudyFileService;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFileServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudyFileMapper studyFileMapper;</span><br><span class="line">    <span class="meta">@Reference</span>(check = <span class="keyword">false</span>) <span class="comment">//注解 注册中心引用服务</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.addStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.deleteStudyFile(studyfileId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.updateStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getAllStudyFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getStudyFileByUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        StudyFile studyFileById = studyFileMapper.getStudyFileById(studyfileId);</span><br><span class="line">        User userById = userService.getUserById(studyFileById.getUserId());</span><br><span class="line">        studyFileById.setUser(userById);</span><br><span class="line">        <span class="keyword">return</span> studyFileById;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByType(childtypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByStatus(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByMainType(maintypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getTodayFile(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchPassFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getYearPerMonthFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//UserServiceImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.serviceimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.StudyFile;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.mapper.StudyFileMapper;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.StudyFileService;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudyFileServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudyFileService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudyFileMapper studyFileMapper;</span><br><span class="line">    <span class="meta">@Reference</span>(check = <span class="keyword">false</span>) <span class="comment">//注解 注册中心引用服务</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.addStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudyFile</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.deleteStudyFile(studyfileId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudyFile</span><span class="params">(StudyFile studyFile)</span> </span>&#123;</span><br><span class="line">        studyFileMapper.updateStudyFile(studyFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getAllStudyFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getAllStudyFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getStudyFileByUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getStudyFileByUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StudyFile <span class="title">getStudyFileById</span><span class="params">(Integer studyfileId)</span> </span>&#123;</span><br><span class="line">        StudyFile studyFileById = studyFileMapper.getStudyFileById(studyfileId);</span><br><span class="line">        User userById = userService.getUserById(studyFileById.getUserId());</span><br><span class="line">        studyFileById.setUser(userById);</span><br><span class="line">        <span class="keyword">return</span> studyFileById;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByType</span><span class="params">(Integer childtypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByType(childtypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByStatus</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByStatus(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getFileByMainType</span><span class="params">(Integer maintypeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getFileByMainType(maintypeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">getTodayFile</span><span class="params">(Integer studyfileStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getTodayFile(studyfileStatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchPassFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchPassFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;StudyFile&gt; <span class="title">searchFile</span><span class="params">(String studyfileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (studyfileName!=<span class="keyword">null</span> &amp;&amp; !studyfileName.equals(<span class="string">" "</span>))</span><br><span class="line">            studyfileName=<span class="string">"%"</span>+studyfileName+<span class="string">"%"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            studyfileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.searchFile(studyfileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getYearPerMonthFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studyFileMapper.getYearPerMonthFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot的Shiro加密</title>
      <link href="/jokerboozp.github.io/2020/01/07/2020-01-07-Springboot%E7%9A%84MD5%E7%9B%90%E5%80%BC%E5%8A%A0%E5%AF%86/"/>
      <url>/jokerboozp.github.io/2020/01/07/2020-01-07-Springboot%E7%9A%84MD5%E7%9B%90%E5%80%BC%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="本文档算是Spring-boot文档的完结版本，讲述剩下的一个功能，密码盐值加密。"><a href="#本文档算是Spring-boot文档的完结版本，讲述剩下的一个功能，密码盐值加密。" class="headerlink" title="本文档算是Spring boot文档的完结版本，讲述剩下的一个功能，密码盐值加密。"></a>本文档算是Spring boot文档的完结版本，讲述剩下的一个功能，密码盐值加密。</h4><h4 id="1-盐值加密"><a href="#1-盐值加密" class="headerlink" title="1.盐值加密"></a>1.盐值加密</h4><ul><li>盐值加密是一种加密方式。MD5加密是对用户的密码进行取哈希操作，如果凑巧，用户的密码设置的相同，那么加密之后的密码也就相同，所以可以在用户密码加密的时候添加一些掩饰，从而保证加密的安全。</li><li>例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：盐值 salt 、密码字符串passWord</span><br><span class="line">输出：密码密文passWordHash</span><br><span class="line">函数：加密hash函数</span><br></pre></td></tr></table></figure><h4 id="2-Shiro的MD5盐值加密功能"><a href="#2-Shiro的MD5盐值加密功能" class="headerlink" title="2.Shiro的MD5盐值加密功能"></a>2.Shiro的MD5盐值加密功能</h4><ul><li><strong>首先，效果图如下</strong></li><li><img data-src="https://s2.ax1x.com/2020/01/07/l6CmkD.gif" alt="l6CmkD.gif"></li><li>以下所有代码均是在已经实现前面所说的功能后添加的。<a id="more"></a></li><li><strong>具体实现步骤(我是把用户名当作盐值，所以没有在数据库中定义salt)</strong><ul><li>1.ShiroConfig.java配置中增加</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注入自定义的Ream</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">       CustomRealm customRealm = <span class="keyword">new</span> CustomRealm();</span><br><span class="line">       <span class="comment">//注入密码加密</span></span><br><span class="line">       customRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span><br><span class="line">       <span class="keyword">return</span> customRealm;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密码加密算法设置</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span></span>&#123;</span><br><span class="line">       HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">       hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"md5"</span>);</span><br><span class="line">       <span class="comment">//散列的次数</span></span><br><span class="line">       hashedCredentialsMatcher.setHashIterations(<span class="number">2</span>);</span><br><span class="line">       <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>2.Realm注入到SecurityManager中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">       DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">       <span class="comment">//将自定义的realm交给SecurityManager管理</span></span><br><span class="line">       securityManager.setRealm(customRealm());</span><br><span class="line">       <span class="comment">// 自定义缓存实现 使用redis</span></span><br><span class="line">       securityManager.setCacheManager(cacheManager());</span><br><span class="line">       <span class="comment">// 自定义session管理 使用redis</span></span><br><span class="line">       securityManager.setSessionManager(SessionManager());</span><br><span class="line">       <span class="comment">// 使用记住我</span></span><br><span class="line">       securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">       <span class="keyword">return</span> securityManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>3.修改CustomRealm中的doGetAuthenticationInfo方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), ByteSource.Util.bytes(userName),getName());</span><br></pre></td></tr></table></figure><ul><li>4.编写加密工具类，用来实现注册时密码加密</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordGenerateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPassword</span><span class="params">(String userName,String password,String salt,<span class="keyword">int</span> hashTimes)</span></span>&#123;</span><br><span class="line">        Md5Hash md5Hash = <span class="keyword">new</span> Md5Hash(password,userName,hashTimes);</span><br><span class="line">        <span class="keyword">return</span> md5Hash.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>5.修改注册方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行注册操作</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Register</span><span class="params">(User user, Map map,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        user.setRoleId(<span class="number">3</span>);</span><br><span class="line">        String userName = request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String password1 = PasswordGenerateUtil.getPassword(userName, password, userName, <span class="number">2</span>);</span><br><span class="line">        user.setPassword(password1);</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">        System.out.println(<span class="string">"加密后的密码为==============&gt;"</span>+password1);</span><br><span class="line">        map.put(<span class="string">"msg"</span>,<span class="string">"成功注册，请登录"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>经过三篇总结之后，关于Spring boot的有关知识已经学习完毕。利用这些知识可以完成相当完整的项目。没有什么难点，大部分只需要静下心研究就能理解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/jokerboozp.github.io/2020/01/06/2020-01-06-KMP%E7%AE%97%E6%B3%95%E5%8F%8A%E9%A2%98%E8%A7%A3/"/>
      <url>/jokerboozp.github.io/2020/01/06/2020-01-06-KMP%E7%AE%97%E6%B3%95%E5%8F%8A%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="首先，题目是一道Leetcode上标记为简单的算法题。但是自己对于算法之类的实在是不感冒，所以在我眼里他就是困难级别的，正好总结一下。但是自己从头到尾总结一遍，现在我让写依旧是写不出来，把他当作发散思维就好了，不强求。"><a href="#首先，题目是一道Leetcode上标记为简单的算法题。但是自己对于算法之类的实在是不感冒，所以在我眼里他就是困难级别的，正好总结一下。但是自己从头到尾总结一遍，现在我让写依旧是写不出来，把他当作发散思维就好了，不强求。" class="headerlink" title="首先，题目是一道Leetcode上标记为简单的算法题。但是自己对于算法之类的实在是不感冒，所以在我眼里他就是困难级别的，正好总结一下。但是自己从头到尾总结一遍，现在我让写依旧是写不出来，把他当作发散思维就好了，不强求。"></a>首先，题目是一道Leetcode上标记为简单的算法题。但是自己对于算法之类的实在是不感冒，所以在我眼里他就是困难级别的，正好总结一下。但是自己从头到尾总结一遍，现在我让写依旧是写不出来，把他当作发散思维就好了，不强求。</h4><hr><p>给定一个haystack字符串和一个needle字符串。在haystack字符串中找出needle字符串出现的第一个位置（从0开始）。如果不存在，则返回-1<br>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack=<span class="string">"hello"</span>,needle=<span class="string">"ll"</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack=<span class="string">"aaaaa"</span>,needle=<span class="string">"bba"</span></span><br><span class="line">输出：-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>说明：<br>当needle是空字符串的时候我们应该返回什么值呢？对于本题而言，当needle是空字符串的时候我们应当返回0，这与C语言的strstr()以及Java的indexOf()定义相符。<a id="more"></a></p><hr><ul><li>这道题的本意是让用KMP算法来解答，而非用暴力法。所以就需要先知道什么是KMP算法。</li></ul><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><ul><li><p>举例来说，有一个字符串”BBC ABCDAB ABCDABCDABDE”，我想知道，里面是否包含另一个字符串”ABCDABD”？</p><ul><li>有许多算法可以完成这个任务，KMP算法是最常用的算法之一。</li></ul></li><li><p>解法示例：</p></li><li><p>1.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050103.png" alt=""></p><ul><li>首先，字符串”BBC ABCDAB ABCDABCDABDE”的第一个字符与搜索词”ABCDABD”的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。</li></ul></li><li><p>2.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050104.png" alt=""></p><ul><li>因为B与A不匹配，搜索词再往后移</li></ul></li><li><p>3.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050105.png" alt=""></p><ul><li>就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。</li></ul></li><li><p>4.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050106.png" alt=""></p><ul><li>接着比较字符串和搜索词的下一个字符，还是相同。</li></ul></li><li><p>5.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050107.png" alt=""></p><ul><li>直到字符串有一个字符，与搜索词对应的字符不相同为止</li></ul></li><li><p>6.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050108.png" alt=""></p><ul><li>这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把”搜索位置”移到已经比较过的位置，重比一遍</li></ul></li><li><p>7.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050107.png" alt=""></p><ul><li>一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率</li></ul></li><li><p>8.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050109.png" alt=""></p><ul><li>怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，后面再介绍，这里只要会用就可以了</li></ul></li><li><p>9.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050107.png" alt=""></p><ul><li>已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数：移动位数 = 已匹配的字符数 - 对应的部分匹配值。因为 6 - 2 等于4，所以将搜索词向后移动4位。</li></ul></li><li><p>10.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050110.png" alt=""></p><ul><li>因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移2位</li></ul></li><li><p>11.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050111.png" alt=""></p><ul><li>因为空格与A不匹配，继续后移一位。</li></ul></li><li><p>12.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050112.png" alt=""></p><ul><li>逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动4位。</li></ul></li><li><p>13.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050113.png" alt=""></p><ul><li>逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动7位，这里就不再重复了。</li></ul></li><li><p>14.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050114.png" alt=""></p><ul><li>下面介绍《部分匹配表》是如何产生的。</li><li>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</li></ul></li><li><p>15.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050109.png" alt=""></p><ul><li>“部分匹配值”就是”前缀”和”后缀”的最长的共有元素的长度。以”ABCDABD”为例，<ul><li>“A”的前缀和后缀都为空集，共有元素的长度为0；</li><li>“AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</li><li>“ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</li><li>“ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</li><li>“ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1；</li><li>“ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2；</li><li>“ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</li></ul></li></ul></li><li><p>16.<img data-src="http://www.ruanyifeng.com/blogimg/asset/201305/bg2013050112.png" alt=""></p><ul><li>“部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动4位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。</li></ul></li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><ul><li>首先用一个图示来说明一些定义：</li><li><img data-src="https://pic.leetcode-cn.com/c43d65b60e24b1a4abd6b3593a7c2dd413107fa045e900d4f204b3ce049a133a-file_1570527731109" alt=""></li><li><strong>1.怎么处理匹配失败的信息</strong><ul><li>txt 串的已遍历字符，长度太长，缓存一份自然是不现实的，舍去；</li><li>pattern 串的已匹配字符，长度小，与 txt 串最近几个字符是已匹配的。</li><li>因此，已匹配信息指 pattern 串的已匹配字符；且完整的 pattern 串是已知的，因此，我们一直掌握着一个信息：Pattern 串的匹配程度，也就是 Pattern 串的已匹配状态。</li></ul></li><li><strong>2.状态</strong><ul><li><img data-src="https://s2.ax1x.com/2020/01/06/lr2KGq.png" alt="lr2KGq.png"></li></ul></li><li><strong>3.确定有限状态机</strong><ul><li><img data-src="https://s2.ax1x.com/2020/01/06/lr2DsO.png" alt="lr2DsO.png"></li></ul></li><li><strong>4.使用有限状态机</strong><ul><li>假如我们已经构建好刚才的表 FSM（指 Finite State Machine，有限状态机简称），我们可以直接这样用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> state = <span class="number">0</span>; <span class="comment">// 匹配状态</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">    state = FSM[state][haystack.charAt(i)];</span><br><span class="line">    <span class="comment">// 判断是否匹配到最终状态，是则返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (state == subLen) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - subLen + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>5.构建有限状态机</strong><ul><li>在确定有限状态机中，我们依据 当前状态 + 匹配字符 = 目标状态 推导出整张表，既然能手动推导，弄清楚原理让它自动生成了，所以我们来一步步搞清楚原理。abab 遇到 a 无法升级，但是却可以把 abab 看成是 ab，遇到 a 可以变成 aba，因此不需要重置，可以降级为 aba 状态。能这样做的原因是：abab 这个已匹配串中的前缀 ab 与后缀 ab 内容相同而不相等（不是同一个子字符串），就像 aba 可以视为 a，因为包含的内容相同而不相等的前后缀 a！也就是部分匹配，即前后缀内容相同而不相等，而 a 这个前缀/后缀就叫做当前状态的孪生词缀状态，因此有：当前状态 + 匹配失败字符 = 孪生词缀状态 + 匹配字符 = 目标状态（降级或重置）；所以，为构建状态机，我们需要为每一个状态找到相应的孪生词缀状态（设 X 代表孪生词缀状态），然后借助 X 判断匹配失败后是重置还是降级。我们通过构建状态机的代码来说明怎么找 X 状态；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明状态机和 X；因为还没读取 pattern 串，所以默认所有目标状态都为 0；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X = <span class="number">0</span>；<span class="comment">//最初所有状态的孪生词缀状态是未知的，所以默认为 0；</span></span><br><span class="line"><span class="comment">// 除去最终状态，状态机有 pattern.length() 种输入状态，默认遇到 256 个字符。表格所有成员初始值为 0</span></span><br><span class="line"><span class="keyword">int</span>[][] FSM = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()][<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.更新状态机的每一列和更新每一个状态的孪生词缀状态。我们先默认所有字符都匹配失败，再用唯一正确的字符进行修改。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pattern.length(); i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> match = (<span class="keyword">int</span>)pattern.charAt(i); <span class="comment">// 当前能成功匹配的字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">256</span>; c++) &#123;</span><br><span class="line">        <span class="comment">// 当前状态 + 匹配失败字符 = 孪生词缀状态 + 匹配字符 = 目标状态</span></span><br><span class="line">        FSM[i][c] = FSM[X][c]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当前状态 + 匹配成功字符 = 升级状态</span></span><br><span class="line">    FSM[i][match] = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 零或一状态是不可能有孪生词缀，因此不更新 0 状态的孪生词缀状态，</span></span><br><span class="line"><span class="comment">         * 但 1 状态匹配出错，匹配到第一个字符会回到 1 状态，因此需要更新。</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 当前状态有孪生词缀状态的话，X 状态就是当前状态的前缀和后缀，</span></span><br><span class="line"><span class="comment">         * 当前状态遇到 match 会升级到下一个状态，X + match 一定是下一状态的后缀，</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 如果 X 遇到 match 能升级，就表示 X + match 一定是下一个状态的前缀，那么 X + match 是下一状态的孪生词缀状态；</span></span><br><span class="line"><span class="comment">         * abab = aba + b；X(ab) = X(a) + b;</span></span><br><span class="line"><span class="comment">         * 如果无法升级，就表示 X + match 不是下一个状态的前缀，那么 X + match 就要降级或者重置状态了；</span></span><br><span class="line"><span class="comment">         * ababc = abab + c; X(0) = X(ab) + c;</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 所以： 下一状态的孪生词缀状态 = 当前状态的孪生词缀状态 + 当前状态的更新字符</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        X = FSM[X][match];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整体算法"><a href="#整体算法" class="headerlink" title="整体算法"></a>整体算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> strLen = haystack.length(), subLen = needle.length();</span><br><span class="line">    <span class="keyword">if</span> (subLen == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (strLen == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 构建状态机</span></span><br><span class="line">    <span class="keyword">int</span>[][] FSM = <span class="keyword">new</span> <span class="keyword">int</span>[subLen][<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">int</span> X = <span class="number">0</span>, match = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subLen; i++) &#123;</span><br><span class="line">        match = (<span class="keyword">int</span>) needle.charAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 当前状态 + 匹配失败字符 = 孪生词缀状态 + 匹配字符</span></span><br><span class="line">            FSM[i][j] = FSM[X][j]; </span><br><span class="line">        &#125;</span><br><span class="line">        FSM[i][match] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 下一部分匹配状态 = X + match</span></span><br><span class="line">            X = FSM[X][match];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 匹配子串</span></span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLen; i++) &#123;</span><br><span class="line">        state = FSM[state][haystack.charAt(i)];</span><br><span class="line">        <span class="keyword">if</span> (state == subLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - subLen + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-超级账本</title>
      <link href="/jokerboozp.github.io/2019/12/23/2019-12-23-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E8%B6%85%E7%BA%A7%E8%B4%A6%E6%9C%AC/"/>
      <url>/jokerboozp.github.io/2019/12/23/2019-12-23-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E8%B6%85%E7%BA%A7%E8%B4%A6%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<ul><li>超级账本引入权限控制机制将区块链带入跨企业应用场景中，使区块链技术不再局限于完全开放的公有链模式，分布式账本技术（Distributed Ledger Technologies，DLT）正被主流企业认可并采用</li></ul><h4 id="分布式账本（DLT）"><a href="#分布式账本（DLT）" class="headerlink" title="分布式账本（DLT）"></a>分布式账本（DLT）</h4><ul><li>分布式账本技术也叫做分布式记账、分布式总账、分布式分类账，是一种跨站点、国家、机构，可复制、共享和同步数据的数据库。分布式账本技术不需要中心化机构管理和存储数据，为确保跨系节点之间的数据复制，需要P2P网络和共识算法来保证数据的一致性。</li></ul><h4 id="超级账本"><a href="#超级账本" class="headerlink" title="超级账本"></a>超级账本</h4><ul><li>超级账本不是区块链，它是一组专注于跨行业分布式账本技术的开源项目，其主要目标是创建企业级、开源、分布式的分类框架和代码库来支持业务用例。<a id="more"></a></li><li>超级账本的关键目标之一不只是建立自己的分布式账本技术，更重要的是建立分布式账本技术的行业标准。鼓励更多的企业参与到分布式账本技术的建设和应用中来。</li></ul><h4 id="Hyperledger-Fabric"><a href="#Hyperledger-Fabric" class="headerlink" title="Hyperledger Fabric"></a>Hyperledger Fabric</h4><ul><li>Hyperledger Fabric是目前超级账本项目中发展最好的子项目，被广泛用到跨企业的业务流程改造中。Fabric是一个分布式账本解决方案平台，采用模块化架构，支持不同组件的可拔插性，以适应业务系统的复杂性。</li><li>与比特币和以太坊不同的是，HF网络成员加入依赖于成员服务提供者（Membership Service Provider,MSP）注册，而不是允许任何人通过工作量证明机制或者权益证明机制参与网络。<ul><li>Fabric中有一个独立的Fabric CA模块，用来管理用户身份，当然Fabric也允许第三方CA机构的接入。他就像现实生活中的公安局，专门进行证书发放、管理和身份验证。</li></ul></li></ul><h4 id="Hyperledger-Fabric的体系架构"><a href="#Hyperledger-Fabric的体系架构" class="headerlink" title="Hyperledger Fabric的体系架构"></a>Hyperledger Fabric的体系架构</h4><ul><li>Fabric首次将权限管理机制引入区块链中</li><li>Fabric分为四大模块，分别是成员服务，区块链服务，智能合约服务，应用编程接口。<ul><li>成员服务（MSP）提供成员注册、身份管理和审计功能。负责管理参与者和分布式账本的身份识别，参与者通过注册获取身份，之后通过授权机构发放的密钥（或者证书）进行交易。</li><li>区块链服务用于维护分布式账本。区块链服务包括P2P协议、分布式账本和共识机制的管理。</li><li>智能合约服务用于保证智能合约在网络节点上安全运行</li><li>应用编程接口提供SDK和CLI两种方式供开发人员使用区块链的各种服务</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊中的智能合约</title>
      <link href="/jokerboozp.github.io/2019/12/20/2019-12-20-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
      <url>/jokerboozp.github.io/2019/12/20/2019-12-20-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h4><ul><li>智能合约是运行在区块链上的一段代码，代码的逻辑定义了合约的内容</li><li>智能合约的账户保存了合约当前的运行状态<ul><li>balance：当前余额</li><li>nonce：交易次数</li><li>code：合约代码</li><li>storage：存储，存储结构是一棵MPT<a id="more"></a></li></ul></li><li>Solidity是智能合约最常用的语言，语法上和JavaScript很相近</li><li>代码实例：<ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLHTPg.jpg" alt="QLHTPg.jpg"></li></ul></li></ul><h4 id="外部账户如何调用智能合约"><a href="#外部账户如何调用智能合约" class="headerlink" title="外部账户如何调用智能合约"></a>外部账户如何调用智能合约</h4><ul><li>创建一个交易，接收地址为要调用的那个智能合约的地址，data域填写要调用的函数及其参数的编码值</li><li><img data-src="https://s2.ax1x.com/2019/12/20/QLqQtU.jpg" alt="QLqQtU.jpg"></li></ul><h4 id="一个合约如何调用另一个合约中的函数"><a href="#一个合约如何调用另一个合约中的函数" class="headerlink" title="一个合约如何调用另一个合约中的函数"></a>一个合约如何调用另一个合约中的函数</h4><ul><li>1.直接调用<ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLqGc9.jpg" alt="QLqGc9.jpg"></li></ul></li><li>2.使用address类型的call()函数调用<ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLqdAK.jpg" alt="QLqdAK.jpg"></li></ul></li><li>3.代理调用delegatecall()<ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLqgBt.jpg" alt="QLqgBt.jpg"></li></ul></li></ul><h4 id="fallback-函数"><a href="#fallback-函数" class="headerlink" title="fallback()函数"></a>fallback()函数</h4><ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLqbBq.jpg" alt="QLqbBq.jpg"></li></ul><h4 id="智能合约的创建和运行"><a href="#智能合约的创建和运行" class="headerlink" title="智能合约的创建和运行"></a>智能合约的创建和运行</h4><ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLL3Uf.jpg" alt="QLL3Uf.jpg"></li></ul><h4 id="汽油费"><a href="#汽油费" class="headerlink" title="汽油费"></a>汽油费</h4><ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLLbxH.jpg" alt="QLLbxH.jpg"></li><li>全节点是没有办法判断智能合约是否会导致死循环的，这是一个停机问题（从理论上可以证明不存在这样一个算法，能够对任意给定的输入程序判断出这个程序是否会造成停机）。</li><li>所以就把这个问题推给发起交易的那个账户，所以就引入了汽油费机制。发起一个对智能合约的调用，就要支付相应的汽油费<ul><li>AccountNonce：交易的序号，用于防止replay attack</li><li>GasLimit：愿意为这笔交易支付的最大的汽油费</li><li>Price：单位汽油的价格</li><li>Recipient：收款人的地址</li><li>Amount：转账金额</li><li>Payload：data域，用于存放“调用的合约中的哪一个函数，这个函数的参数取值是什么”</li></ul></li><li>当一个全节点收到一个对智能合约调用的请求之后，先按照合同中给出的GasLimit，算出可能花掉的最大汽油费，然后一次性的把汽油费从发起调用的账户上扣掉。然后再根据实际执行的情况，算出实际扣掉的汽油费。</li></ul><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ul><li>以太坊中的交易执行起来具有原子性，一个交易要么全部执行，要么全部不执行，不会只执行一部分。所以如果在执行智能合约的过程当中发生了错误，会导致整个交易的执行回滚，退回到开始执行之前的状态。</li></ul><h4 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h4><ul><li><img data-src="https://s2.ax1x.com/2019/12/20/QLxz8K.jpg" alt="QLxz8K.jpg"></li><li>是否发生连锁式的回滚取决于调用智能合约的方式。<ul><li>如果智能合约是直接调用的话，他会触发连锁式的回滚，整个交易都会发生回滚</li><li>如果是使用call()这种方式，就不会引起连锁式回滚，只会使当前的交易失败，返回一个false的返回值</li></ul></li></ul><h4 id="智能合约可以得到的区块信息"><a href="#智能合约可以得到的区块信息" class="headerlink" title="智能合约可以得到的区块信息"></a>智能合约可以得到的区块信息</h4><ul><li>block.blockhash(uint blockNumber) returns (bytes32)：给定区块的哈希，仅对最近的256个区块有效而不包括当前区块</li><li>block.coinbase(address)：挖出当前区块的矿工地址</li><li>block.difficulty(uint)：当前区块难度</li><li>block.gaslimit(uint)：当前区块gas限额</li><li>block.number(uint)：当前区块号</li><li>block.timestamp(uint)：自unix epoch起始当前区块以秒计的时间戳</li></ul><h4 id="智能合约可以获得的调用信息"><a href="#智能合约可以获得的调用信息" class="headerlink" title="智能合约可以获得的调用信息"></a>智能合约可以获得的调用信息</h4><ul><li>msg.data(bytes)：完整的calldata</li><li>msg.gas(uint)：剩余gas</li><li>msg.sender(address)：消息发送者（当前调用）</li><li>msg.sig(bytes4)：calldata前的四字节（也就是函数标识符）</li><li>msg.value(uint)：随消息发送的wei的数量</li><li>now(uint)：目前区块的时间戳（block.timestamp）</li><li>tx.gasprice(uint)：交易的gas价格</li><li>tx.origin(address)：交易发起者（完全的调用链）</li></ul><h4 id="智能合约中的地址类型"><a href="#智能合约中的地址类型" class="headerlink" title="智能合约中的地址类型"></a>智能合约中的地址类型</h4><p><img data-src="https://s2.ax1x.com/2019/12/23/lSuXDO.png" alt="lSuXDO.png"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊中的挖矿算法</title>
      <link href="/jokerboozp.github.io/2019/12/19/2019-12-19-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E6%8C%96%E7%9F%BF%E7%AE%97%E6%B3%95/"/>
      <url>/jokerboozp.github.io/2019/12/19/2019-12-19-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E6%8C%96%E7%9F%BF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Memory-Hard-Mining-Puzzle"><a href="#Memory-Hard-Mining-Puzzle" class="headerlink" title="Memory Hard Mining Puzzle"></a>Memory Hard Mining Puzzle</h4><ul><li>因为比特币的发展导致挖矿设备越来越专业化，这就和比特币当时的设计初衷背道而驰。所以其他加密货币在设计mining puzzle的时候都会尽量做到ASIC resistance，最常用的做法是增加对内存的需求，也就是所谓的memory hard mining puzzle</li></ul><h4 id="LiteCoin的Memory-Hard-Mining-Puzzle：scrypt"><a href="#LiteCoin的Memory-Hard-Mining-Puzzle：scrypt" class="headerlink" title="LiteCoin的Memory Hard Mining Puzzle：scrypt"></a>LiteCoin的Memory Hard Mining Puzzle：scrypt</h4><ul><li>scrypt是一个对内存要求很高的哈希函数。具体设计思想如下：<a id="more"></a></li><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/ca349b9ef7baf051.jpg" alt=""><ul><li>开设一个很大的数组，然后按照顺序填写一些伪随机数</li><li>种子节点seed通过一些运算算出一个值，放到数组的第一个位置，然后后面每一个位置的值都是前一个位置取哈希得到的。</li><li>求解puzzle的时候，按照伪随机的顺序从数组中读取一些数，每次读取的位置也是和前一个数相关的。<ul><li>例如读取了A位置的数，之后根据A的数值进行一些运算，算出下一个要读取的位置，假如是B的位置，然后对B进行一些运算，算出C的位置。</li></ul></li></ul></li><li>这种方法的好处是：如果这个数组足够的大，那么对于挖矿的矿工来说就是Memory Hard，因为如果矿工不保存这个数组，那么挖矿的复杂度就会大幅度上升</li><li>但是这种方法也有一个问题：他对矿工虽然是memory hard的，但是对于轻节点来说也是memory hard的。轻节点不可能存取所有计算的数值。那样轻节点就会过大。</li></ul><h4 id="以太坊的挖矿算法"><a href="#以太坊的挖矿算法" class="headerlink" title="以太坊的挖矿算法"></a>以太坊的挖矿算法</h4><ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/e07dff7275fdd659.jpg" alt=""></li><li>以太坊是使用一种memory hard mining puzzle，它使用了一大一小两个两个数据基，小的数据基是一个16M的cache，大的是一个1G的dataset，叫做DAG。<ul><li>轻节点只需要保存16M的cache即可，1G的DAG只需要挖矿的矿工保存</li><li>具体步骤：<ul><li>首先从种子节点seed经过一些运算算出数组的第一个元素，然后依次取哈希，第一个元素取哈希得到第二个元素，第二个元素取哈希得到第三个元素。。。</li><li>生成一个更大的数组，其中小的cache和大的dataset都是定期增长的。大的数组中的元素是从小的数组中按照伪随机的方式得到的</li><li>第一次例如是读取A这个元素，读取之后对当前A的哈希值进行更新迭代，算出下一个要读取的位置，假设是B，然后把B的哈希值进行更新迭代，算出读取C的位置。从cache中读取，来回读取256次，最后算出一个数，作为大的dataset的第一个元素。然后第二个元素和第一个元素的获得方法一样，也是利用伪随机的方式读取小的数组，最后算出来一个哈希值，作为第二个元素放到大数组中。</li><li>求解mining puzzle时用的是大的数组中的数，按照伪随机的顺序从大的数组中读取128个数。刚开始的时候根据区块的块头和nonce值，算出一个初始的哈希，根据这个哈希映射到大数组中的某个位置。然后进行一些运算，算出下一个要读取的位。读取的时候不止要把算出的元素读取出来，也要把右边相邻的一个元素读取出来，这样循环64次，每次读取两个</li><li>最后算出一个哈希值，和难度的目标域值比较一下，是不是符合难度要求。如果不符合，那么就把nonce换一下，重新进行计算</li></ul></li></ul></li></ul><h4 id="ethash算法的伪代码"><a href="#ethash算法的伪代码" class="headerlink" title="ethash算法的伪代码"></a>ethash算法的伪代码</h4><ul><li>1.生成一个16M的cache，cache中每个元素都是64个字节的哈希值。第一个元素是种子seed的哈希，后面每一个元素都是前一个元素的哈希。每隔30000个区块seed会变化一次<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/2eef45e9187bf974.jpg" alt=""></li></ul></li><li>2.从cache生成1G的大数据集<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/bf186c620a6f7c3f.jpg" alt=""></li></ul></li><li>3.生成整个1G数据集的过程（calc_dataset）<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/e9254baf65133721.jpg" alt=""></li></ul></li><li>4.矿工用来挖矿的函数和轻节点用来验证的函数<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/5864e98439f7111e.jpg" alt=""></li><li>上面函数的参数<ul><li>header：当前要生成的区块的块头。以太坊和比特币一样，挖矿只用到了块头的信息。</li><li>nonce：当前尝试的nonce值</li><li>full_size：大数据集中元素的个数</li><li>dataset：前面生成的大数据集</li><li>每次读取的两个相邻的哈希值是没有任何联系的。每个都是由前面那个16M的cache中的256个元素生成的，而且256个元素的位置是按照伪随机排布的。</li></ul></li><li>下面函数的参数<ul><li>header：轻节点是不挖矿的，当他收到某个矿工发布的一个区块的时候，用来验证的第一个参数header就是这个区块的块头信息</li><li>nonce：包含在这个区块中的nonce，是发布这个区块的矿工选好的</li><li>full_size：大数据集的元素个数</li><li>cache：轻节点的任务是验证nonce是否符合要求，验证用的是16M的cache</li></ul></li></ul></li><li>5.矿工挖矿的主循环<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/1b94beb32b65f737.jpg" alt=""></li><li>target：挖矿的难度目标，是可以动态调整的，nonce的可能取值是0~2的64次方</li></ul></li><li>6.前面所有函数的汇总<ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/73b59bd7dd6e125f.jpg" alt=""></li></ul></li></ul><h4 id="难度调整公式"><a href="#难度调整公式" class="headerlink" title="难度调整公式"></a>难度调整公式</h4><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/0a87cc56b7794901.jpg" alt=""></p><ul><li>ε代表设定的难度炸弹</li></ul><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/d97a9ca65c8ba1c0.jpg" alt=""></p><ul><li>-99代表难度调整的下限</li><li>第一个是父区块的难度除以2048。所以在调整难度的时候，不管是上调还是下调，都是按照x的整数倍进行调整，按照父区块难度的1/2048作为难度调整单位</li><li>第二个的ε和两个因素有关：一个是出块时间，另外一个就是有没有叔父区块。因为当前区块链的最后一个区块它包含有叔父区块的话，那么这时候系统中的货币总供应量是增加的。因为叔父区块会得到出块奖励，包含叔父区块的父区块也会得到一部分奖励。为了维持系统货币总量的稳定，那么当前正在挖的区块的难度就要提高一个等级。</li><li>有叔父区块的话，y=2，没有叔父区块的话，y=1。</li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/QqGyTA.jpg" alt="QqGyTA.jpg"></p><h4 id="难度炸弹"><a href="#难度炸弹" class="headerlink" title="难度炸弹"></a>难度炸弹</h4><p><img data-src="https://s2.ax1x.com/2019/12/19/QqJp79.jpg" alt="QqJp79.jpg"></p><ul><li>当前的区块号除以100000，向下取整，作为2的指数。后来因为难度炸弹呈指数级上升导致挖矿难度越来越大，所以以太坊就把当前的区块号减去3000000之后，作为一个假的区块号加入到难度炸弹计算公式中。也就是图中的Hi’。</li></ul><h4 id="以太坊发展的四个阶段"><a href="#以太坊发展的四个阶段" class="headerlink" title="以太坊发展的四个阶段"></a>以太坊发展的四个阶段</h4><p><img data-src="https://s2.ax1x.com/2019/12/19/QqYe2V.jpg" alt="QqYe2V.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊中的GHOST协议</title>
      <link href="/jokerboozp.github.io/2019/12/18/2019-12-18-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84GHOST%E5%8D%8F%E8%AE%AE/"/>
      <url>/jokerboozp.github.io/2019/12/18/2019-12-18-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84GHOST%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="GHOST协议"><a href="#GHOST协议" class="headerlink" title="GHOST协议"></a>GHOST协议</h4><ul><li><p>以太坊中的共识机制是GHOST协议</p></li><li><p>因为以太坊的出块时间相较比特币大幅缩短，所以出现分叉的几率也就大幅度的增加，如果以太坊沿用比特币的共识机制，那么对于大型矿池来说是占据相当大的优势的，因为他们的算力足够强，可以赶在个人挖矿用户发布新区块前找到符合条件的nonce，这样其实是对个人用户非常不友好的。</p><ul><li>所以以太坊采用了基于GHOST协议的共识机制。如下图<a id="more"></a></li><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/4925e87ce52b5c18.jpg" alt=""></li><li>上图中没有成为最长合法链的区块也会得到一定的出块奖励，具体是八分之七的出块奖励（以太坊原本的出块奖励是5个以太币，现在是3个以太币）。并且把这些区块命名为uncle block（叔父区块），对于最长合法链来说，他们都是叔父区块。 </li><li>当最长合法链发布的时候，可以把剩下的区块当作叔父区块，叔父区块可以得到八分之七的出块奖励。成为最长合法链的区块每包含一个叔父区块可以额外得到32分之1的出块奖励，最多包含两个叔父区块</li><li><strong>但是上述版本的GHOST有三个问题</strong>：<ul><li>1.只能够包含两个叔父区块，如果存在第三个，那么第三个就会什么都得不到</li><li>2.成为叔父区块的前提是，某个区块在称为最长合法链之前就知道某个区块的存在，那么他在发展下一个区块的时候就会把这个区块包含进去，从而让他成为叔父区块。但是如果称为最长合法链的区块事先并不知道某个区块的存在，那么他就没办法成为叔父区块</li><li>3.某些矿池可能因为商业利益的原因故意不包含其他区块</li></ul></li></ul></li><li><p><strong>针对上述三个问题，以太坊对GHOST协议进行了修改</strong></p></li><li><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/309a0b5bc9e06bcf.jpg" alt=""></p><ul><li>以太坊中只承认现在是最长合法链的区块往前七代的区块成为叔父区块，并且每过一代得到的出块奖励就减少八分之一的出块奖励，但是包含叔父区块的区块每次都是得到32分之1的出块奖励。这样就会鼓励产生分叉的区块尽早的进行合并，因为越早进行合并。得到的出块奖励就越多。</li></ul></li><li><p>对于比特币来说，得到奖励的途径有出块奖励和交易费两种途径。对于以太坊来说，得到奖励的途径有出块奖励和汽油费（gas fee：一个区块中包含了智能合约，执行智能合约的时候可以得到汽油费）两种方式。但是对于叔父区块来说，是得不到汽油费的，他只能得到最多八分之七的出块奖励。但是汽油费占很小的一部分，大部分都是静态的出块奖励。</p></li><li><p>对于包含了叔父区块的区块，是不需要执行叔父区块中的交易的。在验证叔父区块是否合法的时候，只需要验证叔父区块的块头是否符合难度要求即可，不需要检查区块内部的交易是否合法， 因为内部的交易反正不会执行，检不检查根本无所谓</p></li><li><p><strong>以太坊中规定只有分叉后的第一个区块才能得到uncle reward，后面的区块都不可以，这样是为了防止分叉攻击</strong>，如下图：</p><ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/a8a05f21f0a3dfa9.jpg" alt=""></li><li>以太坊中只承认分叉后的第一个区块为叔父区块。如果把整条链作为叔父区块，那么分叉攻击的代价就会大大降低。因为如果分叉攻击成功，那么他就可以回滚合法链的交易；如果分叉攻击失败，那么它也可以作为叔父区块获得出块奖励。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊中的交易树和收据树</title>
      <link href="/jokerboozp.github.io/2019/12/17/2019-12-17-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%91/"/>
      <url>/jokerboozp.github.io/2019/12/17/2019-12-17-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E4%BA%A4%E6%98%93%E6%A0%91%E5%92%8C%E6%94%B6%E6%8D%AE%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="交易树和收据树"><a href="#交易树和收据树" class="headerlink" title="交易树和收据树"></a>交易树和收据树</h4><ul><li>交易树：每次发布一个区块的时候，区块中所包含的交易会组织成一个交易树，也是一颗Merkle Tree</li><li>收据树：每个交易执行完之后，会生成一个收据，记录这个交易的相关信息。也就是说交易树和收据树上面的节点是一一对应的。增加这个收据树主要是考虑到以太坊的智能合约的过程比较复杂，所以增加这个收据树的结构有利于我们快速查询一些执行的结果。</li><li>从数据结构上来说，交易树和收据树都是MPT。使用MPT的一个好处是：它支持查找操作，就是可以通过键值从顶向下沿着这棵树进行查找。对于状态树来说，查找的键值就是账户的地址；对于交易树和收据树来说，查找的键值就是交易在发布的区块中的序号，交易的排布顺序是由发布的区块决定的<a id="more"></a></li><li>交易树和收据树都是只把当前发布的区块里面的交易组织器来；而状态树是把系统中所有账户的状态组织起来，不管这些账户和当前区块的交易有没有关系</li><li>从数据结构上来说，多个区块的状态树是共享节点的，每次新发布一个区块的时候，只有这个区块中改变状态的那些节点需要新建一个分支，其他的节点只需要沿用原来状态树上的节点就可以了；而每个区块上的交易树和收据树都是独立的，他们是不会共享节点的。</li><li>交易树和收据树的作用：提供Merkle Proof：交易树可以用来证明某个交易是否被打包到某个区块中；收据树可以证明某个交易的执行结果</li></ul><h4 id="bloom-filter"><a href="#bloom-filter" class="headerlink" title="bloom filter"></a>bloom filter</h4><ul><li>bloom filter这个数据结构可以支持比较高效的查找某个元素是不是在一个比较大的集合里面</li><li>具体讲解：<a href="https://www.cnblogs.com/liyulong1982/p/6013002.html。这里不再描述" target="_blank" rel="noopener">https://www.cnblogs.com/liyulong1982/p/6013002.html。这里不再描述</a></li><li>以太坊中的bloom filter：<ul><li>每个交易运行完之后会生成一个收据，这个收据就包含一个bloom filter，记录这个交易的类型、地址等其他信息。发布的区块在他的块头里也包含一个总的bloom filter，总的bloom filter是这个区块中所有bloom filter的并集</li><li>假如你需要查找过去十天和某个智能合约相关的所有交易。查找的方法：先查找一下每个区块的块头中bloom filter有没有需要的交易类型。如果块头中没有的话，就代表整个区块就不是该交易类型的区块。如果有的话，再去查找这个区块包含的交易的收据树里面的bloom filter，如果有的话，再找到相对应的交易，直接进行确认。</li></ul></li></ul><h4 id="以太坊的运行过程"><a href="#以太坊的运行过程" class="headerlink" title="以太坊的运行过程"></a>以太坊的运行过程</h4><ul><li>以太坊的运行过程可以把它看作是交易驱动的状态机（transaction-driven state machine）。<ul><li>状态机的状态指的是所有账户的状态，就是状态树中包含的内容</li><li>交易指的是每次发布的区块中包含的那些交易。通过执行这些交易会驱动系统从当前状态转移到下一个状态</li></ul></li></ul><h4 id="代码中的结构"><a href="#代码中的结构" class="headerlink" title="代码中的结构"></a>代码中的结构</h4><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/2e656f81b4644747.jpg" alt=""><br><img data-src="https://ftp.bmp.ovh/imgs/2019/12/c5b6ce09781008ab.jpg" alt=""><br><img data-src="https://ftp.bmp.ovh/imgs/2019/12/41080805b5901745.jpg" alt=""><br><img data-src="https://ftp.bmp.ovh/imgs/2019/12/b8b93b6a90880314.jpg" alt=""><br><img data-src="https://ftp.bmp.ovh/imgs/2019/12/160672e49bf97ece.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊中的状态数</title>
      <link href="/jokerboozp.github.io/2019/12/16/2019-12-16-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81%E6%A0%91/"/>
      <url>/jokerboozp.github.io/2019/12/16/2019-12-16-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>探究一下以太坊中用什么样的数据结构来实现基于账户的模式</strong></p></li><li><p>我们要完成的是从账户地址（account address）到账户状态（account state）的映射。</p><ul><li>以太坊中的账户地址是160bits的，一般把他表示成40个16进制的数。</li><li>状态就是外部账户和合约账户的状态<a id="more"></a></li></ul></li></ul><h4 id="trie（一个简单的数据结构：前缀树）"><a href="#trie（一个简单的数据结构：前缀树）" class="headerlink" title="trie（一个简单的数据结构：前缀树）"></a>trie（一个简单的数据结构：前缀树）</h4><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/08bffa69ab85318d.jpg" alt=""></p><ul><li><p>这个数据结构有几个特点</p><ul><li>1.在trie中每个节点的分支数目取决于key值中每个元素的取值范围。上图例子中每个都是英文单词，而且是小写的，所以每个节点的分叉数目最多是26个，加上一个结束标志位，表示到这个地方这个单词就结束了。在以太坊中，地址是表示成40个16进制的数，所以有时候把分叉树叫做branching factor</li><li>2.trie的查找效率取决于key的长度。键值越长，查找需要访问的内存次数就越多。上图例子中每个单词的长度是不一样的。以太坊中每个键值都是40。</li><li>3.哈希表可能会产生哈希碰撞。而trie是不会产生哈希碰撞的，只要两个地址不一样，最后肯定映射到树中的不同的分支</li><li>4.只要给定一组输入，不管输入的顺序如何变化，最后构造出来的树一定不变</li><li>5.更新的局部性很好，因为只需要更新涉及到的分支即可，不需要全部进行更新</li></ul></li><li><p>但是上图示例中会对存储造成浪费，因为每个节点都只有一个子节点。把每个节点进行合并的话，就可以节省存储的开销，而且会提高查找的效率，不需要一个一个往下找了。这样就出现了<strong>Patricia Tree（Patricia Trie）：经过了路径压缩的前缀树</strong></p><ul><li>压缩后的示例</li><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/4b63fcd1a8b9c31e.jpg" alt=""></li><li><strong>在键值分布比较稀疏的时候，采用路径压缩效果比较好，如下图：</strong><ul><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/b3c7401723268625.jpg" alt=""></li><li><img data-src="https://ftp.bmp.ovh/imgs/2019/12/03e18a8e790fb7c8.jpg" alt=""></li></ul></li></ul></li></ul><h4 id="MPT"><a href="#MPT" class="headerlink" title="MPT"></a>MPT</h4><ul><li>MPT就是把Patricia Tree中的普通指针换成了哈希指针。所有的账户组成一个Patricia Tree，用路径压缩提高效率，然后把普通指针换成哈希指针，所以就可以计算出一个根哈希值，这个根哈希值也是写在block header中的。这个根哈希值是状态树的根哈希值，以太坊的块头中有三个根哈希值<ul><li>这个根哈希值的作用：<ul><li>1.防止篡改：只要这个数改变，其他地方的哈希值也会发生改变。也就是说每个账户的状态都会保持他的状态不被篡改；</li><li>2.Merkle Proof：<strong>可以证明账户余额有多少</strong>：用户账户所在的分支自底向上，作为Merkle Proof发送给轻节点，轻节点就可以验证当前账户有多少钱；<strong>可以证明账户是否存在</strong>：也就是证明MPT中某个账户是不是存在的。如果存在的话，他是在什么样的分支中，把分支作为Merkle Proof发过去，可以证明他是不存在的。</li></ul></li></ul></li></ul><h4 id="Modified-MPT"><a href="#Modified-MPT" class="headerlink" title="Modified MPT"></a>Modified MPT</h4><ul><li><p>以太坊用的数据结构叫做Modified MPT。它是对MPT结构进行了一些修改。下图为示例</p></li><li><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/35a878a69b2c6420.jpg" alt=""></p><ul><li>右上角为四个账户，简单起见，账户地址只设置了7位。账户状态只显示了余额，其他的账户状态没有显示出来</li><li>Extension Node：当树中存在路径压缩就会出现Extension Node</li><li>Branch Node：存在分支时就会出现Branch Node</li></ul></li><li><p>示例2：</p></li><li><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/cdb9e46c0d32ca21.jpg" alt=""></p><ul><li>两个相邻的区块，state root就是状态树的根哈希值。可以看出虽然每个区块都有一个状态树，但是两棵树的大部分节点是共享的。只有那些发生改变的节点需要新建一个分支</li></ul></li><li><p><strong>所以系统中的全节点需要维护的不是一棵MPT，而是每次出现一个区块，都要新建一个MPT</strong>，只不过这些状态树中的大部分节点是共享的，只有少数发生变化的节点需要新建分支</p></li></ul><h4 id="以太坊中代码的数据结构"><a href="#以太坊中代码的数据结构" class="headerlink" title="以太坊中代码的数据结构"></a>以太坊中代码的数据结构</h4><ul><li><p>块头的定义</p></li><li><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/f380d7a5514237d9.jpg" alt=""></p><ul><li>ParentHash：父区块的哈希值，区块链中前一个区块的哈希值</li><li>UncleHash：叔父区块的哈希值</li><li>Coinbase：挖出区块的矿工的地址</li><li>Root，TxHash，ReceiptHash：三棵树的根哈希值（状态树，交易树，收据树）。Root是状态树的根哈希值。TxHash是交易树的根哈希值，ReciptHash是收据树的根哈希值</li><li>Bloom：Bloom Filter，和收据树是相关的。提供一种高效的查询符合条件的交易的执行结果</li><li>Difficulty：挖矿难度</li><li>GasLimit，GasUsed：和汽油费相关，智能合约需要消耗汽油费。有点类似于比特币中的交易费</li><li>Time：当前区块大致的产生时间</li><li>MixDigest，Nonce：和挖矿相关的。Nonce是最后符合挖矿要求的随机数。MixDigest是对Nonce取哈希得到的值</li></ul></li><li><p>区块的结构：</p></li><li><p><img data-src="https://ftp.bmp.ovh/imgs/2019/12/54608bc8a29e0640.jpg" alt=""></p><ul><li>header：指向block header的指针</li><li>uncles：指向叔父区块的block header的指针，而且他是个数组，因为一个区块可以有多个叔父区块</li><li>transactions：区块中的交易列表</li></ul></li></ul><h4 id="状态树中value的存储"><a href="#状态树中value的存储" class="headerlink" title="状态树中value的存储"></a>状态树中value的存储</h4><ul><li>状态树中保存的是键值对（key,value）。key就是地址，value就是状态。所以账户的状态怎么管理？他是怎么存储在状态树中的？<ul><li>他需要经过一个序列化的过程，用RLP（Recursive Length Prefix）编码做序列化之后再存储。RLP只支持一种类型，也就是nested array of bytes，也就是字节数组，可以嵌套。以太坊中所有的其他类型，整数也好，比较复杂的哈希表也好，最后都要变成字节数组。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊账户</title>
      <link href="/jokerboozp.github.io/2019/12/16/2019-12-16-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B7/"/>
      <url>/jokerboozp.github.io/2019/12/16/2019-12-16-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="以太坊账户"><a href="#以太坊账户" class="headerlink" title="以太坊账户"></a>以太坊账户</h4><ul><li>比特币中用的是基于交易的账本，这种情况下系统中并没有显式的记录每个账户上有多少钱（需要计算UTXO中的值才能知道某个账户有多少比特币）。这种模式的好处是隐私保护特别好，你有多少钱，可能自己都不清楚。但是这样带来一个问题：它使用上是比较别扭的，像用户在花费比特币的时候，需要把现在账户内的余额全部花出去，否则剩余的比特币就会作为交易费转发给矿工。这样的原因是比特币系统中没有显式的维护这种基于账户的交易的概念，他是每个交易单独进行处理的。<a id="more"></a></li><li>以太坊系统是基于账户的模型，这种模型和我们日常的银行账户是比较相似的，就是系统中要显式的记录账户中有几个以太币。以太币在验证交易是否合法的时候只需要验证账户中是否有足够的以太币即可，不需要像比特币一样验证当前账户的金额的来源。</li></ul><h4 id="replay-attack（重放攻击）"><a href="#replay-attack（重放攻击）" class="headerlink" title="replay attack（重放攻击）"></a>replay attack（重放攻击）</h4><ul><li><p>比特币面临的主要挑战是double spending attack。而以太坊这种基于账户的模型对double spending attack有 天然的防御作用</p><ul><li>因为以太坊不需要知道币的来源，只需要知道当前账户是否有足够的余额即可。你每花一次钱，系统就直接扣除账户余额的钱即可，如果有人想要double spending attack，那系统就会直接扣两次</li></ul></li><li><p><strong>重放攻击</strong>：A发布一个交易，过一段时间之后这个交易被写入到区块链中，A就认为这个交易是完成了。假设B是有恶意的，他把A的交易又在网上重新广播了一遍，其他节点就认为A又发布了一个交易，就又扣了A的余额一次</p></li><li><p>double spending attack是花钱的人不诚实，花过的钱想要再花一遍；replay attack是收钱的人不诚实，别人给你转过钱了，你想让他再转一遍</p></li><li><p>比特币当中是不可能出现重放攻击的，因为他也是一个显然的double spending。</p></li></ul><h4 id="以太坊对于重放攻击的解决办法"><a href="#以太坊对于重放攻击的解决办法" class="headerlink" title="以太坊对于重放攻击的解决办法"></a>以太坊对于重放攻击的解决办法</h4><ul><li>记录一下当前账户有史以来一共发生过多少次交易，也就是加一个计数器nonce。转账的时候这个交易次数要作为交易内容的一部分包含进去，都是收到发布交易的人的签名的保护的</li></ul><h4 id="以太坊中的账户"><a href="#以太坊中的账户" class="headerlink" title="以太坊中的账户"></a>以太坊中的账户</h4><ul><li><p>以太坊中有两类账户，一类叫做外部账户（externally owned account）：类似于比特币中的那种普通的账户，由公私钥对进行控制。本地产生一个公私钥对，谁拥有这个公私钥对，谁就对这个账户拥有所有权。</p><ul><li>外部账户的状态包括：账户余额（balance），交易次数（nonce）</li></ul></li><li><p>以太坊中的另一种账户叫做合约账户（smart contract account）：合约账户不是通过公私钥对来进行控制。合约账户也是拥有nonce的，一个合约可以调用另外一个合约，所以他就需要nonce值来记录一下调用的次数。但是<strong>合约账户不能主动发起一个交易，所有的交易只能通过外部账户发起</strong>。外部账户发起了一个交易，调用了一个合约账户，这个合约账户可以发送一个信息调用另外一个合约，但是他不能够自己平白的发起一个交易</p><ul><li>合约账户的状态包括：调用次数（nonce），代码（code），存储（storage）</li></ul></li><li><p>当你创建合约的时候，会返回给你一个地址。知道这个地址就可以调用这个合约</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币的匿名性</title>
      <link href="/jokerboozp.github.io/2019/12/12/2019-12-12-%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%8C%BF%E5%90%8D%E6%80%A7/"/>
      <url>/jokerboozp.github.io/2019/12/12/2019-12-12-%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%8C%BF%E5%90%8D%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="零知识证明（Zero-Knowledge-Proof）"><a href="#零知识证明（Zero-Knowledge-Proof）" class="headerlink" title="零知识证明（Zero Knowledge Proof）"></a>零知识证明（Zero Knowledge Proof）</h4><ul><li>零知识证明是指一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的外的任何信息。</li></ul><h4 id="同态隐藏（零知识证明的数学基础）"><a href="#同态隐藏（零知识证明的数学基础）" class="headerlink" title="同态隐藏（零知识证明的数学基础）"></a>同态隐藏（零知识证明的数学基础）</h4><ul><li>同态隐藏的三个性质：</li></ul><p><img data-src="https://vi1.xiu123.cn/live/2019/12/12/10/1003v1576118871552261404.jpg" alt=""></p><ul><li>例：Alice想要向Bob证明他知道一组数x和y使得x+y=7，同时不让Bob知道x和y的具体数值。<a id="more"></a><ul><li>利用同态隐藏进行证明</li><li>1.Alice把E(x)和E(y)的数值发给Bob</li><li>2.Bob通过收到的E(x)和E(y)计算出E(x+y)的值</li><li>3.Bob同时计算E(7)的值，如果E(x+y)=E(7)，那么验证通过，否则验证失败</li></ul></li></ul><h4 id="零币和零钞"><a href="#零币和零钞" class="headerlink" title="零币和零钞"></a>零币和零钞</h4><ul><li>零币和零钞在协议层就融合了匿名化处理，其匿名属性来自密码学保证</li><li>零币系统中存在基础币和零币，通过基础币和零币来回转换，消除旧地址和新地址的关联性，其原理类似于混币服务</li><li>零钞系统使用zk-SNARKs协议，不依赖一种基础币，区块链中只记录交易的存在性和矿工用来验证系统的正常运行所需要关键属性的证明，区块链上既不显示交易地址也不显示交易金额，所有交易通过零知识证明的方式进行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊-以太坊概述</title>
      <link href="/jokerboozp.github.io/2019/12/12/2019-12-12-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B0/"/>
      <url>/jokerboozp.github.io/2019/12/12/2019-12-12-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="以太坊简介"><a href="#以太坊简介" class="headerlink" title="以太坊简介"></a>以太坊简介</h4><ul><li>比特币和以太坊是两种最主要的加密货币。比特币被称为区块链1.0，以太坊被称为区块链2.0.</li><li>以太坊在系统设计上针对比特币的运行过程中出现的问题进行了改进，例如出块时间降低到了十几秒，一套基于Ghost协议的共识机制、挖矿时使用的mining puzzle，用权益证明替代工作量证明以及智能合约的支持。<a id="more"></a><ul><li>比特币的mining puzzle是计算密集型的，比拼的是计算哈希值的算力，这样造成的结果是挖矿设备的专业化。</li><li>以太坊的mining puzzle对内存的要求就是很高的，叫做memory hard mining puzzle，这样设计在一定程度上限制了ASIC芯片的使用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币分叉</title>
      <link href="/jokerboozp.github.io/2019/12/09/2019-12-09-%E6%AF%94%E7%89%B9%E5%B8%81%E5%88%86%E5%8F%89/"/>
      <url>/jokerboozp.github.io/2019/12/09/2019-12-09-%E6%AF%94%E7%89%B9%E5%B8%81%E5%88%86%E5%8F%89/</url>
      
        <content type="html"><![CDATA[<h4 id="比特币系统中的分叉"><a href="#比特币系统中的分叉" class="headerlink" title="比特币系统中的分叉"></a>比特币系统中的分叉</h4><ul><li>原来是一条链，现在分成了两条链，这就叫做分叉（fork）<ul><li>分叉可能是多种原因造成的。比如之前写到的：挖矿的时候，如果有两个节点差不多同一时候挖到了矿，那么这时候两个节点都可以发布区块，这时候就会出现临时性的分叉。我们把这样的分叉叫做state fork<ul><li>state fork：由于对比特币这个区块链当前的状态有分歧而造成的分叉<a id="more"></a></li><li>forking attack（分叉攻击）：也属于state fork，也是属于对比特币这个区块链当前的状态产生了分歧。只不过分叉攻击中的意见分歧是故意造成的。所以有时候把它叫做deliberate fork</li></ul></li><li>还有一种产生分叉的情况是比特币协议发生了变化。要修改比特币协议需要进行软件升级，在一个去中心化的系统里，升级软件的时候没有办法保证所有的节点同时都升级软件。这种分叉叫做protocal fork。<ul><li>protocal fork：因为对比特币协议产生了分歧，用不同版本的协议造成了分叉。根据对协议修改的内容的把不同，又可以进一步分为<strong>硬分叉（hard fork）和软分叉（soft fork）</strong></li></ul></li></ul></li></ul><h4 id="硬分叉"><a href="#硬分叉" class="headerlink" title="硬分叉"></a>硬分叉</h4><ul><li>如果对比特币协议增加一些新的特性，拓展一些新的功能，这时候那些没有升级软件的旧节点他是不认可这些新特性的，认为这些特性是非法的。这时候就是对比特币协议的内容产生了意见分歧，就会导致分叉</li><li>具体的一个例子：比特币当中的区块大小限制（block size limit）、<ul><li>比特币规定一个区块最多是1Mb大小，有些人认为1Mb的限制太小了，影响了比特币的交易速度。假设有人发布了软件更新，把区块大小从1Mb改为4Mb，假设大多数节点更新了这个软件。那么新节点就会按照大小限制为4Mb进行挖矿操作，，但是旧的节点不认同新节点的大小限制，仍然继续按照原来的节点向下挖矿，这样就造成了永久的分叉，只要旧节点不升级软件，分叉就一直存在</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/09/10/1003v1575857903747980890.jpg" style="zoom:80%;" /></li></ul></li><li>硬分叉的特点是只有系统中所有的节点都更新了版本才能避免产生永久性的分叉，如果有小部分节点不愿意更新，那么这个系统就会分成两条链</li></ul><h4 id="软分叉"><a href="#软分叉" class="headerlink" title="软分叉"></a>软分叉</h4><ul><li>如果对比特币协议加一些限制，那么原来的一些交易或者区块在这个新的协议中可能不是合法的，就会引起软分叉<ul><li>假设把区块限制更改为0.5Mb，那么新节点就不会认可大小限制为1Mb的旧节点，会沿着新节点挖出的区块进行挖矿操作，但是旧节点是认可新节点的大小限制的，所以旧节点也会沿着新节点来进行挖矿操作。旧节点原来的区块就会被舍弃，因为他不再是最长合法链。这样系统不会存在永久性的分叉</li></ul></li></ul><h5 id="实际当中可能出现软分叉的情况"><a href="#实际当中可能出现软分叉的情况" class="headerlink" title="实际当中可能出现软分叉的情况"></a>实际当中可能出现软分叉的情况</h5><ul><li>1.给某些目前协议中没有规定的域增加一些新的含义，赋予他们一些新的规则。其中一个例子就是coinbase域（每个发布的区块里有一个铸币交易coinbase transaction，它里面有一个域叫做coinbase域，这个域用来干什么没人规定，也没人检查。他的一个作用是在调整挖矿难度的时候可以把coinbase的前八个字节作为extra nonce）<ul><li>但是coinbase域不止8个字节，后面还有很多，那么有人就提出把后面的字节作为UTXO集合的根哈希值</li></ul></li><li>2.P2SH：Pay To Script Hash</li><li>软分叉的特点：系统中只需要有半数以上的节点升级了新的版本，就不会产生永久性的分叉</li></ul><h4 id="具体问题讲解"><a href="#具体问题讲解" class="headerlink" title="具体问题讲解"></a>具体问题讲解</h4><ul><li><p><strong>1.转账交易的时候如果具体的接收者不在线怎么办？</strong></p><ul><li>这个时候并不需要接收者在线。转账交易只不过是要在区块链上记录一下比特币的流向，对方当时是否连接在比特币网络里是没有影响的</li></ul></li><li><p><strong>2.假设一个全节点收到了一个转账交易，有没有可能转账交易中接收者的收款地址是这个节点以前从来没有听说过的？</strong></p><ul><li>这是可能的。比特币账户在创建的时候是不需要通知其他人的，在本地产生一个公私钥对就可以了，只有在以后产生的收款地址第一次收到钱的时候，其他节点才知道这个账户的存在</li></ul></li><li><p><strong>3.如果账户的私钥丢失了怎么办？</strong></p><ul><li>私钥丢失之后是没有办法的，这个账户就彻底作废了</li></ul></li><li><p><strong>4.如果私钥泄露了怎么办？</strong></p><ul><li>应该尽快把账户上的钱转移到另外一个账户中</li></ul></li><li><p><strong>5.Proof of Burn语句中既然无论如何返回都是false，那么交易信息是怎么写入到区块链中的？</strong></p><ul><li>这个语句是写在当前交易的输出脚本里的，所以验证当前交易合法性的时候不会执行这个语句。当前交易的输出脚本在验证当前交易合法性的时候是不会被执行的。只有后面又有一个交易想要花当前交易的输出的时候才会被执行。</li></ul></li><li><p><strong>6.如何判断是哪一个矿工最先找到合法的区块？</strong></p><ul><li>发布的区块中有一个coinbase transaction，里面有一个收款人地址，如果有人想要修改别人发布的区块来变成自己的区块，那么他就要修改这个收款人地址，但是这个地址变了之后，那么整个coinbase transaction的内容就会发生改变，就会导致Merkle Tree的根哈希值发生变化</li></ul></li><li><p><strong>7.如何判断交易费该给哪一个矿工？</strong></p><ul><li>事先并不需要知道哪一个矿工会得到交易费。只要交易的总输入大于总输出，那么只要有交易产生之后，系统就会自动把两者的差值作为交易费发给挖到矿的矿工</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币挖矿</title>
      <link href="/jokerboozp.github.io/2019/12/08/2019-12-08-%E6%AF%94%E7%89%B9%E5%B8%81%E6%8C%96%E7%9F%BF/"/>
      <url>/jokerboozp.github.io/2019/12/08/2019-12-08-%E6%AF%94%E7%89%B9%E5%B8%81%E6%8C%96%E7%9F%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><ul><li>1.比特币中存在两种节点：全节点、轻节点<ul><li><strong>全节点</strong>：<ul><li>1.一直在线</li><li>2.在本地硬盘上维护完整的区块链信息</li><li>3.在内存里维护UTXO集合，以便快速检验交易的正确性</li><li>4.监听比特币网络上的交易信息，验证每个交易的合法性<a id="more"></a></li><li>5.决定哪些交易会被打包进区块。缺省状况下，只要是合法的交易，并且交易费符合要求，就会被打包到区块中。</li><li>6.监听别的矿工挖出来的区块，验证其合法性。从3个方面进行验证<ul><li>1.这个区块中的每个交易都要合法，包括铸币交易（有没有篡改block reward）</li><li>2.发布的区块是不是符合难度要求的，通俗的来说，就是检查以下block header取哈希值之后，前面有没有足够多的0，同时也要检查一下block header里面难度目标域值设置是不是正确的，然后这个全节点还要按照比特币协议的要求每两周调整挖矿难度</li><li><ol start="3"><li>检查这个区块是在延伸最长合法链</li></ol></li></ul></li><li>7.挖矿<ul><li>决定沿着哪条链挖下去？<ul><li>缺省状况下，应该是沿着最长合法链挖下去</li></ul></li><li>当出现等长的分叉的时候，选择哪一条分叉？<ul><li>缺省情况下，选择的是最先监听到的那一个分叉</li></ul></li></ul></li></ul></li><li><strong>轻节点</strong>：<ul><li>1.不是一直在线</li><li>2.不用保存整个区块链，只要保存每个区块的块头（大小和全节点相比差了1000倍）</li><li>3.不用保存全部交易，只要保存与自己相关的交易</li><li>4.无法检验大多数交易的合法性，只能检验与自己相关的那些交易的合法性</li><li>5.无法检测网上发布的区块的正确性</li><li>6.可以验证挖矿的难度。因为挖矿的时候计算哈希值只用到了块头的信息，而块头的信息轻节点是保留的</li><li>7.只能检测哪一个是最长链，但是不知道哪一个是最长合法链</li></ul></li><li><strong>比特币的安全性保证</strong><ul><li>比特币的安全性是由两方面来保证的：<ul><li>一方面是密码学上的保证（别人没有你的私钥，就没有办法伪造你的签名，所以也就不能把你账户上的钱转走）</li><li>另一方面是共识机制</li></ul></li></ul></li></ul></li></ul><h4 id="挖矿设备"><a href="#挖矿设备" class="headerlink" title="挖矿设备"></a>挖矿设备</h4><ul><li><strong>挖矿设备的演变趋势是越来越专业化</strong><ul><li>最早的时候大家使用的是普通的PC，也就是CPU来进行挖矿操作。但是这样是很不划算的，因为计算机中的大部分内存都是闲置的，挖矿只用到其中很小的一部分内存；CPU当中的大部分部件也是闲置的，因为挖矿当中的计算哈希值操作只用到了通用CPU中的很少的一部分指令；硬盘和其他很多资源也都是闲置的。所以随着比特币挖矿难度的提高，用普通CPU挖矿就变得不具备性价比。</li><li>后来就开始采用GPU挖矿。GPU主要用于大规模的并行计算。但是利用GPU也会有很多浪费，因为GPU是为了通用并行计算而设计的，用来挖矿的话它里面很多部件仍是处于闲置状态的，比如说用于浮点数运算的那些部件</li><li>现在一般使用ASIC芯片进行挖矿操作（Application Specific Integrated Circuit）。整个芯片就是为了挖矿而设计的，没有多余的操作。为一种加密货币设计的ASIC芯片只能用于这一种加密货币的挖矿操作，其他加密货币不能用，除非这两种加密货币用的是同一个mining puzzle</li></ul></li><li><strong>挖矿的另一个趋势是大型矿池的出现，这样减轻了矿工的负担，收益也更加的稳定，但是也使发动51%攻击更容易了</strong><ul><li>一个矿池一般有一个矿主（pool manager）和许多矿工（miner），矿主连接着许多矿工，矿工只负责计算哈希值的操作，而全节点的其他职责都由这个矿主来承担</li><li>某个矿工挖矿成功之后，会把出块奖励进行分配，分配的原则是：<ul><li>比如说现在挖矿的要求是前面必须有70个0，这时候矿主就会向下另外发一个降低难度的请求，只需要挖到前面有60个0即可，这样挖到的叫做一个share，当下面的矿工每挖到符合难度要求的share后，就会提交给矿主，提交的这个share叫做almost valid block。矿主就会把提交的share作为证明这个矿工工作量的数据，在挖矿成功之后，按照工作量进行分配奖励</li><li>这样就有一个问题：会不会有的矿工在挖到符合条件的区块后不提交给矿主，而是自己发布出去；当找到符合矿主条件的share之后，把他提交给矿主。相当于自己独吞出块奖励？<ul><li>这样是不可能做到的。因为每个矿工的任务是由矿主来分配的，矿主负责组装好一个区块，然后交给矿工去尝试各种各样的nonce。而且在coinbase transaction里面包含一个收款人的地址，这个地址是矿主的地址，所以矿工挖到区块之后，如果他不提交给矿主，他自己发布出去是没有用的，里面的收款地址是矿主的，他取不出来钱。</li></ul></li></ul></li></ul></li><li>矿池在各个国家的分布比例</li><li><img data-src="https://vi2.xiu123.cn/live/2019/12/08/13/1003v1575781769101889269.jpg" alt=""></li><li>当一个攻击者的算力超过了51%，那么他就可以做分叉攻击或者封锁境域攻击（boycott）</li></ul><h4 id="比特币脚本"><a href="#比特币脚本" class="headerlink" title="比特币脚本"></a>比特币脚本</h4><ul><li><strong>一个交易实例</strong></li><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/13/1003v1575782629221257121.jpg" alt=""></li><li><strong>上图交易结构</strong></li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/13/1003v1575782694712830125.jpg" alt=""><ul><li>locktime：用来设定交易的生效时间，现在是0，也就是立即生效</li><li>blockhash：当前交易所在的区块的哈希值</li><li>confirmations：当前交易有多少个确认信息</li><li>time：当前交易产生的时间</li><li>block time：当前交易所在的区块产生的时间</li></ul></li><li><strong>交易的输入结构</strong></li><li><img data-src="https://vi3.xiu123.cn/live/2019/12/08/13/1003v1575782908581353622.jpg" alt=""><ul><li>txid：当前交易的比特币是之前哪一个交易的输出，并把之前的交易取哈希</li><li>vout：表示当前交易的比特币是之前交易里面的第几个输出</li><li>scriptSig：输入脚本</li></ul></li><li><strong>交易的输出结构</strong></li><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/13/1003v1575783147649958855.jpg" alt=""><ul><li>value：输出的金额，也就是给对方的比特币金额</li><li>n：序号，代表这是这笔交易里面的第几个输出</li><li>scriptPubKey：输出脚本</li><li>reqSigs：当前输出需要多少个签名才能够兑现</li><li>type：输出的类型。例子中的是pubkeyhash：公钥的哈希</li><li>address：输出的地址</li></ul></li><li><strong>脚本的执行流程</strong></li><li><img data-src="https://vi3.xiu123.cn/live/2019/12/08/13/1003v1575783407037231182.jpg" alt=""></li><li><strong>验证交易是否合法的操作</strong></li><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/13/1003v1575783910985064112.jpg" alt=""><ul><li>把上一个交易的输出脚本和当前交易的输入脚本组合在一起执行，如果没有报错，那么交易就是合法的。</li><li>现在使用的方法分别执行这两个脚本，先执行输入脚本，如果没有出错，那么再执行输出脚本，如果能顺利执行，最后栈顶的结果是非零值，也就是true，则代表交易是合法的。</li><li>如果一个交易有多个输入的话，那么每个输入脚本都要和所对应的交易的输出脚本匹配之后来进行验证，全都验证通过，这个交易才是合法的</li></ul></li><li><strong>输入输出脚本的几种形式</strong><ul><li><strong>1.第一种形式</strong>：<img data-src="https://vi0.xiu123.cn/live/2019/12/08/13/1003v1575784197888637371.jpg" alt="第一种形式"><ul><li>输出脚本里直接给出收款人的公钥，第二行的checksig是检查签名的操作</li><li>输入脚本中直接给出签名即可（这个签名是用私钥对这个输入脚本所在的整个交易的签名）</li><li>脚本执行过程：<ul><li>1.把输入脚本里面提供的签名压入栈</li><li>2.把输出脚本里面提供的公钥压入栈</li><li>3.把栈顶的这两个元素弹出，用公钥检查签名是否正确。</li><li>4.如果正确的话，返回true，说明验证通过</li></ul></li><li>实例：</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/13/1003v1575784505943730756.jpg" alt=""></li></ul></li><li><strong>2.第二种形式</strong>：<img data-src="https://vi2.xiu123.cn/live/2019/12/08/13/1003v1575784580307066196.jpg" alt="第二种形式"><ul><li>和上面的方法的区别是输出脚本里面没有直接给出收款人的公钥，给出的是公钥的哈希，公钥是在输入脚本里面给出的。输入脚本既要给出签名，也要给出公钥。输出脚本里的DUP、HASH160是为了验证签名的正确性</li><li>这种形式是最常用的形式</li><li>脚本执行：</li><li><img data-src="https://vi2.xiu123.cn/live/2019/12/08/13/1003v1575784778162171235.jpg" alt=""><ul><li>前两条语句来自输入脚本，后面的语句来自输出脚本</li><li>1.把签名压入栈</li><li>2.把公钥压入栈</li><li>3.把栈顶的元素复制一遍（所以栈顶又多了一个公钥）</li><li>4.把栈顶元素弹出来，取哈希，然后把得到的哈希值再压入栈（所以栈顶变成了公钥的哈希值）</li><li>5.把输出脚本里提供的公钥的哈希值压入栈（栈顶现在是输出脚本里的收款人的公钥的哈希值）</li><li>6.弹出栈顶的两个元素，比较他们是否相等（防止有人冒名顶替，用他自己的公钥替换别人的公钥）</li><li>7.弹出栈顶的两个元素，用公钥检查签名是否正确</li></ul></li><li>实例：</li><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/14/1003v1575785111279044523.jpg" alt=""></li></ul></li><li><strong>3.第三种形式</strong>：<img data-src="https://vi2.xiu123.cn/live/2019/12/08/14/1003v1575785191110969366.jpg" alt="第三种形式"><ul><li>输出脚本提供的不是公钥的哈希，而是收款人提供的一个脚本的哈希，这个脚本叫做redeemScript（赎回脚本）</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/14/1003v1575785296501990723.jpg" alt=""></li><li>实例：用P2SH实现P2PK</li><li><img data-src="https://vi2.xiu123.cn/live/2019/12/08/14/1003v1575785368897737892.jpg" alt=""><ul><li>输入脚本：签名、序列化的赎回脚本</li><li>赎回脚本：公钥，并用checksig检查签名</li><li>输出脚本：用来验证输入脚本里面给出的赎回脚本是否正确</li></ul></li><li>第一阶段的验证：<ul><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/14/1003v1575785513357455503.jpg" alt=""></li><li>前两行来自输入脚本，后面来自输出脚本<ul><li>把输入脚本的sig压入栈</li><li>把序列化的赎回脚本压入栈</li><li>对赎回脚本进行取哈希操作</li><li>把输出脚本中给出的哈希值压入栈</li><li>用equal比较压入栈的两个哈希值是否相等。如果相等，那么这两个哈希值就从栈顶消失。第一阶段的验证就结束了</li></ul></li></ul></li><li>第二个阶段的验证：<ul><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/14/1003v1575785836058934316.jpg" alt=""><ul><li>首先把输入脚本提供的序列化的赎回脚本进行反序列化，这是每个节点进行的操作，脚本中不显示</li><li>把公钥压入栈</li><li>同checksig检测一下输入脚本里给出的sig的正确性</li><li>验证完成之后，整个P2SH才算执行完成</li></ul></li></ul></li></ul></li><li><strong>多重签名</strong><ul><li>比特币系统中一个输出可能需要多个签名才能把钱取出来。比如某个公司的账户，需要5个合伙人中至少3个人的签名才能把账户中的钱取走。这样就为私钥的泄露提供了一些安全的保护。 </li><li>脚本示例</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/14/1003v1575786644965020240.jpg" alt=""><ul><li>多重签名是通过checkmultisig实现的，也就是上图的最后一行<ul><li>输出脚本里给出n个公钥，同时指定一个域值m。输入脚本只需要提供这n个公钥对应的签名中任意m个合法的签名就能通过验证</li><li>输入脚本的第一行有一个红色的叉子，他是因为比特币中checkmultisig的实现有一个bug，执行的时候会从堆栈上多弹出一个元素，这个bug现在已经没有办法改了，因为这是个去中心化的系统，如果想通过软件升级的方法去修复这个bug，这个代价是很大的，需要硬分叉。所以实际采用的方案是在输入脚本里往栈上多加进去一个没有用的元素。第一行这个红叉就代表这个没用的元素。</li><li>给出的这m个签名的相对顺序，要和他们在n个公钥中的相对顺序是一致的才行</li></ul></li></ul></li><li>脚本的执行过程</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/14/1003v1575787093112128893.jpg" alt=""><ul><li>这个例子中假设三个签名中给出两个就行，而且可以看出这两个签名给出的相对顺序也是和他们在公钥中的相对顺序是一样的</li><li>前三行是输入脚本，剩下的为输出脚本</li><li>1.第一行的false，就是我们说的多余的元素，首先把他给压入栈</li><li>2.把两个签名依次压入栈</li><li>3.把m的值压入栈</li><li>4.把三个公钥压入栈</li><li>5.把n的值压入栈</li><li>6.最后执行checkmultisig，查看这个堆栈里是不是包含了这三个签名中的两个。如果是的话，验证通过。</li></ul></li><li>这种方法对于用户在购物的时候很不方便，因为用户需要填写他购买商品网站所提供的公钥中的其中几个才能通过验证。这就给用户生成转账交易带来一些不方便的地方。<strong>这时候我们就可以用P2SH实现多重签名</strong></li></ul></li><li><strong>用P2SH实现多重签名</strong></li><li>示例：</li><li><img data-src="https://vi1.xiu123.cn/live/2019/12/08/14/1003v1575787554846820739.jpg" alt=""></li><li>他的本质是把复杂度从输出脚本转移到了输入脚本，输出脚本只需要给出赎回脚本的哈希值即可。</li><li>赎回脚本中要给出n个公钥，还有n和m的值。赎回脚本是在输入脚本里面提供的。也就是说是由收款人提供的。这样电商只需要在网站上公布这个赎回脚本的哈希值，然后用户生成转账交易的时候，把这个哈希值包含在输出脚本里就可以了。至于这个电商用什么样的多重签名规则，对用户来说是不可见的，用户没必要知道</li><li>输入脚本是电商在花掉这笔输出的时候提供的，其中包含这个赎回脚本的序列化版本，同时还包含让这个赎回脚本验证通过所需要的m个签名。将来如果这个电商改变了所使用的多重签名规则，那么只需要改变这个输入脚本和赎回脚本里的内容，然后把新的哈希值公布出去就可以了。对用户来说，只不过是付款的时候要包含的哈希值发生了变化 </li><li>脚本执行过程：</li><li>第一阶段<ul><li>输入脚本为前四行，后面为输出脚本</li><li><img data-src="https://vi2.xiu123.cn/live/2019/12/08/14/1003v1575788148833459379.jpg" alt=""></li><li>1.把多余的元素压入栈</li><li>2.依次把两个签名压入栈</li><li>3.把序列化的赎回脚本压入栈</li><li>4.把赎回脚本取哈希</li><li>5.把输出脚本里提供的哈希值压入栈</li><li>6.判断这两个哈希值是否相等。这样第一阶段就完成了</li></ul></li><li>第二阶段：</li><li>把赎回脚本展开后执行</li><li><img data-src="https://vi0.xiu123.cn/live/2019/12/08/14/1003v1575788373930617273.jpg" alt=""><ul><li>1.把m压入栈</li><li>2.把三个公钥压入栈</li><li>3.把n压入栈</li><li>4.检查多重签名的正确性</li></ul></li><li>实例：</li><li><img data-src="https://vi2.xiu123.cn/live/2019/12/08/15/1003v1575788495675814800.jpg" alt=""></li><li><strong>4.第四种形式</strong>：<img data-src="https://vi1.xiu123.cn/live/2019/12/08/15/1003v1575788551781975024.jpg" alt="第四种形式"><ul><li>这个脚本是销毁比特币的一种方法。<ul><li>销毁比特币的两个应用场景：</li><li>1.有些小的币种，要求销毁一定数量的比特币，才能够得到这个币种。这种小币种叫做AltCoin（Alternative Coin）。除了比特币之外的其他小的加密货币都可以认为是AltCoin</li><li>2.往区块链中写入一些内容。区块链是一个不可篡改的账本，有人就利用这种特性往里面添加一些需要永久保存的内容。</li></ul></li><li>任何用户都可以用这种方法销毁比特币，来换取往区块链中写入一些数据的机会</li><li>这种脚本的好处是矿工看到这种脚本的时候，知道它里面的输出永远不可能兑现，所以就没有必要把他保存在UTXO里面，这样对全节点是比较友好的。</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币系统的具体实现</title>
      <link href="/jokerboozp.github.io/2019/12/07/2019-12-07-%E6%AF%94%E7%89%B9%E5%B8%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/jokerboozp.github.io/2019/12/07/2019-12-07-%E6%AF%94%E7%89%B9%E5%B8%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h4><ul><li>区块链是一个去中心化的账本，而比特币采用的是一种基于交易的账本模式（transaction-based ledger），还有一种是基于账户的账本模式（account-based ledger）。每个区块中记录的是交易信息，但是系统当中并没有哪一个地方显式的记录每一个账户中有多少钱，这个需要用交易记录来推算</li><li><strong>比特币中的全结点要维护一个叫做UTXO的数据结构（Unspent Transaction Output）</strong>：区块链上有很多交易，有些交易的输出可能已经被花掉了，有些还没有被花掉，所有那些还没有被花掉的输出的集合就叫做UTXO。一个交易可能有多个输出<a id="more"></a></li><li>UTXO集合中的每个元素要给出产生这个输出的交易的哈希值以及他在这个交易中是第几个输出</li><li>UTXO的主要作用是检测double spending，每发生一次交易，就要检测用户所花掉的比特币是不是在UTXO中，如果不在，则表示是非法的。所以全节点要在内存中维护UTXO，以便快速检测double spending</li><li>每个交易会消耗掉一些输出，但是又会产生一些新的输出</li><li>每个交易都要保证总输出=总输入（total inputs=total outputs）。但是有些交易可能会产生总输出略微小于总输入的情况，这里面的差额就作为交易费给获得记账权发布区块的那个节点<ul><li>结点消耗资源来竞争记账权，一是为了获得出块奖励，发布一个区块，可以得到一定数量的比特币作为报酬。但是光有这个出块奖励可能是不够的，发布区块的那个结点为什么要把你的交易打包在他的区块中？这样做对他有什么好处？比如某一个比较自私的结点，他可能发布区块的时候只包含他自己的那个交易，别的交易都不管，因为把别的交易打包进去对他自己没什么好处，而且还有一定的代价，因为你需要验证这个交易的合法性，而且区块中的交易多的话占用的带宽也比较多，在网络上传播的速度也会变慢。所以只存在出块奖励的话就会出现有的节点不管别人的交易，只存储自己的交易。<strong>所以比特币系统就设计了第二个机制，也就是上面说的交易费（transaction fee）</strong></li></ul></li></ul><h4 id="区块链中的简单例子"><a href="#区块链中的简单例子" class="headerlink" title="区块链中的简单例子"></a>区块链中的简单例子</h4><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqdrg1.png" alt="Qqdrg1.png"></p><ul><li>各个单词的解释：<ul><li>Number Of Transaction：当前区块中包含的交易数量</li><li>Output Total：总共输出的比特币数量</li><li>Transaction Fees：总的交易费</li><li>Block Reward：出块奖励</li><li>Height：区块的序号</li><li>TimeStamp：当前区块的时间戳</li><li>Difficulty：挖矿的难度（每隔2016个区块就要调整难度，保持出块时间在十分钟左右）</li><li>Nonce：挖矿时尝试的随机数</li><li>Hash：当前区块的块头的哈希值</li><li>Previous Block：前一个区块的块头的哈希值</li><li>Merkle Root：当前区块中包含的交易组成的Merkle Tree的根哈希值</li></ul></li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/QqdgHO.png" alt="QqdgHO.png"></p><ul><li>nNonce：代表的是32位的无符号整数，挖矿时要不断调整nonce的取值，但是这个nonce最多只有2的32次方个可能的取值。就算把nonce的值全部尝试一遍，也可能找不到符合难度要求的，因为比特币的价格上涨的太快，挖矿的人过多，挖矿难度已经被调的非常高，单纯靠调整block header里面nonce的域，比较大的概率是找不到符合要求的，搜索空间不够大。所以我们可以调节block header中其他域的范围（这里直接给出结论：可以更改Merkle Tree的根哈希值和区块的产生时间）</li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqdbb8.png" alt="Qqdbb8.png"></p><ul><li><p>上图是block header中各个域的描述</p><ul><li>version：当前使用的比特币协议的版本号，这个是无法更改的</li><li>pervious block header hash：前一个区块块头的哈希值，这个无法更改</li><li>merkle root hash：Merkle Tree的根哈希值</li><li>time：当前区块产生的时间。这个是有一定的调整余地的，比特币系统不要求非常精准的时间，可以对这里的时间在一定范围内进行调整</li><li>nBits：挖矿时用到的目标域值，这个是编码后的版本，因为他只有四个字节，这个只能按照协议中的要求定期进行调整，不能随意更改</li><li>nonce：通常调整的随机数nonce</li></ul></li><li><p><strong>为什么可以更改Merkle Tree的根哈希值？</strong></p><ul><li>如图是一个小型区块链</li><li><img data-src="https://s2.ax1x.com/2019/12/19/QqdLVS.png" alt="QqdLVS.png"></li><li>首先，左下角的tx是铸币交易，我们更改了这个交易的域之后，它对应的哈希值就会发生变化，从而一路网上影响到block header根哈希值（如下）</li><li><img data-src="https://s2.ax1x.com/2019/12/19/QqdX5Q.png" alt="QqdX5Q.png"></li><li>所以我们可以通过更改铸币交易的域来更改最终的根哈希值。所以真正挖矿的时候只有两层循环：外层循环调整这个铸币交易的extra nonce，算出block header里面的根哈希值之后，内层循环再调整header里面的nonce</li></ul></li><li><p>如图是一个比特币转账交易</p></li><li><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqdz2n.png" alt="Qqdz2n.png"></p><ul><li>上面写的output指的是说他们花掉的是之前某个交易的output，这笔交易的两个输出还没有被花掉（Unspend）</li><li>输入和输出都是用脚本的形式来指定，比特币系统中验证交易的合法性就是把当前交易的Input Scripts和上一个提供币的来源的交易的Output Scripts配对后执行来完成的。如果输入脚本和输出脚本拼接在一起能够顺利执行，不出现错误，那么这个交易就是合法的。</li></ul></li><li><p>下图是一个错误示例</p></li><li><p><img data-src="https://s2.ax1x.com/2019/12/19/QqwFVU.png" alt="QqwFVU.png"></p><ul><li>上图在求哈希的过程中把所有信息组合在一起求的哈希，实际上只需要block header中的信息来求哈希值</li></ul></li></ul><h4 id="挖矿过程的概率分析"><a href="#挖矿过程的概率分析" class="headerlink" title="挖矿过程的概率分析"></a>挖矿过程的概率分析</h4><ul><li>挖矿就是不断的尝试各种nonce来求解puzzle，每次尝试nonce可以看作是一个Bernoulli trial（伯努利试验：在同样的条件下重复地、相互独立地进行的一种随机试验，其特点是该随机试验只有两种可能结果：发生或者不发生。典型的示例就是掷硬币）</li><li>伯努利试验的一个特性就是无记忆性，也就是说，无论你尝试多少次，他的概率一直就是这么大，不可能随着你尝试的次数越多发生改变。</li><li>应用到挖矿上也就是说：每个新的区块产生的时间是10分钟，在过了十分钟之后再进行当前挖矿操作，他并不会减少时间，依旧需要十分钟才能产生下一个区块（正常思想是你进行了十分钟，那么你就积累了十分钟的工作量，那么你越往后应该是越快能挖到矿）。这样的操作反而保证了挖矿的公平性（因为算力越大的机器，他们能够在十分钟内尝试的nonce越多，在超过十分钟后，就需要重新开始，否则对于算力小的设备就会产生不成一直维持在某一个值不会改变）。</li></ul><h4 id="比特币的总量分析"><a href="#比特币的总量分析" class="headerlink" title="比特币的总量分析"></a>比特币的总量分析</h4><ul><li>出块奖励（block reward）是系统中产生新的比特币的唯一途径，而出块奖励是每隔四年就要减半的（具体运算过程省略）。根据Geometric series来计算，可以算出比特币的所有数量大概是2100万个。比特币的稀缺性是人为造成的。</li><li>对于一个去中心化的，没有membership的系统，挖矿提供了一种根据算力来进行投票的有效手段，只要大部分算力是掌握在诚实的结点手里，系统的安全性就能够得到保证</li></ul><h4 id="比特币的安全性分析"><a href="#比特币的安全性分析" class="headerlink" title="比特币的安全性分析"></a>比特币的安全性分析</h4><ul><li>假设大部分算力是掌握在诚实的矿工手中，我们能得到什么样的安全保证？能不能保证写入区块链的交易都是合法的？</li><li>挖矿给的只是概率上的保证，只能说有比较大的概率下一个区块是由一个诚实的矿工所发布的，但是不能保证记账权不会落到有恶意的结点手里。<ul><li>假设有一个结点获得了记账权，他也不能够把其他人的钱转走，因为他不知道其他用户的私钥；如果他强行把一个交易写入到区块链中，诚实的结点并不会接受这个非法交易，他只会沿着上一条合法的区块进行挖矿操作。判断攻击是否成功的标准是看诚实的结点是不是认可这个交易。</li><li>对于double spending，比特币系统默认的是在当前交易写入区块链之后，等待之后六个区块的生成，当生成六个区块后，才认为写入到区块链的那个交易是不可篡改的。</li></ul></li><li>比特币协议中规定每个区块的大小不能超过1Mb</li></ul><h4 id="Selfish-Mining"><a href="#Selfish-Mining" class="headerlink" title="Selfish Mining"></a>Selfish Mining</h4><ul><li>正常情况下，我们挖到一个区块马上就发布出去，因为你不发布，别人把这个区块发布之后，你就得不到出块奖励了</li><li>而selfish mining是挖到区块之后先不发布</li><li>具体作用先按下不表</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币网络</title>
      <link href="/jokerboozp.github.io/2019/12/07/2019-12-07-%E6%AF%94%E7%89%B9%E5%B8%81%E7%BD%91%E7%BB%9C/"/>
      <url>/jokerboozp.github.io/2019/12/07/2019-12-07-%E6%AF%94%E7%89%B9%E5%B8%81%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="比特币网络的工作原理"><a href="#比特币网络的工作原理" class="headerlink" title="比特币网络的工作原理"></a>比特币网络的工作原理</h4><ul><li>比特币网络的底层是P2P网络</li><li>比特币网络中的所有结点都是平等的，如果你想加入这个网络，那么你就需要知道至少一个种子结点（seed node），种子结点会告诉你他所知道的这个网络中的其他结点。</li><li>结点之间是通过TCP来通讯的，这样有利于穿透防火墙。离开的时候不需要通知其他结点，只需要退出你的应用程序即可，别的节点没有收到你的消息，过了一段时间之后就会把你给删掉<a id="more"></a></li><li>比特币网络的设计原则是简单、鲁棒，而不是高效（simple,robust,but bot efficient）。消息传播在结点中采用flooding的方式，结点第一次听到某个消息的时候，把他传播给其他所有的邻居结点，同时记录下这个消息已经收到过了；下次再收到这个消息的时候，就不需要再转发给邻居结点了，邻居结点的选取是随机的，没有考虑底层的拓扑结构。比如一个在加利福尼亚的结点，他选的邻居节点，他选的邻居节点可能就是在阿根廷的。这样做的好处是增强鲁棒性，但是牺牲的是效率（你向身边的人转账，和向美国的人转账速度是差不多的）</li><li>比特币系统中每个结点都要维护一个等待上链的交易的集合</li><li>比特币网络的传播是属于best effort。一个交易发布到比特币网络上，不一定所有的结点都能收到，而且不同的节点收到同一消息的顺序也不一定是一样的。网络传播存在延迟，而且这个延迟有时候可能会很长，而且有的节点可能不按照比特币协议的要求进行转发</li></ul><h4 id="比特币的挖矿难度调整"><a href="#比特币的挖矿难度调整" class="headerlink" title="比特币的挖矿难度调整"></a>比特币的挖矿难度调整</h4><ul><li><strong>挖矿就是不断的尝试block header中的nonce值，使整个block header的哈希值小于等于给出的目标域值（H(block header&lt;=target)）。target越小，挖矿难度是越大的。调整挖矿难度就是调整目标空间在整个输出空间所占的比例</strong></li><li>比特币用的哈希算法是SHA-256，这个算法产生的值是256位的，所以整个输出空间的大小是2的256次方</li><li>挖矿难度和目标域值是成反比的{diffictlty=(difficulty_1_target)/target——其中difficulty_1_target表示的是挖矿难度等于1的时候所对应的目标域值}。挖矿难度最小就是1，这时候对应的目标域值是一个非常大的数</li><li><strong>出块时间太短会有什么问题？</strong><ul><li>出块时间太快，就会导致产生过多的分叉，因为会出现多个结点同时挖到矿的情况。分叉如果过多的话，对于系统达成共识，是没有好处的，而且也危害到系统的安全。<strong>比特币协议是假设大部分算力是掌握在诚实的矿工手里，系统当中的总算力越强，安全性就越好，要发动51%攻击需要的算力就越大</strong></li></ul></li></ul><h4 id="具体怎么调整挖矿难度"><a href="#具体怎么调整挖矿难度" class="headerlink" title="具体怎么调整挖矿难度"></a>具体怎么调整挖矿难度</h4><ul><li>比特币中规定每隔2016个区块就要重新调整一下目标域值，大概是每两个星期调整一下。调整的公式为<code>target=target*(actual time/expected time)</code>:acutal time指的是系统中最近产生的2016个区块实际花费的时间；expected time指的是2016乘10。在实际的操作中有四倍的限制，例如实际花费的时间非常长，超过了8个星期，那么我们在计算的时候也只按照8个星期来计算，所以目标域值不会一次性超过四倍；同理，当实际时间非常短，不到二分之一星期，那么我们计算的时候也按照二分之一来算，所以目标一致最小也不会降低四倍</li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqdk9A.png" alt="Qqdk9A.png"></p><ul><li>上图这个公式和上面所说的目标域值相同，都是正确的，只不过这个图片所示的是挖矿难度，而上面我写的是目标域值，目标域值和挖矿难度成反比，所以图片中是用2个星期除以实际时间。实际比特币代码中用的是目标域值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链-比特币的共识协议</title>
      <link href="/jokerboozp.github.io/2019/12/06/2019-12-06-%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/"/>
      <url>/jokerboozp.github.io/2019/12/06/2019-12-06-%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="数字货币与纸质货币的区别"><a href="#数字货币与纸质货币的区别" class="headerlink" title="数字货币与纸质货币的区别"></a>数字货币与纸质货币的区别</h4><ul><li>纸质货币是中心化的记账系统，而数字货币是去中心化的记账系统。</li><li>数字货币的主要挑战就是怎样避免double spending attack<ul><li>double spending attack是指：纸质货币是由央行管控的，所以可以避免造假，但是数字货币直接复制一份就可以花出去，这就是double spending attack</li></ul></li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqah60.png" alt="Qqah60.png"></p><ul><li>上图是一个简单的区块链交易<a id="more"></a></li><li>有两个哈希指针，一个是验证交易是否被改动，一个是验证当前交易的来源</li><li>B给了F5个比特币，别的区块接收到交易之后，会从当前区块往B的来源回推，就会发现B已经花掉了5个比特币，所以交易是非法的</li><li>A——B，A需要B的地址，A的签名，地址是通过公钥推算出来的（B的公钥取哈希，经过一些转换得到的）；B需要知道A的公钥，这样就可以知道是谁的转账</li><li><strong>私钥签名，公钥验证</strong></li><li>每个交易都有输入和输出两部分<ul><li>输入部分：说明币的来源，自己的公钥</li><li>输出部分：给出收款人的公钥的哈希</li><li><strong>加密指的是用接收者的公钥进行加密操作，接收者收到之后用私钥解密</strong></li><li>每个交易的输入是一段脚本，包括给出的公钥，也是在输入的脚本里指定的；每个交易的输出也是一段脚本；</li><li>验证每个交易是不是合法的，就是要把当前这个交易的输入脚本和前面那个交易的输出脚本拼接在一起，看能不能顺利执行，如果能执行，就说明是合法的。如下图所示</li></ul></li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/QqaImT.png" alt="QqaImT.png"></p><ul><li>实际情况中，每个区块可以包含很多个交易，这些交易就组成一个Merkle Tree，每个区块分为block header和block body两部分</li><li>Block header 包含了一些区块的宏观信息：用的是哪一个版本的协议，区块链中指向前一个区块的哈希指针，Merkle Tree的根哈希值，挖矿的难度目标域值target（nBits），随机数nonce</li><li>Block body包含了交易列表</li></ul><h4 id="分布式共识"><a href="#分布式共识" class="headerlink" title="分布式共识"></a>分布式共识</h4><ul><li><strong>那么这些交易内容是怎么写到区块链中的？</strong><ul><li>每个节点可以发布交易，每个账户也可以发布交易，这个交易是广播给所有结点的，谁来决定哪些交易应该被放在下一个区块中，用什么样的顺序排放？</li><li>每个节点独自决定，在本地构造出单独的区块链，这样会导致一致性问题。区块链是一个去中心化的账本，所以这样一个账本的内容要有一个统一的内容，也就是账本的内容要取得分布式的共识（distribated consensus）</li></ul></li><li>分布式共识的一个简单的例子：分布式的哈希表<ul><li>首先介绍两个结论：</li><li>1.FLP结论：在一个异步系统里，网络延时没有上限，如果系统中有一个成员是faulty的，就没办法达成共识</li><li>2.CAP Theorem：任意一个分布式系统，下面的三个性质对多只能满足两个（Consistency：一致性；Availability：可用性；Partition tolerance：分区容差）</li></ul></li><li>分布式共识一个比较著名的协议：Paxos（他保证了一致性）</li><li><strong>比特币中的共识协议</strong><ul><li>特需要解决的问题是有些节点是有恶意的，这样怎么设计一个共识协议。</li><li>比特币设计了一个投票系统，利用计算力来进行投票</li><li>每个节点都可以在本地组装出一个候选区块，把他认为合法的交易放在这个区块里，然后就开始尝试各种nonce值，如果某个结点找到了H(block header)小于等于target的nonce，那么他就获得了记账权，也就是往比特币这个去中心化的帐本中写入下一个区块的权力。只有找到nonce，获得记账权，才能发布下一个区块，其他节点在接收到这个区块之后，会验证这个区块的合法性（先验证block header的内容对不对，检查header中的nBits域是否满足比特币协议中规定的难度要求，检查nonce，检查是不是整个header的哈希小于等于目标域值，也就是说，发布区块之后，别的节点要进行确认，你是不是真正获得了记账权；接着验证block body中的交易列表是不是合法的：1.要有一个合法的签名，2.以前没有人花过。如果有任意一个要求不满足，那么这个区块是不会被接收的）</li><li>分叉攻击</li></ul></li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/QqaHk4.png" alt="QqaHk4.png"></p><ul><li>上图是分叉攻击的示意图，通过往区块链中间位置插入一个区块，来回滚一个已经发生过的交易</li><li>这两个交易都是合法的，因为当前区块的分叉没有进行相同内容的交易，但是A-A这个交易不是在最长合法链上<ul><li>如果两个节点在差不多的时间找到符合条件的nonce，他们都可以把区块发布出去，那么就会出现两个等长的分叉</li><li><img data-src="https://s2.ax1x.com/2019/12/19/QqaOpR.png" alt="QqaOpR.png"></li><li>那么这两个都是最长合法链。比特币在缺省环境下，她会接受他最先接受到的那个区块，所以不同节点，根据在网络中的位置不同，有些节点可能先接收到1的区块，有些节点可能先接收到2的区块，如果在接受之后又往下发展了一个新的区块，那么就代表他认可这个区块，没有发展新的区块则代表不认可</li><li>也就是说在两个等长的合法链的情况下，这个状态会维持一段时间，直到其中一个抢先一步产生下一个区块，这样它就变成了最长合法链</li></ul></li></ul><h4 id="为什么竞争记账权"><a href="#为什么竞争记账权" class="headerlink" title="为什么竞争记账权"></a>为什么竞争记账权</h4><ul><li>只有获得记账权的节点才嫩南瓜产生新的比特币（block reward）</li><li>比特币的产生途径只有这一种方法，而且每经过20万个节点，得到的比特币奖励就会减半。刚开始的时候发现一个符合要求的nonce的奖励是50个比特币，现在已减少至12.5个比特币。</li><li>比特币争夺记账权的过程就是挖矿，找到了合法的nonce，就获得了记账权。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链</title>
      <link href="/jokerboozp.github.io/2019/12/05/2019-12-05-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/jokerboozp.github.io/2019/12/05/2019-12-05-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h4 id="密码学原理"><a href="#密码学原理" class="headerlink" title="密码学原理"></a>密码学原理</h4><ul><li><strong>讲解先前以比特币为主</strong></li><li>比特币又叫做加密货币（crypto-currency），然而他并不是加密的，区块链上所有的交易内容都是公开的，交易的IP地址，转账的金额都是公开的。</li><li><strong>比特币中主要用到了密码学中的两个功能，一个是哈希，另外一个是签名</strong>。</li><li><strong>密码学中用到的哈希函数叫做Crypto Hash Function</strong>，他有两个重要的性质：</li><li>一个叫做collision resistance（抗哈希碰撞）。至于哈希碰撞是什么，请查看以前的文<a id="more"></a>档，简而言之就是有两个值x，y，而且x不等于y，但是两个值经过同一个函数H后，得到H(x)=H(y)。一般来说哈希碰撞是不可避免的。因为输入空间是远远大于输出空间的。<ul><li>例如有一个256位的哈希值，他的输出空间的大小就是2的256次方，但是他的输入空间是无限大的，也就是说他的输入有无限种可能性，所以按照鸽笼原理，必然会出现有两个输入被映射到一个输出空间中的情况，也就产生了哈希碰撞。</li><li>collision resistance主要应用的方面是检测消息的digest：例如有一个消息叫做m，我们取他的哈希值H(m)，collision resistance的意思是找不到另外一个m1来使得H(m1)=H(m)，这个哈希值可以认为是消息的digest，只要这个消息被篡改，那么他的哈希值必定会发生改变。这就是为什么有许多文件下载的地方会显示hash-code供用户比对。</li><li>没有哪一个哈希函数能够在数学上证明是collision resistance的，也就是说上述的性质从理论上是整明不出来的，这个只能靠实践中的经验来进行判断。</li></ul></li><li>另一个性质是hiding。意思是哈希函数的计算过程是单向的，是不可逆的。给定一个输入x，能够算出他的哈希值H(x)，但是从哈希值H(x)算不出原来的值x。也就是说哈希值没有泄露有关原来值的任何信息。<ul><li>hiding的成立的前提是输入空间要足够的大，使得蛮力求解算出原来值的方法是不可行的；而且输入的分布要比较均匀，各种取值的可能性都是差不多的，如果输入的空间虽然很大，但是绝大多数的情况下的取值都是在几个范围内，那么也是比较容易被破解的</li></ul></li><li><strong>hiding和collision resistance结合在一起实现digital commitment，有时候也把他叫做digital equiralent of a sealed envelope</strong></li><li>除了这三个性质之外，比特币还要求哈希函数有第三个性质：puzzle friendly<ul><li>例如想要取到一个确定范围内的哈希值，那么你就只有一个个的数去试，来确定最后的数值。没有捷径。所以这个过程可以用来作为工作量证明，因为你找到符合要求的nonce了，一定代表你做了大量的工作，没有捷径</li></ul></li><li>比特币存在一个挖矿的过程，挖矿实际上就是找到一个nonce（随机数），最终的结果要满足：H(block header)小于等于target。比特币是区块链，区块链实际就是一个一个的区块组成的链表，每一个区块有一个块头（block header），块头里面有很多的域，其中有一个域是我们可以设置的随机数nonce，挖矿的过程就是不停的去试各种随机数，使得整个block header落在指定的范围之内，即小于等于target</li><li>虽然挖矿需要大量的工作量来找到符合要求的nonce，但是发布出来之后进行验证只需要一步，只需要算一次哈希值即可</li><li>比特币中用的哈希函数是SHA-256（Secure Hash Algorithm）。</li><li><strong>签名</strong>：<ul><li>首先介绍比特币的账户系统：日常生活中如果你需要一个账户的话，那么你就需要带好证件，去银行办理，这就是中心化系统的账户管理方式；但是比特币是去中心化的，每个用户自己决定开户，不需要任何人批准，开户的过程很简单，就是创立一个公钥和私钥的对——（public key,private key）。在本地创立一个公私钥对，就是创立账户。公私钥这个来自于非对称的加密体系（asymmetric encryption algorithm），所以，还有对称加密体系（symmetric encryption algorithm）。关于对称加密和非对称加密请参考网络介绍，这里不再解释。</li></ul></li></ul><h4 id="比特币的数据结构"><a href="#比特币的数据结构" class="headerlink" title="比特币的数据结构"></a>比特币的数据结构</h4><ul><li><strong>比特币的数据结构中的重要概念：哈希指针（hash pointers）</strong><ul><li>普通指针存放的是一个结构体在内存中的起始位置；而哈希指针除了要存储起始位置外，还要保存这个结构体的哈希值，一般使用H()表示一个哈希指针。</li><li>这样做的好处是，我们不仅可以根据这个指针找出这个结构体在内存中的位置，还可以知道这个结构体是否被篡改，因为我们保存了他的哈希值</li></ul></li><li>比特币中最基本的数据结构就是区块链，就是一个一个区块组成的链表</li></ul><p><img data-src="https://s2.ax1x.com/2019/12/19/Qqa8eO.png" alt="Qqa8eO.png"></p><ul><li><strong>上图是接下来一系列知识的汇总，皆以此图进行讲解</strong></li><li>图片最上面最左边的区块是系统中产生的第一个区块，叫做创世区块（genesis block），最后一个区块是最近产生的区块（most recent block）。每个区块都包含指向前一个区块的哈希指针，最后一个区块也有一个哈希指针保存在系统中。在取哈希时，是把整个区块的内容整合在一起取哈希值（后一个区块的哈希指针是前一个区块的所有内容，包括前一个区块的哈希指针在内取哈希值）。通过这样的数据结构可以实现tamper-evident log。<ul><li>例如有人篡改了区块链中某个区块的内容，那么被篡改区块之后的所有区块的哈希指针都将出现异常，直接影响到最终将要保存到系统中的哈希指针。所以我们只需要记住系统中最后的哈希值，那么我们就可以检测出系统中任何一个位置的修改。</li></ul></li><li>普通链表你可以改变其中任意一个元素，对其它元素是没有任何影响的，但是区块链是牵一发而动全身，你改变任意一个区块，都会导致后面的所有区块发生改变。</li><li>有了这个性质，比特币中有些节点就不一定要保存整条区块链的内容了，只需要保存临近的几千个区块即可。当需要用到以前的节点时，可以向系统中的前一个节点进行请求。</li><li>但是有些节点是有恶意的，因为这是一个去中心化的系统，那么怎么判断其他节点给你的区块是不是正确的？这就需要用到哈希指针的性质：当请求前一个节点时，对请求节点进行哈希值的计算，然后和当前节点的哈希指针进行比对，一样的话代表没有篡改。</li><li><strong>比特币中的另外一个数据结构：Merkle Tree，和二叉树类似</strong><ul><li>上图下面的大部分就是一个Merkle Tree，最下面的一层是数据块（data blocks），上面的所有节点都是哈希指针（hash pointers），每个数据块的哈希值会以哈希指针的形式存放在上一个节点中，每个节点会存放两个哈希指针，然后每个节点将所有内容求哈希值（包括存放的两个哈希指针），将得到的哈希值以哈希指针的形式存放到上一个哈希指针中，以此类推。最上面的两个哈希指针也可以取哈希值，放到根节点上，叫做根哈希（图上没有展示）</li><li>这个数据结构的好处：只需要记住最后的根哈希值，就可以查到任何位置的修改。一旦修改了某个区块的哈希值，那么该区块上面连接的所有哈希指针均会被修改，会一步一步的传递到根哈希。</li><li>比特币中各个区块之间用哈希指针连接在一起，每个区块所包含的交易是组织成一个Merkle Tree的形式，上图中最下面的每个数据块实际上就是一个交易。每个区块可以分为两部分：块头（block header）和块身（block body），在block header中有根哈希值，也就是这个区块所包含的所有交易组成的Merkle Tree的根哈希值是存在这个区块的block header中的，但是block header中没有交易的具体内容，只有一个根哈希值；只有block body中存在交易的具体列表。</li><li>Merkle Tree的一个作用是提供Merkle Proof。比特币中的节点分为两类：一类是全节点，还有一类是轻节点。全节点是保存整个区块的内容；轻节点只保存一个block header。在轻节点上确认支付信息就需要用到Merkle Proof。<ul><li>从当前交易一直往上到根节点的路径，就叫做Merkle Proof。接下来用上图进行举例：</li><li>假设轻节点想要知道途中标黄色的tx交易是否存在当前的Merkle Tree中，这个轻节点没有保存交易列表，只有block header中的根哈希值。轻节点向某个全节点发出请求，请求一个能够证明黄色的这个交易被包含在这颗Merkle Tree里面的Merkle Proof，全节点收到这个请求之后，只需要把上图中标为红色的这三个哈希值发给轻节点即可，轻节点在本地可以计算出上图中标为绿色的这三个哈希值，首先算出交易上方的哈希值，然后和旁边的红色哈希值组合算出上方的绿色哈希值，以此类推，可以算出最后根节点的哈希值，轻节点把根哈希值和block header中的根哈希值进行比较，从而判断出当前交易是否存在在Merkle Tree中。</li><li><strong>所以利用Merkle Proof可以判断出Merkle Tree中包含了某个交易，所以这种证明也叫做proof of membershio或者proof of inclusion</strong></li><li>对于轻节点来说，验证某个交易是否存在在Merkle Tree中的时间复杂度是O(log(n))</li></ul></li><li>验证某个交易不在某个Merkle Tree中的方法：如果不对叶节点的排列顺序做任何检测的话，那么是不存在方法可以验证的；但是如果我们对叶节点的排列顺序进行一些要求，例如按照这些交易的哈希值排序，那么就可以把需要查询的交易取一次哈希，然后进行比较，就可以判断出他如果在里面的话，他应该在哪一个位置，然后把两边的叶节点同时进行Merkle Proof，如果最后算出来的根哈希值和被查询交易的block header中的哈希值相同，那么就代表该交易不存在在当前Merkle Tree中。这种方法的时间复杂度也是O(log(n))，这种排好序的树叫做Sorted Merkle Tree。比特币当中没有用到这种排好序的Merkle Tree，因为比特币当中不需要做这种不存在证明</li></ul></li></ul><h4 id="哈希指针的其他应用"><a href="#哈希指针的其他应用" class="headerlink" title="哈希指针的其他应用"></a>哈希指针的其他应用</h4><ul><li>只要数据结构是无环的，都可以用哈希指针来代替普通指针，如果有环的话会产生循环依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot-thymeleaf</title>
      <link href="/jokerboozp.github.io/2019/11/26/2019-11-26-Thymeleaf/"/>
      <url>/jokerboozp.github.io/2019/11/26/2019-11-26-Thymeleaf/</url>
      
        <content type="html"><![CDATA[<h4 id="在一个Html页面中引入另一个Html页面，通常来说会利用iFrame框架来进行构建，但是iFrame框架不够灵活而且样式很老旧，而且Thymeleaf对iFrame的支持程度也不高，所以来使用Thymeleaf自带的include方式来引入页面"><a href="#在一个Html页面中引入另一个Html页面，通常来说会利用iFrame框架来进行构建，但是iFrame框架不够灵活而且样式很老旧，而且Thymeleaf对iFrame的支持程度也不高，所以来使用Thymeleaf自带的include方式来引入页面" class="headerlink" title="在一个Html页面中引入另一个Html页面，通常来说会利用iFrame框架来进行构建，但是iFrame框架不够灵活而且样式很老旧，而且Thymeleaf对iFrame的支持程度也不高，所以来使用Thymeleaf自带的include方式来引入页面"></a>在一个Html页面中引入另一个Html页面，通常来说会利用iFrame框架来进行构建，但是iFrame框架不够灵活而且样式很老旧，而且Thymeleaf对iFrame的支持程度也不高，所以来使用Thymeleaf自带的include方式来引入页面</h4><hr><h4 id="先说一下这样做的原因，在构建上一个项目的时候，在每次更改导航栏或者侧边栏的时候，都要同步更改剩余20多个html页面的导航栏或者侧边栏，相当令人头疼。而且在不小心改错的时候，一个一个找也非常令人头疼。所以就需要创建一个header-html，在其他页面直接引入，需要更改的时候直接更改header-html即可。"><a href="#先说一下这样做的原因，在构建上一个项目的时候，在每次更改导航栏或者侧边栏的时候，都要同步更改剩余20多个html页面的导航栏或者侧边栏，相当令人头疼。而且在不小心改错的时候，一个一个找也非常令人头疼。所以就需要创建一个header-html，在其他页面直接引入，需要更改的时候直接更改header-html即可。" class="headerlink" title="先说一下这样做的原因，在构建上一个项目的时候，在每次更改导航栏或者侧边栏的时候，都要同步更改剩余20多个html页面的导航栏或者侧边栏，相当令人头疼。而且在不小心改错的时候，一个一个找也非常令人头疼。所以就需要创建一个header.html，在其他页面直接引入，需要更改的时候直接更改header.html即可。"></a>先说一下这样做的原因，在构建上一个项目的时候，在每次更改导航栏或者侧边栏的时候，都要同步更改剩余20多个html页面的导航栏或者侧边栏，相当令人头疼。而且在不小心改错的时候，一个一个找也非常令人头疼。所以就需要创建一个header.html，在其他页面直接引入，需要更改的时候直接更改header.html即可。<a id="more"></a></h4><hr><h4 id="首先效果图如下"><a href="#首先效果图如下" class="headerlink" title="首先效果图如下"></a>首先效果图如下</h4><p><img data-src="https://vi0.xiu123.cn/live/2019/11/26/20/1003v1574771902221343467.jpg" alt=""><br><img data-src="https://vi0.xiu123.cn/live/2019/11/26/20/1003v1574771863963824631.jpg" alt=""></p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ul><li>1.创建头部文件header.html<ul><li>创建一个公共的头部文件，不需要引入CSS,JS等，在需要引入头部文件的页面导入CSS等即可</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- navbar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">th:fragment</span>=<span class="string">"adminheader"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg px-4 py-2 bg-white shadow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"sidebar-toggler text-gray-500 mr-4 mr-lg-5 lead"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-align-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span> <span class="attr">class</span>=<span class="string">"navbar-brand font-weight-bold text-uppercase text-base"</span>&gt;</span></span><br><span class="line">            小鹏租车后台管理系统—By Jokerboozp</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ml-auto d-flex align-items-center list-unstyled mb-0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item dropdown mr-3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"notifications"</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">class</span>=<span class="string">"nav-link dropdown-toggle text-gray-400 px-1"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bell"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"notification-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">aria-labelledby</span>=<span class="string">"notifications"</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex align-items-center"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon icon-sm bg-violet text-white"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ml-2"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>You have 2 followers<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex align-items-center"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon icon-sm bg-green text-white"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-envelope"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ml-2"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>You have 6 new messages<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex align-items-center"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon icon-sm bg-blue text-white"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ml-2"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>Server rebooted<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex align-items-center"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon icon-sm bg-violet text-white"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-twitter"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text ml-2"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>You have 2 followers<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item text-center"</span>&gt;</span><span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"font-weight-bold headings-font-family text-uppercase"</span>&gt;</span>View all notifications<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item dropdown ml-auto"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"userInfo"</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">class</span>=<span class="string">"nav-link dropdown-toggle"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/statics/adminback/img/avatar-6.jpg&#125;"</span> <span class="attr">alt</span>=<span class="string">"Jason Doe"</span> <span class="attr">style</span>=<span class="string">"max-width: 2.5rem;"</span> <span class="attr">class</span>=<span class="string">"img-fluid rounded-circle shadow"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">aria-labelledby</span>=<span class="string">"userInfo"</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"d-block text-uppercase headings-font-family"</span>&gt;</span>Mark Stephen<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>个人信息设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.在需要引入的页面引入header.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"header :: adminheader"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//这里的“include=head” 其中head为你引用的页面的名字**</span><br><span class="line">//“::” 这个符号前后要有空格才可以</span><br></pre></td></tr></table></figure><h4 id="注意：引入页面存在include和replace两种方式"><a href="#注意：引入页面存在include和replace两种方式" class="headerlink" title="注意：引入页面存在include和replace两种方式"></a>注意：引入页面存在include和replace两种方式</h4><ul><li>th:include：引入子模块的children，依然保留父模块的tag。<ul><li>加载模板的内容： 读取加载节点的内容（不含节点名称），替换div内容。</li></ul></li><li>th:replace：引入子模块的所有，不保留父模块的tag。<ul><li>替换当前标签为模板中的标签，加载的节点会整个替换掉加载他的div。</li></ul></li></ul><h4 id="Stay-Hungry-Stay-Foolish"><a href="#Stay-Hungry-Stay-Foolish" class="headerlink" title="Stay Hungry.Stay Foolish."></a>Stay Hungry.Stay Foolish.</h4>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot1</title>
      <link href="/jokerboozp.github.io/2019/11/22/2019-11-22-Springboot/"/>
      <url>/jokerboozp.github.io/2019/11/22/2019-11-22-Springboot/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong><em>因为已经利用SpringBoot构建了一个简单的网上商城项目，所以接下来就是完善相关细节，然后实现另一个项目的过程</em></strong></p></li><li><p>这是一篇Springboot的中高级讲解博文，有些基础知识不再涉及，和SSM、Springboot、Shiro、Redis有关的基础知识不再举例和讲解。</p></li><li><p>网上的教程有许多，但是基本每一个都会出现这样那样的错误，所以这里做一个自己的步骤来供学习的人参考。</p></li><li><p>因为是在项目已经构建完毕之后才进行文档的编写，所以可能有些改动后会影响项目运行的地方会省去，当出现问题后可使用Bing或者Google进行搜索解决。<a id="more"></a></p></li><li><p>本文档不附带项目源码，紧跟步骤并自己上网查询相关问题是完全可以做出来的，所以不要再做伸手党了亲！</p></li></ul><h4 id="本篇博客较长，所以在头部先声明一下会讲到的内容"><a href="#本篇博客较长，所以在头部先声明一下会讲到的内容" class="headerlink" title="本篇博客较长，所以在头部先声明一下会讲到的内容"></a>本篇博客较长，所以在头部先声明一下会讲到的内容</h4><ol><li>Springboot项目中Shiro的详细的权限认证</li><li>Springboot引入前端的shiro标签</li><li>Springboot项目中Shiro基于yml来动态配置权限</li><li>Springboot项目中使用shiro-redis缓存</li><li>Springboot项目中使用Shiro实现RememberMe（记住我）功能</li><li>Springboot项目中使用Shiro来集成Kaptcha验证码</li><li>项目构建过程中遇到的错误</li><li>总结</li></ol><h4 id="首先把使用的工具的版本信息列出"><a href="#首先把使用的工具的版本信息列出" class="headerlink" title="首先把使用的工具的版本信息列出"></a>首先把使用的工具的版本信息列出</h4><ul><li>1.Idea 2018.3</li><li>2.JDK 1.8</li><li>3.Maven 3.6.0</li><li>4.redis-64.3.0.503</li><li>6.MySql 5.7</li></ul><h4 id="最终项目目录"><a href="#最终项目目录" class="headerlink" title="最终项目目录"></a>最终项目目录</h4><p><img data-src="https://cdn.u1.huluxia.com/g3/M00/51/8B/wKgBOV3XcFuAG6RnAANng6slxmI869.png" alt=""></p><h4 id="最终结果展示"><a href="#最终结果展示" class="headerlink" title="最终结果展示"></a>最终结果展示</h4><p><img data-src="https://cdn.u1.huluxia.com/g3/M00/51/C2/wKgBOV3Xj6iAGsCIAAH8etVgxOc596.png" alt=""></p><h4 id="1-Springboot项目中利用Shiro实现详细的权限认证"><a href="#1-Springboot项目中利用Shiro实现详细的权限认证" class="headerlink" title="1.Springboot项目中利用Shiro实现详细的权限认证"></a>1.Springboot项目中利用Shiro实现详细的权限认证</h4><ul><li>实现这个功能的原因：在完成网上商城项目的时候，需要根据每个用户的权限不同来设计不同的后台界面，而且需要把每个用户的角色ID在每一层传一遍，相当的麻烦，又因为Thymeleaf的语法要求比较奇葩，直接导致每一个a标签的链接超乎想象的长。如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/updateToastAsRead/&#123;roleid&#125;/&#123;userid&#125;/&#123;toastid&#125;(roleid=$&#123;roleid&#125;,userid=$&#123;userid&#125;,toastid=$&#123;toast.toastid&#125;)&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>所以在这个项目里面我决定只设计一套后台，当用户点击没有权限打开的链接的时候，直接跳转到403无权限网页，提示用户没有权限，虽然对于后台来说并不美观，但是可以减少一大部分工作量，而且在实习过程中我发现基本所有的后台也是这么设计的，只不过他们设计的是网页弹窗。</p></li><li><p><strong>实现步骤</strong></p></li><li><p>1.创建User(用户)、Role(角色)、Permission(权限)三个表，三个表相互关联，这里不再演示</p></li><li><p>2.spring boot简单的集成Shiro。这里不再介绍，有需求请去查看上一篇文档</p></li><li><p>3.对CustomRealm中的授权方法<code>doGetAuthorizationInfo</code>进行重写</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principal)</span> </span>&#123;</span><br><span class="line">        User user = (User) principal.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//通过SimpleAuthorizationInfo做授权</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取角色ID</span></span><br><span class="line">        <span class="keyword">int</span> roleId = user.getRoleId();</span><br><span class="line">        <span class="comment">//根据角色ID查询到角色信息</span></span><br><span class="line">        Role role = roleService.getRoleById(roleId);</span><br><span class="line">        <span class="comment">//设置角色</span></span><br><span class="line">        simpleAuthorizationInfo.addRole(role.getRoleName());</span><br><span class="line">        <span class="comment">//根据角色ID查询到该角色具有的权限列表</span></span><br><span class="line">        List&lt;String&gt; permissionList = permissionService.getPermissionByRoleId(roleId);</span><br><span class="line">        <span class="keyword">if</span> (permissionList==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置权限列表</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissionList);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>上面主要通过SimpleAuthorizationInfo中的addRole和addStringPermissions添加当前用户拥有的角色和权限，与主体的授权信息进行比对。</li><li>4.详细的权限配置分为注解式和编程式，这里我们采用注解式进行下面的编写。</li><li>5.首先开启AOP注解，在ShiroConfig类中新增如下方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启AOP注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor attributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        attributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> attributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAAP = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAAP.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAAP;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>6.对于为授权的用户，需要进行友好的提示，所以在ShiroConfig中新增如下方法设置未授权用户跳转到的地址。（需要自己新建403.html）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMappingExceptionResolver <span class="title">simpleMappingExceptionResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMappingExceptionResolver resolver = <span class="keyword">new</span> SimpleMappingExceptionResolver();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">/*未授权处理页*/</span></span><br><span class="line">        properties.setProperty(<span class="string">"UnauthorizedException"</span>, <span class="string">"403.html"</span>);</span><br><span class="line">        resolver.setExceptionMappings(properties);</span><br><span class="line">        <span class="keyword">return</span> resolver;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>7.然后在Controller使用注解@RequiresRoles(“xxx”)和@RequiresPermissions(“xxx”)进行角色和权限的校检。（本处直接用网上的示例代码展示，因为已经采用了基于yml的动态配置权限，不再需要在后台配置无法更改的权限controller。）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/sing"</span>)</span><br><span class="line">   <span class="meta">@RequiresRoles</span>(<span class="string">"cat"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"sing"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/jump"</span>)</span><br><span class="line">   <span class="meta">@RequiresPermissions</span>(<span class="string">"jump"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"jump"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-Springboot引入前端的shiro标签"><a href="#2-Springboot引入前端的shiro标签" class="headerlink" title="2.Springboot引入前端的shiro标签"></a>2.Springboot引入前端的shiro标签</h4><ul><li><p>通常前端页面展示需要与用户的权限对等，即只给用户看到他们权限内的内容。<br>通常解决方式有两种：<br>其一：登录后通过读取数据库中角色和权限，获取需要展示的菜单内容，动态的在前端渲染；<br>其二：所有内容都在前端写好，通过前端的shiro标签控制对应权限内容部分的渲染</p></li><li><p>这里用第二种方式演示</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Shiro标签说明：</span><br><span class="line">guest标签：`<span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span>`，用户没有身份验证时显示相应信息，即游客访问信息。</span><br><span class="line">user标签：`<span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span>`，用户已经身份验证/记住我登录后显示相应的信息。</span><br><span class="line">authenticated标签:`<span class="tag">&lt;<span class="name">shiro:authenticated</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:authenticated</span>&gt;</span>`，用户已经身份验证通过，即Subject.login登录成功，不是记住我登录的。</span><br><span class="line">notAuthenticated标签:`<span class="tag">&lt;<span class="name">shiro:notAuthenticated</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:notAuthenticated</span>&gt;</span>`，用户已经身份验证通过，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证。</span><br><span class="line">principal标签:`<span class="tag">&lt;<span class="name">shiro:</span> <span class="attr">principal</span>/&gt;</span><span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span>`，相当`((User)Subject.getPrincipals()).getUsername()`。</span><br><span class="line">lacksPermission标签：`<span class="tag">&lt;<span class="name">shiro:lacksPermission</span> <span class="attr">name</span>=<span class="string">"org:create"</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:lacksPermission</span>&gt;</span>`，如果当前Subject没有权限将显示body体内容。</span><br><span class="line">hasRole标签：`<span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span>`，如果当前Subject有角色将显示body体内容。</span><br><span class="line">hasAnyRoles标签：`<span class="tag">&lt;<span class="name">shiro:hasAnyRoles</span> <span class="attr">name</span>=<span class="string">"admin,user"</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasAnyRoles</span>&gt;</span>`，如果当前Subject有任意一个角色（或的关系）将显示body体内容。</span><br><span class="line">lacksRole标签：`<span class="tag">&lt;<span class="name">shiro:lacksRole</span> <span class="attr">name</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:lacksRole</span>&gt;</span>`，如果当前Subject没有角色将显示body体内容。</span><br><span class="line">hasPermission标签：`<span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span>`，如果当前Subject有权限将显示body体内容</span><br></pre></td></tr></table></figure><ul><li><strong>步骤</strong></li><li>1.添加pom依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.ShiroConfig中添加配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>3.前端页面使用shiro标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"dog"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/dog"</span>&gt;</span>Dog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"cat"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/cat"</span>&gt;</span>Cat<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"sing"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sing"</span>&gt;</span>Sing<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"jump"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/jump"</span>&gt;</span>Jump<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"rap"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/rap"</span>&gt;</span>Rap<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"basketball"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/basketball"</span>&gt;</span>Basketball<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：使用前现在html标签内引入shiro标签，即<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这种方式用一种问题就是必须在后台绑定当前用户的角色，不是很灵活，所以直接采用yml动态配置权限更加方便。</li></ul><h4 id="3-Springboot项目中Shiro基于yml来动态配置权限"><a href="#3-Springboot项目中Shiro基于yml来动态配置权限" class="headerlink" title="3.Springboot项目中Shiro基于yml来动态配置权限"></a>3.Springboot项目中Shiro基于yml来动态配置权限</h4><ul><li>编程式和注解式进行授权在使用的时候都必须是写死在后台的，如果后期需要更改权限，就必须要进行后台代码的修改。这时候动态配置权限就很有必要了，我们通过读取数据库或者权限的配置文件将权限注入，如果需要修改，我们只需要修改数据库或者修改相关的配置文件即可。</li><li><strong>步骤</strong></li><li>1.在application.yml文件中添加需要用到的权限</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">permission-config:</span><br><span class="line">  perms:</span><br><span class="line">    - url: /cat</span><br><span class="line">      permission: roles[admin]</span><br><span class="line">    - url: /dog</span><br><span class="line">      permission: roles[customer]</span><br><span class="line">    - url: /sing</span><br><span class="line">      permission: perms[3]</span><br><span class="line">    - url: /jump</span><br><span class="line">      permission: perms[4]</span><br><span class="line">    - url: /rap</span><br><span class="line">      permission: perms[5]</span><br><span class="line">    - url: /basketball</span><br><span class="line">      permission: perms[6]</span><br></pre></td></tr></table></figure><ul><li>2.将配置信息的内容转化为<code>List&lt;Map&lt;String,String&gt;&gt;</code>注入到ShiroConfig中。新建PermsMap类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"permission-config"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermsMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,String&gt;&gt; perms;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,String&gt;&gt; getPerms()&#123;</span><br><span class="line">        <span class="keyword">return</span> perms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerms</span><span class="params">(List&lt;Map&lt;String,String&gt;&gt; perms)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.perms=perms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.修改ShiroConfig：先使用@Autowired注入PermsMap，然后更改过滤链</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    PermsMap permsMap;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*配置Shiro的web过滤器，拦截浏览器请求并交给SecurityManager处理**/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">webFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager());</span><br><span class="line">        Map&lt;String, String&gt; filterChainMap  = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/to_login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/getCode"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/logout"</span>,<span class="string">"logout"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/login/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/img/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/statics/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态权限注入</span></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; perms = permsMap.getPerms();</span><br><span class="line">        perms.forEach(perm-&gt;filterChainMap.put(perm.get(<span class="string">"url"</span>),perm.get(<span class="string">"permission"</span>)));</span><br><span class="line">        filterChainMap.put(<span class="string">"/"</span>,<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>更改AuthorizationController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/cat"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"cat"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dog"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"dog"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sing"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sing"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/jump"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"jump"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/rap"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rap"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/basketball"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">basketball</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"basketball"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/403"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">page_403</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"403"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Springboot项目中使用shiro-redis缓存"><a href="#4-Springboot项目中使用shiro-redis缓存" class="headerlink" title="4.Springboot项目中使用shiro-redis缓存"></a>4.Springboot项目中使用shiro-redis缓存</h4><ul><li>已经配置过详细的权限配置的情况下，如果我们想要验证用户是否有权限访问某一个链接，我们需要在后台直接查询数据库，才能确认当前用户是否有权限，这样会大大增加数据库的压力。这时候就需要使用Shiro-Redis缓存。</li><li><strong>步骤</strong></li><li>1.安装Redis（步骤请网上搜索，下载解压即可正常使用）</li><li>2.引入shiro-redis依赖(暂时只知道在Spring2.2.1的版本下只能够使用3.2.3版本的shiro-redis依赖，3.1.0以下的版本不建议使用，否则会报异常，在下面会介绍异常种类。在任何spring版本下都建议使用3.2.3版本)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.crazycake<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.在application.yml中配置redis的相关参数（参数的具体含义请参考redis官方文档）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: -1</span><br><span class="line">    timeout: 0</span><br></pre></td></tr></table></figure><ul><li>3.可以在ShiroConfig中添加redis相应的配置或者新建一个RedisConfig</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   redisManager</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisManager <span class="title">redisManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisManager redisManager = <span class="keyword">new</span> RedisManager();</span><br><span class="line">        redisManager.setHost(host + <span class="string">":"</span> + port);</span><br><span class="line">        redisManager.setTimeout(timeout);</span><br><span class="line">        redisManager.setDatabase(database);</span><br><span class="line">        <span class="keyword">return</span> redisManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CacheManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</span><br><span class="line">        redisCacheManager.setRedisManager(redisManager());</span><br><span class="line">        redisCacheManager.setPrincipalIdFieldName(<span class="string">"userId"</span>);</span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    redisSessionDao</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisSessionDAO <span class="title">redisSessionDAO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisSessionDAO redisSessionDAO = <span class="keyword">new</span> RedisSessionDAO();</span><br><span class="line">        redisSessionDAO.setRedisManager(redisManager());</span><br><span class="line">        <span class="keyword">return</span> redisSessionDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    sessionManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">sessionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setSessionDAO(redisSessionDAO());</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>4.将session管理器和cache管理器注入到SecurityManager中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">       DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">       securityManager.setRealm(customRealm());</span><br><span class="line">       securityManager.setSessionManager(sessionManager());</span><br><span class="line">       securityManager.setCacheManager(redisCacheManager());</span><br><span class="line">       <span class="keyword">return</span> securityManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>5.启动Redis，然后启动项目，如果有RedisDesktopManager的话，也可以打开RDM。运行项目并登录后，进行权限操作，会在RDM中看到数据被写入到Redis缓存中。并且不会调用后台方法进行验证。<br><img data-src="https://cdn.u1.huluxia.com/g3/M03/51/BD/wKgBOV3XjHeAIGurAALQ5eKQs8g099.png" alt=""></li></ul><h4 id="5-Springboot项目中使用Shiro实现RememberMe（记住我）功能"><a href="#5-Springboot项目中使用Shiro实现RememberMe（记住我）功能" class="headerlink" title="5.Springboot项目中使用Shiro实现RememberMe（记住我）功能"></a>5.Springboot项目中使用Shiro实现RememberMe（记住我）功能</h4><ul><li>在实现用户登录后，关闭浏览器，再次打开浏览器无需重新登录的功能RememberMe。</li><li><strong>步骤</strong></li><li>1.ShiroConfig.java中添加rememberMeManager的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    cokkie对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这个参数是cookie的名称，对应前端的checkbox的name=remember</span></span><br><span class="line">        SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"remember"</span>);</span><br><span class="line">        <span class="comment">//cookie生效时间，单位为秒</span></span><br><span class="line">        simpleCookie.setMaxAge(<span class="number">600</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleCookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cookie管理对象，记住我功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">        cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">        <span class="comment">//cookieRememberMeManager.setCipherKey用来设置加密的Key,参数类型byte[],字节数组长度要求16</span></span><br><span class="line">        cookieRememberMeManager.setCipherKey(<span class="string">"jokerboozpspring"</span>.getBytes());</span><br><span class="line">        <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>2.注入到SecurityManager</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">       DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">       securityManager.setRealm(customRealm());</span><br><span class="line">       securityManager.setSessionManager(sessionManager());</span><br><span class="line">       securityManager.setCacheManager(redisCacheManager());</span><br><span class="line">       securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">       <span class="keyword">return</span> securityManager;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>3.修改登录界面（在登陆操作的form表单中加入checkbox）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberMe"</span>&gt;</span>记住我</span><br></pre></td></tr></table></figure><ul><li>4.修改LoginController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(&#123;<span class="string">"/"</span>,<span class="string">"/success"</span>&#125;)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">       User user = (User) currentUser.getPrincipal();</span><br><span class="line">       model.addAttribute(<span class="string">"username"</span>, user.getUsername());</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, <span class="keyword">boolean</span> rememberMe, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username,password);</span><br><span class="line">       Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//主体提交登录请求到SecurityManager</span></span><br><span class="line">           token.setRememberMe(rememberMe);</span><br><span class="line">           currentUser.login(token);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"msg"</span>,<span class="string">"密码不正确"</span>);</span><br><span class="line">       &#125;<span class="keyword">catch</span>(UnknownAccountException uae)&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"msg"</span>,<span class="string">"账号不存在"</span>);</span><br><span class="line">       &#125;<span class="keyword">catch</span>(AuthenticationException ae)&#123;</span><br><span class="line">           model.addAttribute(<span class="string">"msg"</span>,<span class="string">"状态不正常"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(currentUser.isAuthenticated())&#123;</span><br><span class="line">           System.out.println(<span class="string">"认证成功"</span>);</span><br><span class="line">           model.addAttribute(<span class="string">"currentUser"</span>,currentUser);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"/success"</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           token.clear();</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="6-Springboot项目中使用Shiro来集成Kaptcha验证码"><a href="#6-Springboot项目中使用Shiro来集成Kaptcha验证码" class="headerlink" title="6.Springboot项目中使用Shiro来集成Kaptcha验证码"></a>6.Springboot项目中使用Shiro来集成Kaptcha验证码</h4><ul><li>通过引入Kaptcha来实现图片验证码功能</li><li><strong>步骤</strong></li><li>1.引入pom依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.创建KaptchaConfig.java配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CODE_LENGTH=<span class="string">"4"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_KEY = <span class="string">"verification_session_key"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultKaptcha <span class="title">defaultKaptcha</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultKaptcha defaultKaptcha = <span class="keyword">new</span> DefaultKaptcha();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 设置边框</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.border"</span>, <span class="string">"no"</span>);</span><br><span class="line">        <span class="comment">// 设置边框颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.border.color"</span>, <span class="string">"105,179,90"</span>);</span><br><span class="line">        <span class="comment">// 设置字体颜色</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.color"</span>, <span class="string">"blue"</span>);</span><br><span class="line">        <span class="comment">// 设置图片宽度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.width"</span>, <span class="string">"173"</span>);</span><br><span class="line">        <span class="comment">// 设置图片高度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.image.height"</span>, <span class="string">"40"</span>);</span><br><span class="line">        <span class="comment">// 设置字体尺寸</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.size"</span>, <span class="string">"32"</span>);</span><br><span class="line">        <span class="comment">// 设置图片样式</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.obscurificator.impl"</span>,<span class="string">"com.google.code.kaptcha.impl.ShadowGimpy"</span>);</span><br><span class="line">        <span class="comment">// 设置session key</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.session.key"</span>, SESSION_KEY);</span><br><span class="line">        <span class="comment">// 设置验证码长度</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.char.length"</span>, CODE_LENGTH);</span><br><span class="line">        <span class="comment">// 设置字体</span></span><br><span class="line">        properties.setProperty(<span class="string">"kaptcha.textproducer.font.names"</span>, <span class="string">"宋体,楷体,黑体"</span>);</span><br><span class="line">        Config config = <span class="keyword">new</span> Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.LoginController添加获取验证码的方法(直接附上完整的controller代码，不想再找了)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresRoles;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * session中的验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String SHIRO_VERIFY_SESSION = <span class="string">"verifySessionCode"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误后的跳转地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ERROR_CODE_URL = <span class="string">"login"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功后的跳转地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String SUCCESS_CODE_URL = <span class="string">"/success"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证失败提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String ERROR_PASSWORD = <span class="string">"密码不正确"</span>;</span><br><span class="line">    <span class="keyword">private</span> String ERROR_ACCOUNT = <span class="string">"账户不存在"</span>;</span><br><span class="line">    <span class="keyword">private</span> String ERROR_STATUS = <span class="string">"状态不正常"</span>;</span><br><span class="line">    <span class="keyword">private</span> String ERROR_KAPTCHA = <span class="string">"验证码不正确"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(&#123;<span class="string">"/"</span>,<span class="string">"/success"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        User user = (User) currentUser.getPrincipal();</span><br><span class="line">        model.addAttribute(<span class="string">"userName"</span>,user.getUserName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR_CODE_URL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/to_login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String userName,String verifyCode, String password,<span class="keyword">boolean</span> rememberMe, Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userName,password,rememberMe);</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session中的验证码</span></span><br><span class="line">        String verCode = (String) currentUser.getSession().getAttribute(SHIRO_VERIFY_SESSION);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">""</span>.equals(verifyCode)||(!verCode.equals(verifyCode)))&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,ERROR_KAPTCHA);</span><br><span class="line">            <span class="keyword">return</span> ERROR_CODE_URL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            token.setRememberMe(rememberMe);</span><br><span class="line">            <span class="comment">//主体提交登录请求到SecurityManager</span></span><br><span class="line">            currentUser.login(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,ERROR_PASSWORD);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UnknownAccountException uae)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,ERROR_ACCOUNT);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(AuthenticationException ae)&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"msg"</span>,ERROR_STATUS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(currentUser.isAuthenticated())&#123;</span><br><span class="line">            model.addAttribute(<span class="string">"userName"</span>,userName);</span><br><span class="line">            <span class="keyword">return</span> SUCCESS_CODE_URL;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            token.clear();</span><br><span class="line">            <span class="keyword">return</span> ERROR_CODE_URL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getCode"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getGifCode</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] verByte = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream jpegOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//生产验证码字符串并保存到session中</span></span><br><span class="line">            String createText = defaultKaptcha.createText();</span><br><span class="line">            request.getSession().setAttribute(SHIRO_VERIFY_SESSION,createText);</span><br><span class="line">            <span class="comment">//使用生产的验证码字符串返回一个BufferedImage对象并转为byte写入到byte数组中</span></span><br><span class="line">            BufferedImage challenge = defaultKaptcha.createImage(createText);</span><br><span class="line">            ImageIO.write(challenge,<span class="string">"jpg"</span>,jpegOutputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">            response.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义response输出类型为image/jpeg类型，使用response输出流输出图片的byte数组</span></span><br><span class="line">        verByte = jpegOutputStream.toByteArray();</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">        response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        ServletOutputStream responseOutputStream = response.getOutputStream();</span><br><span class="line">        responseOutputStream.write(verByte);</span><br><span class="line">        responseOutputStream.flush();</span><br><span class="line">        responseOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.更改login.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"verifyCode"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span> <span class="attr">class</span>=<span class="string">"form-control border-0 shadow form-control-lg text-violet"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">style</span>=<span class="string">"text-decoration: none;color: black;"</span> <span class="attr">onclick</span>=<span class="string">"refreshCode()"</span>&gt;</span>换一个<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"verifyCode"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/getCode&#125;"</span> <span class="attr">style</span>=<span class="string">"margin-left: 16px"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">refreshCode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"verifyCode"</span>).setAttribute(<span class="string">"src"</span>,<span class="string">"/getCode"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>5.在ShiroConfig中配置/getCode可以游客方式访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChainMap.put(<span class="string">"/getCode"</span>,<span class="string">"anon"</span>);</span><br></pre></td></tr></table></figure><ul><li>6.修改登录方法（具体代码见上面LoginControlller代码）</li><li>最终效果（目前我项目的效果，但是大体框架一样，只是添加了样式）</li></ul><p><img data-src="https://cdn.u1.huluxia.com/g3/M00/51/C2/wKgBOV3Xj6iAGsCIAAH8etVgxOc596.png" alt=""></p><h4 id="7-项目构建过程中遇到的错误"><a href="#7-项目构建过程中遇到的错误" class="headerlink" title="7.项目构建过程中遇到的错误"></a>7.项目构建过程中遇到的错误</h4><ul><li><strong>用来展示自己在配置过程中遇到的错误信息，不包括全部，因为有的问题比较简单，就不再显示，有的单纯是我忘了。。。</strong></li><li>1.shiro无法进入授权的方法(这是困扰我最久的一个问题，卡在这里了两天。有两个原因导致这个错误)。报错信息如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">11</span>-<span class="number">21</span> <span class="number">13</span>:<span class="number">12</span>:<span class="number">18.743</span> ERROR <span class="number">12736</span> --- [nio-<span class="number">8090</span>-exec-<span class="number">2</span>] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: <span class="function">An error happened during template <span class="title">parsing</span> <span class="params">(template: <span class="string">"class path resource [templates/success.html]"</span>)</span>] with root cause</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">org.crazycake.shiro.exception.PrincipalInstanceException: class com.sc.entity.User must has getter <span class="keyword">for</span> field: authCacheKey or id</span></span><br><span class="line"><span class="function">We need a field to identify <span class="keyword">this</span> Cache Object in Redis. So you need to defined an id field which you can get unique id to identify <span class="keyword">this</span> principal. For example, <span class="keyword">if</span> you use UserInfo as Principal class, the id field maybe userId, userName, email, etc. For example, <span class="title">getUserId</span><span class="params">()</span>, <span class="title">getUserName</span><span class="params">()</span>, <span class="title">getEmail</span><span class="params">()</span>, etc.</span></span><br><span class="line"><span class="function">Default value is authCacheKey or id, that means your principal object has a method called "<span class="title">getAuthCacheKey</span><span class="params">()</span>" or "<span class="title">getId</span><span class="params">()</span>"</span></span><br><span class="line"><span class="function">at org.crazycake.shiro.RedisCache.<span class="title">getRedisKeyFromPrincipalIdField</span><span class="params">(RedisCache.java:<span class="number">150</span>)</span> ~[shiro-redis-3.1.0.jar:na]</span></span><br><span class="line"><span class="function">at org.crazycake.shiro.RedisCache.<span class="title">getStringRedisKey</span><span class="params">(RedisCache.java:<span class="number">126</span>)</span> ~[shiro-redis-3.1.0.jar:na]</span></span><br><span class="line"><span class="function">at org.crazycake.shiro.RedisCache.<span class="title">getRedisCacheKey</span><span class="params">(RedisCache.java:<span class="number">118</span>)</span> ~[shiro-redis-3.1.0.jar:na]</span></span><br><span class="line"><span class="function">at org.crazycake.shiro.RedisCache.<span class="title">get</span><span class="params">(RedisCache.java:<span class="number">68</span>)</span> ~[shiro-redis-3.1.0.jar:na]</span></span><br><span class="line"><span class="function">at org.apache.shiro.realm.AuthorizingRealm.<span class="title">getAuthorizationInfo</span><span class="params">(AuthorizingRealm.java:<span class="number">328</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.realm.AuthorizingRealm.<span class="title">hasRole</span><span class="params">(AuthorizingRealm.java:<span class="number">573</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.authz.ModularRealmAuthorizer.<span class="title">hasRole</span><span class="params">(ModularRealmAuthorizer.java:<span class="number">374</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.mgt.AuthorizingSecurityManager.<span class="title">hasRole</span><span class="params">(AuthorizingSecurityManager.java:<span class="number">153</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.subject.support.DelegatingSubject.<span class="title">hasRole</span><span class="params">(DelegatingSubject.java:<span class="number">224</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at at.pollux.thymeleaf.shiro.processor.ShiroFacade.<span class="title">hasAllRoles</span><span class="params">(ShiroFacade.java:<span class="number">115</span>)</span> ~[thymeleaf-extras-shiro-2.0.0.jar:na]</span></span><br><span class="line"><span class="function">at at.pollux.thymeleaf.shiro.processor.element.HasRoleElementProcessor.<span class="title">doProcess</span><span class="params">(HasRoleElementProcessor.java:<span class="number">39</span>)</span> ~[thymeleaf-extras-shiro-2.0.0.jar:na]</span></span><br><span class="line"><span class="function">at org.thymeleaf.processor.element.AbstractElementTagProcessor.<span class="title">process</span><span class="params">(AbstractElementTagProcessor.java:<span class="number">95</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.<span class="title">process</span><span class="params">(ProcessorConfigurationUtils.java:<span class="number">633</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.engine.ProcessorTemplateHandler.<span class="title">handleOpenElement</span><span class="params">(ProcessorTemplateHandler.java:<span class="number">1314</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.<span class="title">handleOpenElementEnd</span><span class="params">(TemplateHandlerAdapterMarkupHandler.java:<span class="number">304</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.<span class="title">handleOpenElementEnd</span><span class="params">(InlinedOutputExpressionMarkupHandler.java:<span class="number">278</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.<span class="title">handleOpenElementEnd</span><span class="params">(OutputExpressionInlinePreProcessorHandler.java:<span class="number">186</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.<span class="title">handleOpenElementEnd</span><span class="params">(InlinedOutputExpressionMarkupHandler.java:<span class="number">124</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.HtmlElement.<span class="title">handleOpenElementEnd</span><span class="params">(HtmlElement.java:<span class="number">109</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.HtmlMarkupHandler.<span class="title">handleOpenElementEnd</span><span class="params">(HtmlMarkupHandler.java:<span class="number">297</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.MarkupEventProcessorHandler.<span class="title">handleOpenElementEnd</span><span class="params">(MarkupEventProcessorHandler.java:<span class="number">402</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.ParsingElementMarkupUtil.<span class="title">parseOpenElement</span><span class="params">(ParsingElementMarkupUtil.java:<span class="number">159</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.MarkupParser.<span class="title">parseBuffer</span><span class="params">(MarkupParser.java:<span class="number">710</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.MarkupParser.<span class="title">parseDocument</span><span class="params">(MarkupParser.java:<span class="number">301</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.attoparser.MarkupParser.<span class="title">parse</span><span class="params">(MarkupParser.java:<span class="number">257</span>)</span> ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.<span class="title">parse</span><span class="params">(AbstractMarkupTemplateParser.java:<span class="number">230</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.<span class="title">parseStandalone</span><span class="params">(AbstractMarkupTemplateParser.java:<span class="number">100</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.engine.TemplateManager.<span class="title">parseAndProcess</span><span class="params">(TemplateManager.java:<span class="number">666</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.TemplateEngine.<span class="title">process</span><span class="params">(TemplateEngine.java:<span class="number">1098</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.TemplateEngine.<span class="title">process</span><span class="params">(TemplateEngine.java:<span class="number">1072</span>)</span> ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.spring5.view.ThymeleafView.<span class="title">renderFragment</span><span class="params">(ThymeleafView.java:<span class="number">362</span>)</span> ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.thymeleaf.spring5.view.ThymeleafView.<span class="title">render</span><span class="params">(ThymeleafView.java:<span class="number">189</span>)</span> ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.DispatcherServlet.<span class="title">render</span><span class="params">(DispatcherServlet.java:<span class="number">1373</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.DispatcherServlet.<span class="title">processDispatchResult</span><span class="params">(DispatcherServlet.java:<span class="number">1118</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.DispatcherServlet.<span class="title">doDispatch</span><span class="params">(DispatcherServlet.java:<span class="number">1057</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.DispatcherServlet.<span class="title">doService</span><span class="params">(DispatcherServlet.java:<span class="number">943</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.FrameworkServlet.<span class="title">processRequest</span><span class="params">(FrameworkServlet.java:<span class="number">1006</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.FrameworkServlet.<span class="title">doPost</span><span class="params">(FrameworkServlet.java:<span class="number">909</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at javax.servlet.http.HttpServlet.<span class="title">service</span><span class="params">(HttpServlet.java:<span class="number">660</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.springframework.web.servlet.FrameworkServlet.<span class="title">service</span><span class="params">(FrameworkServlet.java:<span class="number">883</span>)</span> ~[spring-webmvc-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at javax.servlet.http.HttpServlet.<span class="title">service</span><span class="params">(HttpServlet.java:<span class="number">741</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">231</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.tomcat.websocket.server.WsFilter.<span class="title">doFilter</span><span class="params">(WsFilter.java:<span class="number">53</span>)</span> ~[tomcat-embed-websocket-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.ProxiedFilterChain.<span class="title">doFilter</span><span class="params">(ProxiedFilterChain.java:<span class="number">61</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.AdviceFilter.<span class="title">executeChain</span><span class="params">(AdviceFilter.java:<span class="number">108</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.AdviceFilter.<span class="title">doFilterInternal</span><span class="params">(AdviceFilter.java:<span class="number">137</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">125</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.ProxiedFilterChain.<span class="title">doFilter</span><span class="params">(ProxiedFilterChain.java:<span class="number">66</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.AbstractShiroFilter.<span class="title">executeChain</span><span class="params">(AbstractShiroFilter.java:<span class="number">449</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.AbstractShiroFilter$1.<span class="title">call</span><span class="params">(AbstractShiroFilter.java:<span class="number">365</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.subject.support.SubjectCallable.<span class="title">doCall</span><span class="params">(SubjectCallable.java:<span class="number">90</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.subject.support.SubjectCallable.<span class="title">call</span><span class="params">(SubjectCallable.java:<span class="number">83</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.subject.support.DelegatingSubject.<span class="title">execute</span><span class="params">(DelegatingSubject.java:<span class="number">383</span>)</span> ~[shiro-core-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.AbstractShiroFilter.<span class="title">doFilterInternal</span><span class="params">(AbstractShiroFilter.java:<span class="number">362</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.shiro.web.servlet.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">125</span>)</span> ~[shiro-web-1.3.2.jar:1.3.2]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.RequestContextFilter.<span class="title">doFilterInternal</span><span class="params">(RequestContextFilter.java:<span class="number">100</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">119</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.FormContentFilter.<span class="title">doFilterInternal</span><span class="params">(FormContentFilter.java:<span class="number">93</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">119</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.CharacterEncodingFilter.<span class="title">doFilterInternal</span><span class="params">(CharacterEncodingFilter.java:<span class="number">201</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.springframework.web.filter.OncePerRequestFilter.<span class="title">doFilter</span><span class="params">(OncePerRequestFilter.java:<span class="number">119</span>)</span> ~[spring-web-5.2.1.RELEASE.jar:5.2.1.RELEASE]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">internalDoFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">193</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.ApplicationFilterChain.<span class="title">doFilter</span><span class="params">(ApplicationFilterChain.java:<span class="number">166</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.StandardWrapperValve.<span class="title">invoke</span><span class="params">(StandardWrapperValve.java:<span class="number">202</span>)</span> ~[tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.StandardContextValve.<span class="title">invoke</span><span class="params">(StandardContextValve.java:<span class="number">96</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.authenticator.AuthenticatorBase.<span class="title">invoke</span><span class="params">(AuthenticatorBase.java:<span class="number">526</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.StandardHostValve.<span class="title">invoke</span><span class="params">(StandardHostValve.java:<span class="number">139</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.valves.ErrorReportValve.<span class="title">invoke</span><span class="params">(ErrorReportValve.java:<span class="number">92</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.core.StandardEngineValve.<span class="title">invoke</span><span class="params">(StandardEngineValve.java:<span class="number">74</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.catalina.connector.CoyoteAdapter.<span class="title">service</span><span class="params">(CoyoteAdapter.java:<span class="number">343</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.coyote.http11.Http11Processor.<span class="title">service</span><span class="params">(Http11Processor.java:<span class="number">408</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.coyote.AbstractProcessorLight.<span class="title">process</span><span class="params">(AbstractProcessorLight.java:<span class="number">66</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.coyote.AbstractProtocol$ConnectionHandler.<span class="title">process</span><span class="params">(AbstractProtocol.java:<span class="number">861</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.<span class="title">doRun</span><span class="params">(NioEndpoint.java:<span class="number">1579</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at org.apache.tomcat.util.net.SocketProcessorBase.<span class="title">run</span><span class="params">(SocketProcessorBase.java:<span class="number">49</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor.<span class="title">runWorker</span><span class="params">(ThreadPoolExecutor.java:<span class="number">1149</span>)</span> [na:1.8.0_181]</span></span><br><span class="line"><span class="function">at java.util.concurrent.ThreadPoolExecutor$Worker.<span class="title">run</span><span class="params">(ThreadPoolExecutor.java:<span class="number">624</span>)</span> [na:1.8.0_181]</span></span><br><span class="line"><span class="function">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.<span class="title">run</span><span class="params">(TaskThread.java:<span class="number">61</span>)</span> [tomcat-embed-core-9.0.27.jar:9.0.27]</span></span><br><span class="line"><span class="function">at java.lang.Thread.<span class="title">run</span><span class="params">(Thread.java:<span class="number">748</span>)</span> [na:1.8.0_181]</span></span><br></pre></td></tr></table></figure><ul><li><strong>错误原因1</strong>：<ul><li>shiro-redis依赖的版本过低，一般都是3.1.0，因为网上的教程全都是3.1.0版本的，在现在的Springboot版本下会报这样的错误。</li><li><strong>解决方法</strong>：</li><li>将版本更换为3.2.3版本即可</li></ul></li><li><strong>错误原因2</strong>：<ul><li>将版本更换完之后依旧无法解决错误，是因为信息认证的实体中需要id的getter信息，但是如果你使用了mybatis来连接数据库，而不是像网上一样直接在后台造数据，它并不能取到相应的id，所以要在redisCacheManager中设置取到的id</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    CacheManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</span><br><span class="line">        redisCacheManager.setRedisManager(redisManager());</span><br><span class="line">        redisCacheManager.setPrincipalIdFieldName(<span class="string">"userId"</span>);</span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>2.设置RedisManager时无法设置相应的redis数据库信息<ul><li><strong>解决方法</strong></li><li>没有在配置类之前引入yml配置文件中的相关信息，引入即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password:&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.database:0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> database;</span><br></pre></td></tr></table></figure><ul><li>3.redis缓存没有加载进redis数据库<ul><li><strong>解决方法</strong></li><li>在启动类上加上注解@EnableCaching</li></ul></li></ul><h4 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h4><ul><li>到这里关于Springboot项目的所有相关知识基本已经介绍完毕了，除了md5加密，因为暂时用不到，所以这个只是暂时搁置。两篇总结文档基本可以帮助你打出一个完成度相当高的springboot项目，自己也提高了不少。</li><li>Stay Hungry!Stay Foolish!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目问题</title>
      <link href="/jokerboozp.github.io/2019/11/14/2019-11-14-%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E/"/>
      <url>/jokerboozp.github.io/2019/11/14/2019-11-14-%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E/</url>
      
        <content type="html"><![CDATA[<h4 id="网上商城项目进行了将近20天，敲了8000多行代码，现在基本已经完成，剩下的功能两天就能完成，总体代码量保持在11000行左右。但是没有进行总结，为了防止以后遇到同样的问题不知道怎么处理，故花一些时间进行一下总结。总的来说项目本身不难，只是一些小功能让人很头疼，例如购物车，以及前端框架问题。本文档仅记录目前为止本人遇到的问题，一些基础知识或者无关紧要的问题不再显示。所有知识仅供参考，毕竟代码在别人领进门之后，剩下的都是靠自己摸索才能真正学会的。"><a href="#网上商城项目进行了将近20天，敲了8000多行代码，现在基本已经完成，剩下的功能两天就能完成，总体代码量保持在11000行左右。但是没有进行总结，为了防止以后遇到同样的问题不知道怎么处理，故花一些时间进行一下总结。总的来说项目本身不难，只是一些小功能让人很头疼，例如购物车，以及前端框架问题。本文档仅记录目前为止本人遇到的问题，一些基础知识或者无关紧要的问题不再显示。所有知识仅供参考，毕竟代码在别人领进门之后，剩下的都是靠自己摸索才能真正学会的。" class="headerlink" title="网上商城项目进行了将近20天，敲了8000多行代码，现在基本已经完成，剩下的功能两天就能完成，总体代码量保持在11000行左右。但是没有进行总结，为了防止以后遇到同样的问题不知道怎么处理，故花一些时间进行一下总结。总的来说项目本身不难，只是一些小功能让人很头疼，例如购物车，以及前端框架问题。本文档仅记录目前为止本人遇到的问题，一些基础知识或者无关紧要的问题不再显示。所有知识仅供参考，毕竟代码在别人领进门之后，剩下的都是靠自己摸索才能真正学会的。"></a>网上商城项目进行了将近20天，敲了8000多行代码，现在基本已经完成，剩下的功能两天就能完成，总体代码量保持在11000行左右。但是没有进行总结，为了防止以后遇到同样的问题不知道怎么处理，故花一些时间进行一下总结。总的来说项目本身不难，只是一些小功能让人很头疼，例如购物车，以及前端框架问题。本文档仅记录目前为止本人遇到的问题，一些基础知识或者无关紧要的问题不再显示。所有知识仅供参考，毕竟代码在别人领进门之后，剩下的都是靠自己摸索才能真正学会的。</h4><hr><h4 id="1-pom依赖"><a href="#1-pom依赖" class="headerlink" title="1.pom依赖"></a>1.pom依赖</h4><ul><li>因为现在的项目足够稳定，故保存现在的pom依赖。<a id="more"></a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>market<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>market<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-application-yml配置文件（包括Mybatis）"><a href="#2-application-yml配置文件（包括Mybatis）" class="headerlink" title="2.application.yml配置文件（包括Mybatis）"></a>2.application.yml配置文件（包括Mybatis）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:///market?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">  type-aliases-package: com.sc.entity</span><br></pre></td></tr></table></figure><h4 id="3-Thymeleaf声明连接"><a href="#3-Thymeleaf声明连接" class="headerlink" title="3.Thymeleaf声明连接"></a>3.Thymeleaf声明连接</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:th="http://www.thymeleaf.org"</span><br></pre></td></tr></table></figure><h4 id="4-购物车功能"><a href="#4-购物车功能" class="headerlink" title="4.购物车功能"></a>4.购物车功能</h4><ul><li>1.商品数量加减按钮实现商品数量增加或减少</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">        <span class="comment">//按下+按钮</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//取出当前页面的数量</span></span><br><span class="line">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value;</span><br><span class="line">            <span class="comment">//将数量加一然后再赋值给显示数量的&lt;inpue&gt;中的value属性</span></span><br><span class="line">            ++num;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value=num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按下-按钮</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value;</span><br><span class="line">            <span class="comment">//判断数量是不是负数</span></span><br><span class="line">            <span class="keyword">if</span>(--num&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value=num</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出当前页面的数量，与数量相乘，赋值给小计所属的div的页面显示内容</span></span><br><span class="line">            <span class="comment">//给num重新赋值是放置出现num=-1情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.添加商品到购物车中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveToCart</span>(<span class="params">productid</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> productnum1=<span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value;</span><br><span class="line">        <span class="keyword">var</span> productnum=productnum1;</span><br><span class="line">        <span class="keyword">var</span> userid1=<span class="built_in">document</span>.getElementById(<span class="string">"userid"</span>).value;</span><br><span class="line">        <span class="built_in">console</span>.log(userid1);</span><br><span class="line">        <span class="keyword">var</span> userid=userid1;</span><br><span class="line">        <span class="keyword">var</span> data=&#123;</span><br><span class="line">            <span class="string">"productid"</span>:productid,</span><br><span class="line">            <span class="string">"productnum"</span>:productnum,</span><br><span class="line">            <span class="string">"userid"</span>:userid</span><br><span class="line">        &#125;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">'POST'</span>,</span><br><span class="line">            url:<span class="string">'/shop-cart'</span>,</span><br><span class="line">            contentType:<span class="string">'application/json'</span>,</span><br><span class="line">            data:<span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">200</span>)&#123;</span><br><span class="line">                    alert(<span class="string">"添加成功"</span>);</span><br><span class="line">                    <span class="built_in">window</span>.location.reload();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(<span class="string">"添加失败"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">"操作失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/shop-cart"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveToCart</span><span class="params">(@RequestBody Minicart minicart, Map map, HttpSession httpSession)</span></span>&#123;</span><br><span class="line">       minicartService.addMinicart(minicart);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>3.点击x删除购物车中的商品</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">minicartid</span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">'DELETE'</span>,</span><br><span class="line">            url:<span class="string">'/shop-cart/'</span> + minicartid,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">300</span>) &#123;</span><br><span class="line">                    alert(<span class="string">"删除成功!"</span>);</span><br><span class="line">                    <span class="built_in">window</span>.location.reload();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/shop-cart/&#123;minicartid&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteItem</span><span class="params">(@PathVariable(<span class="string">"minicartid"</span>)</span> <span class="keyword">int</span> minicartid)</span>&#123;</span><br><span class="line">        minicartService.deleteMinicartById(minicartid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-关联的两张表，Controller层遍历查询出来的列表来在前端展示关联表的信息"><a href="#5-关联的两张表，Controller层遍历查询出来的列表来在前端展示关联表的信息" class="headerlink" title="5.关联的两张表，Controller层遍历查询出来的列表来在前端展示关联表的信息"></a>5.关联的两张表，Controller层遍历查询出来的列表来在前端展示关联表的信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Minicart&gt; minicarts = minicartService.getMinicartByUserId(userid);</span><br><span class="line">        <span class="comment">//for循环遍历购物车列表</span></span><br><span class="line">        <span class="keyword">for</span> (Minicart minicart:minicarts)&#123;</span><br><span class="line">            <span class="comment">//得到购物车中每个商品的产品id</span></span><br><span class="line">            <span class="keyword">int</span> productid1 = minicart.getProductid();</span><br><span class="line">            <span class="comment">//得到购物车中每个商品的卖家用户id</span></span><br><span class="line">            <span class="keyword">int</span> userid1 = minicart.getUserid();</span><br><span class="line">            <span class="comment">//根据产品id查看产品信息</span></span><br><span class="line">            Product product1 = productService.getProductById(productid1);</span><br><span class="line">            <span class="comment">//根据卖家id查看卖家信息</span></span><br><span class="line">            User user1 = userService.getUserByUserId(userid1);</span><br><span class="line">            <span class="comment">//设置购物车中的卖家信息</span></span><br><span class="line">            minicart.setUser(user1);</span><br><span class="line">            <span class="comment">//设置购物车中的产品信息</span></span><br><span class="line">            minicart.setProduct(product1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>数据库结构如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table minicart(</span><br><span class="line">  minicartid int not null auto_increment primary key comment &#39;主键购物车ID&#39;,</span><br><span class="line">  productid int not null comment &#39;商品ID&#39;,</span><br><span class="line">  userid int not null comment &#39;用户ID&#39;,</span><br><span class="line">  productnum int not null comment &#39;商品数量&#39;</span><br><span class="line">)engine &#x3D;InnoDB auto_increment&#x3D;200 default charset &#x3D;utf8;</span><br><span class="line"></span><br><span class="line">alter table minicart add foreign key (productid) references product(productid);</span><br><span class="line"></span><br><span class="line">alter table minicart add foreign key (userid) references user(userid);</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-访问量功能"><a href="#6-访问量功能" class="headerlink" title="6.访问量功能"></a>6.访问量功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">Get_Visit_Count</span><span class="params">(String txtFilePath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取文件(字符流)</span></span><br><span class="line">            BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(txtFilePath),<span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="comment">//循环读取数据</span></span><br><span class="line">            String str = <span class="keyword">null</span>;</span><br><span class="line">            StringBuffer content = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">while</span> ((str = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                content.append(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            in.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println(content);</span></span><br><span class="line">            <span class="comment">// 解析获取的数据</span></span><br><span class="line">            Long count = Long.valueOf(content.toString());</span><br><span class="line">            count ++; <span class="comment">// 访问量加1</span></span><br><span class="line">            <span class="comment">//写入相应的文件</span></span><br><span class="line">            BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(txtFilePath),<span class="string">"UTF-8"</span>));</span><br><span class="line">            out.write(String.valueOf(count));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清楚缓存</span></span><br><span class="line">            out.flush();</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String txtFilePath = <span class="string">"D://count.txt"</span>;</span><br><span class="line">Long count = Get_Visit_Count(txtFilePath);</span><br><span class="line">map.put(<span class="string">"count"</span>, count); <span class="comment">// 后台参数传递给前端</span></span><br></pre></td></tr></table></figure><h4 id="7-Thymeleaf中的js中”window-location-href”的格式问题"><a href="#7-Thymeleaf中的js中”window-location-href”的格式问题" class="headerlink" title="7.Thymeleaf中的js中”window.location.href”的格式问题"></a>7.Thymeleaf中的js中”window.location.href”的格式问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:<span class="keyword">if</span>=<span class="string">"$&#123;alert!=null&#125;"</span> th:inline=<span class="string">"javascript"</span>&gt;</span><br><span class="line">        <span class="keyword">var</span> message=[[$&#123;alert&#125;]];</span><br><span class="line">        alert(message);</span><br><span class="line">        <span class="built_in">window</span>.location.href=[[@&#123;/user_update_info/&#123;roleid&#125;/&#123;userid&#125;(userid=$&#123;userid&#125;,roleid=$&#123;roleid&#125;)&#125;]];</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-Springboot项目的Mapper层需要注意的配置"><a href="#8-Springboot项目的Mapper层需要注意的配置" class="headerlink" title="8.Springboot项目的Mapper层需要注意的配置"></a>8.Springboot项目的Mapper层需要注意的配置</h4><ul><li>每一个Mapper层需要在最上面加上@Mapper注解</li><li>启动类上需要加上<code>@MapperScan(value = &quot;com.sc.mapper&quot;)</code>注解</li></ul><h4 id="9-目前为止配置的Shiro拦截，以后基本按照这个结构来写，所以进行备份"><a href="#9-目前为止配置的Shiro拦截，以后基本按照这个结构来写，所以进行备份" class="headerlink" title="9.目前为止配置的Shiro拦截，以后基本按照这个结构来写，所以进行备份"></a>9.目前为止配置的Shiro拦截，以后基本按照这个结构来写，所以进行备份</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.shiro.CustomRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    配置Shiro的web过滤器，拦截浏览器请求并交给SecurityManager处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">webFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean filterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        filterFactoryBean.setSecurityManager(securityManager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置拦截链，使用LinkedHashMap，因为LinkedHashMap是有序的，Shiro会根据添加的顺序进行拦截</span></span><br><span class="line">        <span class="comment">//Map&lt;K,V&gt;：K指的是拦截的URL，V指的是该URL是否拦截</span></span><br><span class="line">        Map&lt;String,String&gt; filterChainMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        filterChainMap.put(<span class="string">"/statics/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/market"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/admin/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/index_easy_product_search"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/to_register"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/index_filter_price"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/index_products"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/index_product_detail/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/index_to_category_product/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/to_admin"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/register"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/logout"</span>,<span class="string">"logout"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/to_login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置拦截请求后跳转的URL</span></span><br><span class="line">        filterFactoryBean.setLoginUrl(<span class="string">"/market"</span>);</span><br><span class="line">        filterFactoryBean.setFilterChainDefinitionMap(filterChainMap);</span><br><span class="line">        <span class="keyword">return</span>  filterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principal)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取输入的账号</span></span><br><span class="line">        String username = (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过username从数据库中查到user实体</span></span><br><span class="line">        User user = userService.getUserByUserName(username);</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过SimpleAuthenticationInfo做身份处理</span></span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), getName());</span><br><span class="line">        <span class="comment">//返回身份处理对象</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 错误解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot</title>
      <link href="/jokerboozp.github.io/2019/10/28/2019-10-25-Springboot/"/>
      <url>/jokerboozp.github.io/2019/10/28/2019-10-25-Springboot/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong><em>利用SSM框架构建项目是毕业设计的主要方法，但是有一个很头疼的问题：各种配置文件和jar包的兼容问题。所以就出现了Maven，但是Maven还是需要你去配置各种SSM框架的配置文件，也是很麻烦。所以就出现了SpringBoot。我学习SpringBoot的原因主要是原本想要利用SSM框架+Shiro完成一个购物网站项目，但是在项目的构建过程中，Shiro和SSM的jar包之间总存在各种不兼容或者是框架的问题，所以就转向了SpringBoot，而且这样以后也方便进行Redis和Nginx的整合。Springboot可以利用Java类和代码的方式进行配置框架，省去了新建各种配置文件的麻烦，只用创建Java类即可，可以说是相当省心了</em></strong></p></li><li><p>这是一篇Springboot的中级讲解博文，有些基础知识不再涉及，和SSM有关的不再举例和讲解。<a id="more"></a></p></li><li><p>代码本就是意见枯燥无味的事情，而且涉及到整合框架或者资源配置的时候又很复杂繁琐，只有静下心研究才能学到东西。全靠别人教你是不存在的。但是如果你有SSM框架基础，并且可以利用SSM框架打出一个完整的项目，那么这篇文章对你来说就没有什么压力了。</p></li></ul><h4 id="本篇博客较长，所以在头部先声明一下会讲到的内容"><a href="#本篇博客较长，所以在头部先声明一下会讲到的内容" class="headerlink" title="本篇博客较长，所以在头部先声明一下会讲到的内容"></a>本篇博客较长，所以在头部先声明一下会讲到的内容</h4><ol><li>Springboot项目的搭建</li><li>Springboot的文件结构</li><li>Springboot和Mybatis的整合</li><li>Springboot、Mybatis、Shiro的整合</li><li>一些遇到的错误信息总结</li></ol><h4 id="1-搭建一个简单的Springboot项目"><a href="#1-搭建一个简单的Springboot项目" class="headerlink" title="1.搭建一个简单的Springboot项目"></a>1.搭建一个简单的Springboot项目</h4><ul><li>1.需要的工具<ul><li>Idea 2018.3</li><li>JDK 8</li><li>Maven 3.6.0</li><li>Mysql 5.7</li></ul></li><li>2.搭建步骤：<ul><li>1.打开Idea，选择create a new project</li><li>2.左侧边栏选择Spring Initializr，右侧边栏保持默认，点击next</li><li>3.自定义Group、Artifact、Package（当你输入group和artifact之后，package栏会自动出现两者的组合，但是我更倾向于把package定义成com.sc），完成后点击next</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20133355.png" alt="new project"></li><li>4.因为不涉及到整合Mybaits，所以先创建一个web项目即可。弹出的窗口选择如下图所示，之后一路next、finish即可</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20133847.png" alt="img1"></li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20133909.png" alt="img2"></li><li>5.完成后项目目录如图所示</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20134313.png" alt="final"></li><li>6.在resources目录下的static文件夹下创建一个index.html，并输入一段随意的内容，用来验证springboot是否启动成功</li><li>7.运行BlogApplication.java。成功后打开浏览器，地址栏输入<a href="http://localhost:8080/index.html。若成功显示html网页，则说明Springboot框架搭建成功" target="_blank" rel="noopener">http://localhost:8080/index.html。若成功显示html网页，则说明Springboot框架搭建成功</a></li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20134555.png" alt="run"></li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20135545.png" alt="result"></li></ul></li></ul><h4 id="2-Springboot的文件结构"><a href="#2-Springboot的文件结构" class="headerlink" title="2.Springboot的文件结构"></a>2.Springboot的文件结构</h4><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20134313.png" alt="projectstructer"></p><ul><li>1.Java：存放Java源代码</li><li>2.resources：资源文件目录</li><li>3.static：静态资源文件</li><li>4.templates：视图模板文件</li><li>5.application.properties(后面会更改为application.yml)：核心配置文件</li><li>6.pom.xml：和maven相同，用来存放相关依赖</li></ul><h4 id="3-Springboot和Mybatis的整合"><a href="#3-Springboot和Mybatis的整合" class="headerlink" title="3.Springboot和Mybatis的整合"></a>3.Springboot和Mybatis的整合</h4><ul><li>Springboot与Mybaits的整合不同于利用maven创建SSM框架，因为Springboot已经集成了Spring、不需要去配置一系列复杂的文件。</li><li><strong>步骤</strong><ul><li>1.创建一个新项目，前几步是一样的，直到选择依赖的一步，需要做出一些改变，需要选择的依赖有如下图所示：</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20140926.png" alt="project"></li><li>2.创建成功之后，把application.properties更改为application.yml。在yml文件中配置Mybatis（直接用已经建好的项目来演示了，懒得新建项目了）</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20141308.png" alt="yml"></li><li>代码如下（application.yml）：</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:///market?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false  //设置数据库地址</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver   //设置数据库驱动</span><br><span class="line">    username: root   //数据库用户名</span><br><span class="line">    password: root   //数据库密码</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8080   //项目监听端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml   //配置mybatis扫描xml文件的路径，在这里是resources目录下的mapper文件夹里面所有的xml文件</span><br><span class="line">  type-aliases-package: com.sc.entity    //设置别名</span><br></pre></td></tr></table></figure><ul><li>配置完毕之后就完成了Springboot与Mybatis的整合</li><li>测试请自行完成。。。如果SSM框架都不会的话，看这个可能会压力山大</li></ul><h4 id="4-Springboot、Mybaits、Shiro的整合"><a href="#4-Springboot、Mybaits、Shiro的整合" class="headerlink" title="4.Springboot、Mybaits、Shiro的整合"></a>4.Springboot、Mybaits、Shiro的整合</h4><ul><li>利用Shiro可以完成登陆以及拦截器功能，也可以实现更加复杂的动态权限加载，但是目前来说用不到，所以只进行拦截器和登录功能的讲解</li><li><strong>首先先说一下Shiro认证的过程</strong>：<ul><li>创建SecurityManager安全管理器 &gt; 主体Subject提交认证信息 &gt; SecurityManager安全管理器认证 &gt; SecurityManager调用Authenticator认证器认证 &gt;Realm验证</li><li>其中<ul><li>Subject：主体，代表了当前“用户”；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</li><li>SecurityManager安全管理器：所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；负责与后边介绍的其他组件进行交互。（类似于SpringMVC中的DispatcherServlet控制器）</li><li>Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</li></ul></li></ul></li><li><strong>步骤</strong><ul><li><strong>注意：以下所有操作是在完成了Springboot与Mybatis的集成的基础上进行的</strong></li><li>1.首先在数据库中创建一个user表，内容包含username、password。这里不再演示</li><li>2.添加pom依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.对于未认证的用户请求进行拦截，跳转到认证界面（这里我让他直接跳转到了首页）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.shiro.CustomRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    配置Shiro的web过滤器，拦截浏览器请求并交给SecurityManager处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">webFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean filterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置拦截链，使用LinkedHashMap，因为LinkedHashMap是有序的，Shiro会根据添加的顺序进行拦截</span></span><br><span class="line">        <span class="comment">//Map&lt;K,V&gt;：K指的是拦截的URL，V指的是该URL是否拦截</span></span><br><span class="line">        Map&lt;String,String&gt; filterChainMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        filterChainMap.put(<span class="string">"/static/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/logout"</span>,<span class="string">"logout"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/to_login"</span>,<span class="string">"anon"</span>);</span><br><span class="line">        filterChainMap.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置拦截请求后跳转的URL</span></span><br><span class="line">        filterFactoryBean.setLoginUrl(<span class="string">"/index.html"</span>);</span><br><span class="line">        filterFactoryBean.setFilterChainDefinitionMap(filterChainMap);</span><br><span class="line">        <span class="keyword">return</span>  filterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.在ShiroConfig配置类中创建SecurityManager安全管理器。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>5.创建自定义Realm：CustomRealm</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>6.重写AuthorizingRealm中的认证方法doGetAuthenticationInfo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sc.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sc.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principal)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取输入的账号</span></span><br><span class="line">        String userName = (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//通过username从数据库中查到user实体</span></span><br><span class="line">        User user = userService.getUserByUserName(userName);</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过SimpleAuthenticationInfo做身份处理</span></span><br><span class="line">        SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), getName());</span><br><span class="line">        <span class="comment">//返回身份处理对象</span></span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>7.将自定义Realm注入到SecurityManager中。注意：<strong>注入的时候只能使用下面所示的方法，不能直接new CustomRealm，否则自定义Realm中的@AutoWired注解无法生效，也就是不能引入Service中的方法来进行查找user实体</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomRealm <span class="title">customRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomRealm();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>8.Shiro配置类的过滤器中启用安全管理器SecurityManager,即filterFactoryBean中配置SecurityManager</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterFactoryBean.setSecurityManager(securityManager());</span><br></pre></td></tr></table></figure><ul><li>9.创建LoginController，并实现登陆功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Login</span><span class="params">(String userName,String password,Map map)</span></span>&#123;</span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userName, password);</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//主体提交登录请求到SecurityManager</span></span><br><span class="line">            currentUser.login(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"密码不正确"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException uae)&#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"账号不存在"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AuthenticationException ae)&#123;</span><br><span class="line">            map.put(<span class="string">"msg"</span>,<span class="string">"状态异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentUser.isAuthenticated())&#123;</span><br><span class="line">            map.put(<span class="string">"userName"</span>,userName);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            token.clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>10.项目目录：</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-10-28%20144102.png" alt="img"></li><li>11.<strong>注意！！</strong>：这里省略了利用前端页面输入的username查找数据库中的user实体的方法，也就是Mapper层和Service层，这两个是SSM的基础，感觉不需要讲解；也木有前端模板，因为就一个form表单提交，没必要单独写出来。</li><li>12.最后实现的效果：成功登陆则跳转到success.html；验证未通过则显示密码错误或用户不存在；如果后台抛出AuthenticationException，则提示状态异常，这时候后台一般都是显示500错误</li></ul><h4 id="5-一些遇到的错误信息总结"><a href="#5-一些遇到的错误信息总结" class="headerlink" title="5.一些遇到的错误信息总结"></a>5.一些遇到的错误信息总结</h4><ul><li>这里记录一些我遇到的错误信息，提供一些参考</li><li>1.<strong>shiro配置异常-org.springframework.beans.factory.BeanInitializationException: The security manager does not implement the WebSecurityManager interface.</strong><ul><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/1709597-20190706113831052-317869678.png" alt="error1"></li><li>错误原因：securitymanager应该使用的是DefaultWebSecurityManager。很容易就写成了DefaultSecurityManager</li><li>代码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(customRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>2.<strong>MYSQL:WARN: Establishing SSL connection without server’s identity verification is not recommended.</strong></p><ul><li>错误原因：在MYSQL5.5.45+, 5.6.26+ 和 5.7.6+版本中才有这个问题，提示警告不建议使用没有带服务器身份验证的SSL连接</li><li>解决办法：在application.yml中配置数据库连接的时候在后面加上useSSL=false</li></ul></li><li><p>3.<strong>Spring Boot：Consider defining a bean of type ‘<em>.</em>.*’ *in your configuration</strong></p><ul><li>解决链接：<a href="https://www.cnblogs.com/JealousGirl/p/bean.html" target="_blank" rel="noopener">https://www.cnblogs.com/JealousGirl/p/bean.html</a></li></ul></li><li><p>4.@AutoWired注解无法生效</p><ul><li>生成原因以及解决方法已在上面说过，这里不再说明[<a href=""></a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础1018</title>
      <link href="/jokerboozp.github.io/2019/10/18/2019-10-18-Java%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/10/18/2019-10-18-Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="首先，问题"><a href="#首先，问题" class="headerlink" title="首先，问题"></a>首先，问题</h4><ul><li>下面有关java hashmap的说法错误的是？</li></ul><ol><li>HashMap 的实例有两个参数影响其性能：“初始容量” 和 “加载因子”。</li><li>HashMap 的实现不是同步的，意味着它不是线程安全的</li><li>HashMap通过开放地址法解决哈希冲突</li><li>HashMap中的key-value都是存储在Entry数组中的<a id="more"></a></li></ol><ul><li>答案：3</li><li>HashMap有两个参数会影响其性能，初始容量和加载因子，容量是HashMap在创建时“桶”的数量，而初始容量是哈希表在创建时分配的空间大小。加载因子是哈希表在其容量自动增加时能达到多满的衡量尺度（比如默认为0.75，即桶中数据达到3/4就不能再放数据了）。如果加载因子过大，迭代性能会下降，虽然空间开销减少。如果初始容量小于最大条目数除以加载因子，则会发生 rehash 操作。rehash操作即重建内部数据结构，一般是增加桶数为原来的两倍。</li><li>HashMap是非同步的，所以如果多个线程同时访问一个哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须保持外部同步。</li><li>hashmap底层是以数组方式进行存储。将key-value对作为数组中的一个元素进行存储。key-value都是Map.Entry中的属性。其中将key的值进行hash之后进行存储，即每一个key都是计算hash值，然后再存储。每一个Hash值对应一个数组下标，数组下标是根据hash值和数组长度计算得来。</li><li><strong>对于3选项：一直搞不明白3选项为什么是错误的，网上的解释也都是一句话：Hash Map的哈希冲突用拉链法解决。后来才明白自己理解错误，题目在玩文字游戏，Hash算法中可以使用开放地址法、拉链法、再散列、建立一个公共溢出区四个方法解决哈希冲突；但是HashMap中只能用开放定址法和拉链法，注意是<em>开放定址法</em>！！！！所以3中的开放地址法有错。</strong></li></ul><h4 id="散列表（HashTable）"><a href="#散列表（HashTable）" class="headerlink" title="散列表（HashTable）"></a>散列表（HashTable）</h4><ul><li>也称为哈希表。是字典的一种抽象。比如说你要查一个字，是通过这个字的拼音首字母，找到这个字的页码，然后翻到那页找就可以了。这种方法直接把时间复杂度降到了常数。但是要牺牲一定的计算索引的时间。计算索引的那个函数称为哈希函数（散列函数）。如果两个不同的key算出了同一个索引，此时就要用到一定的方法来解决哈希冲突。</li><li>解决哈希冲突的三种方法：拉链法、开放地址法、再散列法</li></ul><h4 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h4><ul><li>散列表的负载因子的值为：α = 填入表中的元素个数 / 散列表的长度。</li><li>分析：由于表长是定值，那么α就与”填入表中的元素个数”成正比。所以，α越大，就说明填入表中的元素个数越多，那么产生冲突的可能性就越大；反之，α越小，就说明填入表中的越少，产生的冲突就越小，但是可能浪费的空间就越多。</li><li>为啥负载因子越小越好？打个比方，房间大小一定，住的人越少越舒坦。参考原因如下图</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E8%A3%85%E5%A1%AB%E5%9B%A0%E5%AD%90.jpg" alt="装填因子"></li><li>其中α代表负载因子，无论哪一种处理哈希冲突的方式，装填因子越小，成功查找的平均查找长度就越短，不成功查找的平均查找长度就越长，所以尽量保证负载因子小一点</li></ul><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><ul><li>哈希函数一般具有以下特点：<ul><li>相等的key产生相等的哈希值</li><li>计算简单方便</li><li>哈希值分布均匀（若过度集中，则容易使效率降到O(n)）</li></ul></li></ul><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><ul><li>若两个不相等的key产生了相等的哈希值，这时就产生了哈希冲突</li></ul><h4 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h4><ul><li>当发生哈希冲突时，如果该哈希表还没有被填满，那么就把该元素放到哈希表的下一个空闲的位置。（具体分类不再描述）</li><li>负载因子特别重要，应该限制在07-0.8之内。若超过0.8，就可能产生冲突的概率非常大，那么CPU缓存不命中率也就越高</li><li><strong>优点</strong>：简单、易懂</li><li><strong>缺点</strong>：一旦发生了哈希冲突，所有的冲突连接在一起，很容易产生数据”堆积”。即不同的数据占用可以利用的位置，就使得寻找其余数据的位置需要进行多次比较，就会导致查找的效率降低。</li></ul><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><ul><li>Java标准库的HashMap基本上就是拉链法实现的。拉链法的实现比较简单，将链表和数组结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加入到链表中即可。在拉链法中，装填因子α可以大于1，但一般均取α≤1</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81jpg.jpg" alt="拉链法"></li><li><strong>实现步骤</strong><ul><li>得到一个key</li><li>计算key的hashvalue</li><li>根据hashvalue值定位到data[hashValue]。（data[hashValue]是一条链表）</li><li>若data[hashValue]为空则直接插入</li><li>不然则添加到链表末尾</li></ul></li><li>需要注意的是，哈希函数必须保证哈希值的均匀分布，若全部集中在一条链表中，则时间复杂度和顺序链表相同。</li><li>还有一点是数组的大小，若你能估计数据的大小，则直接指定即可，否则就需要动态扩充数组</li></ul><h4 id="利用一个不会动态开辟空间的静态哈希表做一个简单例子"><a href="#利用一个不会动态开辟空间的静态哈希表做一个简单例子" class="headerlink" title="利用一个不会动态开辟空间的静态哈希表做一个简单例子"></a>利用一个不会动态开辟空间的静态哈希表做一个简单例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HashFunctionHost</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口约定根据index确定的hash值</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K,V&gt; <span class="function"><span class="keyword">double</span> <span class="title">hashFunction</span><span class="params">(HashTable&lt;K,V&gt; hashTable,K x)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(K key, V value)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;[] elements;</span><br><span class="line">    <span class="keyword">private</span> HashFunctionHost hashFunctionHost;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HashFunctionHost DEFAULT_HASH_FUNCTION_HOST = <span class="keyword">new</span> DivisionHashFunctionHost();</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashTable</span><span class="params">(<span class="keyword">int</span> size, HashFunctionHost hashFunctionHost)</span></span>&#123;</span><br><span class="line">        elements = <span class="keyword">new</span> LinkedList[size];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">            elements[i] = <span class="keyword">new</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.hashFunctionHost = hashFunctionHost;</span><br><span class="line">        capacity = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_SIZE, DEFAULT_HASH_FUNCTION_HOST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) hashFunctionHost.hashFunction(<span class="keyword">this</span>, key);</span><br><span class="line">        Iterator&lt;Entry&lt;K, V&gt;&gt; iterator = elements[index].iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//找到了重复的key则直接修改entry中key对应的value</span></span><br><span class="line">            Entry&lt;K, V&gt; temp = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(key.equals(temp.getKey()))&#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key ,V value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) hashFunctionHost.hashFunction(<span class="keyword">this</span>,key);</span><br><span class="line">        Entry&lt;K, V&gt; newEntry = <span class="keyword">new</span> Entry&lt;K,V&gt;(key,value);</span><br><span class="line">        <span class="comment">//没有哈希冲突</span></span><br><span class="line">        <span class="keyword">if</span>(elements[index].size()==<span class="number">0</span>)&#123;</span><br><span class="line">            elements[index].add(newEntry);</span><br><span class="line">            capacity++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发生了哈希碰撞则需要遍历链表判断k值是不是已经存在了</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line">            <span class="keyword">if</span>(entry != <span class="keyword">null</span>)&#123;</span><br><span class="line">                entry.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//执行到这里说明没有发现重复的key 插在链表头部</span></span><br><span class="line">            elements[index].addFirst(newEntry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) hashFunctionHost.hashFunction(<span class="keyword">this</span>, key);</span><br><span class="line">        Iterator&lt;Entry&lt;K, V&gt;&gt; iterator = elements[index].iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Entry&lt;K, V&gt; entry = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(entry.getKey()==key)&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line">        Entry&lt;K, V&gt; entry = getEntry(key);</span><br><span class="line">        <span class="keyword">if</span>(entry == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bucketNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elements.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>在上述代码中需要注意：</strong><ul><li>首先对于一个哈希表，我们可以自己传入一个哈希函数来完成我们的映射，但是Java不提供函数指针。这时候我们可以使用一个宿主类来包含这个我们想要传递的方法，通过传递宿主类来起传递方法的作用，也就是上述代码中的接口HashFunctionHost的实现类。</li><li>在遍历数组中的链表的时候，我们不要使用for循环加上链表的get()方法，而是使用Iterator。看底层源码我们就会发现get()方法实际上会从头遍历一遍链表，知道找到对应元素，也就是说我们会做很多无用遍历。相反Iterator就不是这样，对于访问Iterator下一个元素的复杂度是O(1)</li><li>我们在put的时候有三种情况，分别是<strong>没有哈希冲突，直接插入；有哈希冲突，但是没有相同的key，插入到链表头部；有哈希冲突，而且存在相同key，我们就需要修改那个key对应的value</strong></li><li>在比较key的时候使用equals而不是<code>==</code>，equals比较的是值，<code>==</code>比较的是内存地址。如果我们想在key值相等的时候就对value做出替换，那么我们就要使用equals了，并且要对存入哈希表的对象的equals方法进行重写</li></ul></li></ul><h4 id="拉链法的优点"><a href="#拉链法的优点" class="headerlink" title="拉链法的优点"></a>拉链法的优点</h4><ol><li>拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短</li><li>由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况</li><li>开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间</li><li>在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可</li></ol><h4 id="拉链法的缺点"><a href="#拉链法的缺点" class="headerlink" title="拉链法的缺点"></a>拉链法的缺点</h4><ul><li>指针需要额外的空间。故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度。</li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li>想简单了解其他方法，请转<a href="https://www.cnblogs.com/huangfox/archive/2012/07/06/2578898.html。这里不再赘述。" target="_blank" rel="noopener">https://www.cnblogs.com/huangfox/archive/2012/07/06/2578898.html。这里不再赘述。</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/jokerboozp.github.io/2019/10/14/2019-10-14-Mysql/"/>
      <url>/jokerboozp.github.io/2019/10/14/2019-10-14-Mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="事务的基本特性（ACID）"><a href="#事务的基本特性（ACID）" class="headerlink" title="事务的基本特性（ACID）"></a>事务的基本特性（ACID）</h4><ul><li>1.原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节，事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样，也就是说事务是一个不可分割的整体，就像化学中的原子，是物质构成的基本单位。</li><li>2.一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏，比如A向B转账，不可能A扣了钱，B却没有收到</li><li>3.隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡里取钱，在A取钱的过程结束前，B不能向这张卡转账<a id="more"></a></li><li>4.持久性（Durability）：事务完成后，事务对数据库的所有更改将被保存到数据库，不能回滚。</li></ul><h4 id="事务的并发问题"><a href="#事务的并发问题" class="headerlink" title="事务的并发问题"></a>事务的并发问题</h4><ul><li>1.脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据就是脏数据</li><li>2.不可重复读：事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据做了更新并提交，导致事务A在多次读取同一数据时，结果不一致</li><li>3.幻读：系统管理员A将数据库中的所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后，发现还有一条数据没有改过来，就好像发生幻觉一样，这就叫做幻读</li><li>不可重复读和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增和删除，解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</li></ul><h4 id="Mysql事务隔离级别"><a href="#Mysql事务隔离级别" class="headerlink" title="Mysql事务隔离级别"></a>Mysql事务隔离级别</h4><ul><li>1.Read-Uncommitted（读取未提交内容）<ul><li>在该隔离级别中，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为他的实际性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）</li></ul></li><li>2.Read-Committed（读取提交内容）<ul><li>这是大多数数据库系统的默认隔离级别（但不是Mysql默认的）。它满足了隔离的简单定义，一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的不可重读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理期间可能会有新的commit，所以同一select可能返回不同结果</li></ul></li><li>3.Repeatable-Read（可重读）<ul><li>这是Mysql的默认事务隔离级别，他确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个问题：幻读。InnoDB和Falcon存储引擎通过多版本并发控制机制（MVCC）解决了该问题。</li></ul></li><li>4.Serializable（可串行化）<ul><li>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，他在每个读的数据行上加了共享锁。在这个级别时，可能导致大量的超时现象和锁竞争。</li></ul></li><li><strong>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大</strong></li></ul><h4 id="Mysql-MVCC实现机制"><a href="#Mysql-MVCC实现机制" class="headerlink" title="Mysql MVCC实现机制"></a>Mysql MVCC实现机制</h4><ul><li>MVCC是一种多版本并发控制机制</li><li><strong>MVCC是为了解决什么问题</strong><ul><li>大多数的Mysql事务型存储引擎，如InnoDB，Falcon以及PBXT都不使用一种简单的行锁机制，事实上，他们都和MVCC多版本并发控制来一起使用</li><li>锁机制可以控制并发操作，但是其系统开销比较大，而MVCC可以在大多数情况下代替行级锁，使用MVCC能降低其系统开销</li></ul></li><li><strong>MVCC实现</strong><ul><li>MVCC是通过保存数据在某个时间点的快照来实现的，不同存储引擎的MVCC实现是不同的。典型的有乐观并发控制和悲观并发控制</li></ul></li><li><strong>MVCC具体实现分析</strong><ul><li>InnoDB的MVVC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列分别保存了这个行的创建时间，一个保存的是行的删除时间。这里存储的并不是实际的时间值，而是系统版本号（可以理解为事务的ID），每开始一个新的事务，系统版本号就会自动递增，事务开始时刻的系统版本号会作为事务的ID。</li><li>InnoDB的读分为快照读和当前读，快照读是通过MVVC控制的，可能出现幻读的情况。当前读是通过行锁和间隙锁控制的，此时是加了排他锁的，所有其他的事务都不能动当前的事务。所以避免出现了幻读的可能，一般update、delete都是应用的当前读。<ul><li>当前读即加锁读，读取记录的最新版本号，会加锁保证其他并发事物不能修改当前记录，直至释放锁。插入/更新/删除操作默认使用当前读，显示的为select语句加lock in share mode或for update的查询也采用当前读模式。 </li><li>快照读：不加锁，读取记录的快照版本，而非最新版本，使用MVCC机制，最大的好处是读取不需要加锁，读写不冲突，用于读操作多于写操作的应用，因此在不显示加[lock in share mode]/[for update]的select语句，即普通的一条select语句默认都是使用快照读MVCC实现模式。</li></ul></li><li>事务ID不是提交时创建的，在打开一个会话的时候就创建了一个事务ID，ID=1出现了，你在哪打开一个MySQL数据库连接会话，ID=2的事务就出现了</li></ul></li><li><strong>一个小例子：在Repeatable Read隔离级别下，MVVC具体是如何操作的</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table yang(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20));</span><br></pre></td></tr></table></figure><ul><li>INSERT<ul><li>InnoDB为新插入的每一行保存当前系统版本号作为版本号</li><li>第一个事务ID为1</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into yang values(NULL,&#39;yang&#39;) ;</span><br><span class="line">insert into yang values(NULL,&#39;long&#39;);</span><br><span class="line">insert into yang values(NULL,&#39;fei&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>undefined</td></tr><tr><td>2</td><td>long</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr></tbody></table><ul><li>SELECT<ul><li>InnoDB会根据以下两个条件检查每行记录：<ul><li>1.InnoDB只会查找版本号早于当前事务版本的数据行（也就是行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</li><li>2.行的删除版本要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行，在事务开始之前未被删除</li><li><strong>只有1，2同时满足的记录，才能返回作为查询结果</strong></li></ul></li></ul></li><li>DELETE<ul><li>InnoDB会为删除的每一行保存当前系统的版本号（事务ID）作为删除标识</li><li>下述代码是第二个事务，ID为2</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from yang;  &#x2F;&#x2F;(1)</span><br><span class="line">select * from yang;  &#x2F;&#x2F;(2)</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li><strong>假设1</strong><ul><li>假设在执行这个事务ID为2的过程中，刚执行到(1)，这时，另一个事务ID为3往这个表里添加了一条数据</li><li>下述代码是第三个事务，ID为3</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into yang values(NULL,&#39;tian&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>这时表中的数据如下</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>undefined</td></tr><tr><td>2</td><td>long</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr><tr><td>4</td><td>tian</td><td>3</td><td>undefined</td></tr></tbody></table><ul><li>然后接着执行事务2中的(2)，由于ID=4的数据的创建时间（事务ID=3），执行当前事务的ID为2，而InnoDB只会查找ID小于或等于当前事务ID的数据行，所以ID=4的数据行并不会在执行事务2中的(2)被检索出来。在事务2中的两条select语句检索出来的数据如下表</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>undefined</td></tr><tr><td>2</td><td>long</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr></tbody></table><ul><li><strong>假设2</strong><ul><li>假设在执行这个事务ID为2的过程中，刚执行到(1)，假设事务执行到事务3后，接着又执行了事务4</li><li>第四个事务</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start   transaction;  </span><br><span class="line">delete from yang where id&#x3D;1;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>此时数据库中的数据如下</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>4</td></tr><tr><td>2</td><td>long</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr><tr><td>4</td><td>tian</td><td>3</td><td>undefined</td></tr></tbody></table><ul><li>接着执行事务ID为2的事务(2)，根据SELECT检索条件可以知道，他会检索创建时间（创建事务的ID）小于当前事务ID的行和删除时间（删除事务的ID）大于当前事务的行。而ID=4的行上面已经说过，而ID=1的行由于删除时间（删除事务的ID）大于当前事务的ID，所以事务2的(2)也会把id=1的数据检索出来。所有事务2中的两条select语句检索出来的数据都如下表所示</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>4</td></tr><tr><td>2</td><td>long</td><td>1</td><td>undefined</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr></tbody></table><ul><li>UPDATE<ul><li>InnoDB执行Update，实际上是新插入了一行记录，并保存其创建时间为当前事务的ID，同时保存当前事务ID到要Update的行的删除时间</li></ul></li><li><strong>假设3</strong><ul><li>假设在执行完事务2的(1)后又执行，其他用户执行了事务3，4.这时，又有一个用户对这张表执行了UPDATE操作</li><li>第五个事务</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start  transaction;</span><br><span class="line">update yang set name&#x3D;&#39;Long&#39; where id&#x3D;2;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><ul><li>根据UPDATE的更新原则：会生成新的一行，并在原来要修改的列的删除时间列山添加本事务ID，得到的表如下</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>4</td></tr><tr><td>2</td><td>long</td><td>1</td><td>5</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr><tr><td>4</td><td>tian</td><td>3</td><td>undefined</td></tr><tr><td>2</td><td>Long</td><td>5</td><td>undefined</td></tr></tbody></table><ul><li>继续执行事务2的(2),根据select语句检索条件，得到如下表：</li></ul><table><thead><tr><th>id</th><th>name</th><th>创建时间（事务ID）</th><th>删除时间（事务ID）</th></tr></thead><tbody><tr><td>1</td><td>yang</td><td>1</td><td>4</td></tr><tr><td>2</td><td>long</td><td>1</td><td>5</td></tr><tr><td>3</td><td>fei</td><td>1</td><td>undefined</td></tr></tbody></table><ul><li>还是和事务2中的(1)得到相同的结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础1007</title>
      <link href="/jokerboozp.github.io/2019/10/07/2019-10-07-Java%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/10/07/2019-10-07-Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li>栈的特点如下：<ul><li>栈描述的是方法执行的内存模型，每个方法被调用都会创建一个帧栈（存储局部变量、操作数、方法出口等）</li><li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息（实际参数、局部变量等）</li><li>栈属于线程私有，不能实现线程间的共享</li><li>栈的存储特性是“先进后出，后进先出”</li><li>栈是由系统自动分配，速度快。栈是一个连续<a id="more"></a>的内存空间。</li></ul></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li>堆的特点如下：<ul><li>堆用于存储创建好的对象和数组（数组也是对象）</li><li>JVM只有一个堆，被所有线程共享</li><li>堆是一个不连续的内存空间，分配灵活，速度慢！</li></ul></li></ul><h4 id="方法区（静态区）"><a href="#方法区（静态区）" class="headerlink" title="方法区（静态区）"></a>方法区（静态区）</h4><ul><li>方法区的特点如下：<ul><li>JVM只有一个方法区，被所有线程共享。</li><li>方法区实际也是堆，只是用于存储类、常量相关的信息。</li><li>用来存放程序中是不变或唯一的内容。（类信息【class对象】、静态变量、字符串常量等）</li></ul></li></ul><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><ul><li>任何一种垃圾回收算法一般要做两件基本事情<ul><li>发现无用的对象</li><li>回收无用对象占用的内存空间</li></ul></li><li>垃圾回收机制可以将“无用的对象”进行回收。无用的对象指的是没有任何变量引用该对象。Java的垃圾回收器通过相关算法发现无用对象，并进行清除和整理。</li></ul><h4 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h4><ul><li><p>引用计数法</p><ul><li>堆中每个对象都有一个引用计数，被引用一次，计数加1；被引用变量值变为nul，则计数减1，直到计数为0，则表示变成无用对象。优点是算法简单，缺点是“循环引用的无用对象”无法被识别。</li></ul></li><li><p>引用可达法（根搜索算法）</p><ul><li>程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。</li></ul></li></ul><h4 id="通用的分代垃圾回收机制"><a href="#通用的分代垃圾回收机制" class="headerlink" title="通用的分代垃圾回收机制"></a>通用的分代垃圾回收机制</h4><ul><li>分代垃圾回收机制，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。我们将对象分为三种状态：年轻代，年老代，持久代。JVM将堆内存划分为Eden、Survivor和Tenured/Old空间<ul><li>年轻代<ul><li>所有新生成的对象都是放在Eden区。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象，对应的是Minor GC，每次Minor GC会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，但是会浪费内存空间。当年轻代区域存放满对象时，就将对象存放到年老代区域。</li></ul></li><li>年老代<ul><li>在年轻代中经历了N（默认15）次垃圾回收后仍然存活的对象，就会被放到年老代中，因此，可以认为年老代中存放的都是一些生命周期较长的对象。年老代对象越来越多，我们就需要启动Major GC和Full GC（全量回收），来一次大扫除，全面清理年轻代区域和年老代区域。</li></ul></li><li>持久代<ul><li>用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响</li></ul></li></ul></li><li>Minor GC：<ul><li>用于清理年轻代区域，Eden区域满了就会触发一次Minor GC，清理无用对象，将有用对象复制到“Survivor1”、“Survivor2”（这两个区大小空间相同，同一时间只有一个在用，另一个为空）</li></ul></li><li>Major GC：<ul><li>用于清理老年代区域</li></ul></li><li>Full GC：<ul><li>用于清理年轻代、老年代区域。成本较高，会对系统性能产生影响</li></ul></li></ul><h4 id="分代垃圾回收机制的过程"><a href="#分代垃圾回收机制的过程" class="headerlink" title="分代垃圾回收机制的过程"></a>分代垃圾回收机制的过程</h4><ol><li>新创建的对象，绝大多数都会存储到Eden中</li><li>当Eden满了（达到一定比例）不能创建新对象，则触发垃圾回收（GC），将无用对象清理掉，然后剩余对象复制到某个Survivor中，如S1，同时清空Eden区</li><li>当Eden区再次满了，会将S1中的b不能清空的对象存到另一个Survivor中，如S2，同时将Eden区中不能清空的对象，也复制到S1中，保证Eden和S1均被清空</li><li>重复多次（默认15）Survivor中没有被q清理的对象，则会复制到老年代Old（Tenured）区中</li><li>当Old区满了，则会触发一个一次完整的垃圾回收（Full GC），之前新生代的垃圾回收称为（MinorGC）</li></ol><h4 id="JVM调优和Full-GC"><a href="#JVM调优和Full-GC" class="headerlink" title="JVM调优和Full GC"></a>JVM调优和Full GC</h4><ul><li>在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节，有如下原因可能导致Full GC：<ul><li>年老代（Tenured）被写满</li><li>持久代（Perm）被写满</li><li><code>System.gc();</code>被显式调用（程序建议GC启动，不是调用GC）</li><li>上一次GC之后Heap的各域分配策略动态变化</li></ul></li></ul><h4 id="开发中容易造成内存泄露的操作"><a href="#开发中容易造成内存泄露的操作" class="headerlink" title="开发中容易造成内存泄露的操作"></a>开发中容易造成内存泄露的操作</h4><ul><li>创建大量无用对象<ul><li>比如，我们在需要大量拼接字符串时，使用了String而不是StringBuilder</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str =<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    str+=i;<span class="comment">//相当于产生了10000个String对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>静态集合类的使用</p><ul><li>像HashMap、Vector、List等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，所有的对象Object也不能被释放</li></ul></li><li><p>各种连接对象（IO流对象、数据库连接对象、网络连接对象）未关闭</p><ul><li>IO流对象、数据库连接对象、网络连接对象等连接对象属于物理连接，和硬盘h或者网络连接，不使用的时候一定要关闭</li></ul></li><li><p>监听器的使用</p><ul><li>释放对象时，没有删除相应的监听器</li></ul></li><li><p><strong>注意</strong></p><ul><li>程序员无权调用垃圾回收器</li><li>程序员可以调用<code>System.gc();</code>，该方法只是通知JVM，b并不是运行垃圾回收器。尽量少用，会申请启动Full GC，成本高，影响系统性能</li><li>finalize方法：是Java提供给程序员用来释放对象或资源的方法，但是尽量少用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM集成Shiro过程中报错</title>
      <link href="/jokerboozp.github.io/2019/09/26/2019-09-26-SSM%E4%B8%AD%E9%9B%86%E6%88%90Shiro%E5%BC%82%E5%B8%B8/"/>
      <url>/jokerboozp.github.io/2019/09/26/2019-09-26-SSM%E4%B8%AD%E9%9B%86%E6%88%90Shiro%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="SSM集成Shiro过程中报错"><a href="#SSM集成Shiro过程中报错" class="headerlink" title="SSM集成Shiro过程中报错"></a>SSM集成Shiro过程中报错</h4><ul><li>按照步骤进行集成Shiro的操作后，运行项目报404错误，控制台错误信息如下<a id="more"></a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'shiroFilter' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'securityManager' while setting bean property 'securityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityManager' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'cacheManager' while setting bean property 'cacheManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cacheManager' defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.FatalBeanException: Error initializing bean [cacheManager]; nested exception is org.apache.shiro.cache.CacheException: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)</span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1531)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1276)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)</span><br><span class="line">    at org.springframework.context.support.PostProcessorRegistrationDelegate.registerBeanPostProcessors(PostProcessorRegistrationDelegate.java:237)</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:703)</span><br><span class="line">    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:528)</span><br><span class="line">    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:443)</span><br><span class="line">    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:325)</span><br><span class="line">    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)</span><br><span class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4939)</span><br><span class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434)</span><br><span class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</span><br><span class="line">    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)</span><br><span class="line">    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)</span><br><span class="line">    at java.util.concurrent.FutureTask.run(Unknown Source)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Unknown Source)</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityManager' defined in class path resource [applicationContext.xml]: Cannot resolve reference to bean 'cacheManager' while setting bean property 'cacheManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cacheManager' defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.FatalBeanException: Error initializing bean [cacheManager]; nested exception is org.apache.shiro.cache.CacheException: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)</span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1531)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1276)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)</span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)</span><br><span class="line">    ... 24 more</span><br><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cacheManager' defined in class path resource [applicationContext.xml]: Initialization of bean failed; nested exception is org.springframework.beans.FatalBeanException: Error initializing bean [cacheManager]; nested exception is org.apache.shiro.cache.CacheException: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span><br><span class="line">    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)</span><br><span class="line">    at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)</span><br><span class="line">    ... 34 more</span><br><span class="line">Caused by: org.springframework.beans.FatalBeanException: Error initializing bean [cacheManager]; nested exception is org.apache.shiro.cache.CacheException: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at org.apache.shiro.spring.LifecycleBeanPostProcessor.postProcessBeforeInitialization(LifecycleBeanPostProcessor.java:91)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)</span><br><span class="line">    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)</span><br><span class="line">    ... 40 more</span><br><span class="line">Caused by: org.apache.shiro.cache.CacheException: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at org.apache.shiro.cache.ehcache.EhCacheManager.ensureCacheManager(EhCacheManager.java:224)</span><br><span class="line">    at org.apache.shiro.cache.ehcache.EhCacheManager.init(EhCacheManager.java:199)</span><br><span class="line">    at org.apache.shiro.spring.LifecycleBeanPostProcessor.postProcessBeforeInitialization(LifecycleBeanPostProcessor.java:89)</span><br><span class="line">    ... 43 more</span><br><span class="line">Caused by: net.sf.ehcache.config.InvalidConfigurationException: There are 3 errors in your configuration: </span><br><span class="line">    * Cache 'authenticationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'authorizationCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line">    * Cache 'shiro-activeSessionCache' error: If your CacheManager has no maxBytesLocalHeap set, you need to either set maxEntriesLocalHeap or maxBytesLocalHeap at the Cache level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    at net.sf.ehcache.config.Configuration.setupFor(Configuration.java:235)</span><br><span class="line">    at net.sf.ehcache.CacheManager.doInit(CacheManager.java:377)</span><br><span class="line">    at net.sf.ehcache.CacheManager.init(CacheManager.java:358)</span><br><span class="line">    at net.sf.ehcache.CacheManager.<span class="tag">&lt;<span class="name">init</span>&gt;</span>(CacheManager.java:323)</span><br><span class="line">    at org.apache.shiro.cache.ehcache.EhCacheManager.ensureCacheManager(EhCacheManager.java:213)</span><br><span class="line">    ... 45 more</span><br><span class="line"></span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.catalina.core.StandardContext startInternal</span><br><span class="line">严重: Error listenerStart</span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.catalina.core.StandardContext startInternal</span><br><span class="line">严重: Context [/ShiroDemo_3_SSM] startup failed due to previous errors</span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.catalina.core.ApplicationContext log</span><br><span class="line">信息: Closing Spring root WebApplicationContext</span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesJdbc</span><br><span class="line">严重: The web application [/ShiroDemo_3_SSM] registered the JDBC driver [com.mysql.cj.jdbc.Driver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.catalina.loader.WebappClassLoader clearReferencesThreads</span><br><span class="line">严重: The web application [/ShiroDemo_3_SSM] appears to have started a thread named [Abandoned connection cleanup thread] but has failed to stop it. This is very likely to create a memory leak.</span><br><span class="line">一月 16, 2019 10:03:15 下午 org.apache.coyote.AbstractProtocol start</span><br><span class="line">信息: Starting ProtocolHandler ["http-bio-8080"]</span><br></pre></td></tr></table></figure><ul><li>刚开始一直以为是applicationContext.xml中的错误，所以一直在改动spring的配置文件。</li><li>最后发现是ehcache.xml的问题。ehcache.xml中没有配置maxBytesLocalHeap项，配置之后项目正常运行</li><li>下面是改动后的ehcache.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">updateCheck</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"shirocache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsOnDisk</span>=<span class="string">"0"</span> <span class="attr">eternal</span>=<span class="string">"true"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskPersistent</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskSpoolBufferSizeMB</span>=<span class="string">"50"</span> <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LFU"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录记录缓存 锁定10分钟 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"passwordRetryCache"</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"authorizationCache"</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"authenticationCache"</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro-activeSessionCache"</span> <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro_cache"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span> <span class="attr">maxElementsOnDisk</span>=<span class="string">"0"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"FIFO"</span> <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 错误解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gradle基础</title>
      <link href="/jokerboozp.github.io/2019/09/23/2019-09-23-Gradle%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/09/23/2019-09-23-Gradle%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="Gradle安装"><a href="#Gradle安装" class="headerlink" title="Gradle安装"></a>Gradle安装</h4><ol><li>下载Gradle安装包</li><li>解压</li><li>配置环境变量：<ul><li>新建环境变量：GRADLE_HOME；值为gradle的安装目录</li><li>配置path环境变量：%GRADLE_HOME%\bin</li></ul></li><li>安装成功后，打开CMD窗口，输入gradle -v，出现如下信息即为安装成功。</li></ol><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-23%20180827.png" alt="gradle安装成功"></p><h4 id="Gradle项目目录简介"><a href="#Gradle项目目录简介" class="headerlink" title="Gradle项目目录简介"></a>Gradle项目目录简介<a id="more"></a></h4><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-23%20181750.png" alt="Gradle项目结构"></p><ol><li>src/main/java：放置正式代码目录</li><li>src/test/java：放置单元测试代码目录</li><li>src/main/resources：放置正式配置文件目录</li><li>src/test/resources：放置测试配置文件目录</li><li>src/main/webapp：放置页面元素，比如：js、css、img、jsp、html等</li></ol><h4 id="Gradle简单语法"><a href="#Gradle简单语法" class="headerlink" title="Gradle简单语法"></a>Gradle简单语法</h4><ul><li>使用IDEA自带的Groovy Console来编辑</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//介绍Groovy编程</span></span><br><span class="line">println (<span class="string">"hello groovy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//groovy中可以省略语句最末尾的分号</span></span><br><span class="line">println (<span class="string">"hello groovy!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//groovy可以省略括号</span></span><br><span class="line">println <span class="string">"hello groovy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//groovy中如何定义变量</span></span><br><span class="line"><span class="comment">//def是弱类型，groovy会自动根据情况来给变量赋予对应的类型。就像js中的var</span></span><br><span class="line"><span class="keyword">def</span> i=<span class="number">17</span></span><br><span class="line">println i</span><br><span class="line"><span class="keyword">def</span> s=<span class="string">"zhangxiaoxian"</span></span><br><span class="line">println s</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">def</span> list=[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line"><span class="comment">//往list中添加元素</span></span><br><span class="line">list &lt;&lt; <span class="string">'c'</span></span><br><span class="line"><span class="comment">//取出来list中第三个元素</span></span><br><span class="line">println list.get(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个map</span></span><br><span class="line"><span class="keyword">def</span> map=[<span class="string">'key1'</span>:<span class="string">'value1'</span>,<span class="string">'key2'</span>:<span class="string">'value2'</span>]</span><br><span class="line"><span class="comment">//往map中添加键值对</span></span><br><span class="line">map.key3=<span class="string">'value3'</span></span><br><span class="line"><span class="comment">//打印出key3的值</span></span><br><span class="line">println map.get(<span class="string">"key3"</span>)</span><br></pre></td></tr></table></figure><h4 id="Groovy中的闭包"><a href="#Groovy中的闭包" class="headerlink" title="Groovy中的闭包"></a>Groovy中的闭包</h4><ul><li>闭包其实就是一段代码块，在gradle中，我们主要是把闭包当作参数来使用</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//groovy中的闭包</span></span><br><span class="line"><span class="comment">//定义一个闭包</span></span><br><span class="line"><span class="keyword">def</span> b1=&#123;</span><br><span class="line"></span><br><span class="line">    println <span class="string">"hello b1"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法，方法里面需要一个闭包类型的参数</span></span><br><span class="line"><span class="keyword">def</span> method(Closure closure)&#123;</span><br><span class="line">    closure()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法method</span></span><br><span class="line">method(b1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个带参数的闭包</span></span><br><span class="line"><span class="keyword">def</span> b2=&#123;</span><br><span class="line">    <span class="comment">//groovy中定义参数的方法</span></span><br><span class="line">    v-&gt;</span><br><span class="line">        println <span class="string">"hello $&#123;v&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个方法，方法里面需要一个闭包类型的参数</span></span><br><span class="line"><span class="keyword">def</span> method2(Closure closure)&#123;</span><br><span class="line">    closure(<span class="string">"zhangxiaoxian"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法method</span></span><br><span class="line">method2(b2)</span><br></pre></td></tr></table></figure><h4 id="Gradle配置文件介绍"><a href="#Gradle配置文件介绍" class="headerlink" title="Gradle配置文件介绍"></a>Gradle配置文件介绍</h4><ul><li>配置文件为build.gradle</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">'com.study2'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定所使用的仓库</span></span><br><span class="line"><span class="comment">* mavenCentral()表示使用中央仓库，此刻项目中所需要的jar包都会默认从中央仓库下载到本地指定目录</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*gradle工程所有的jar包的坐标都在dependencies属性内放置</span></span><br><span class="line"><span class="comment">* 每一个jar包的坐标都有三个基本元素组成</span></span><br><span class="line"><span class="comment">* group、name、version</span></span><br><span class="line"><span class="comment">* testCompile表示该jar包在测试的时候起作用</span></span><br><span class="line"><span class="comment">* 我们在gradle里面添加坐标的时候都要带上jar包的作用域</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-context'</span>, <span class="string">version:</span> <span class="string">'5.1.4.RELEASE'</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="让Gradle默认使用本地的maven仓库"><a href="#让Gradle默认使用本地的maven仓库" class="headerlink" title="让Gradle默认使用本地的maven仓库"></a>让Gradle默认使用本地的maven仓库</h4><ul><li>在环境变量中配置GRADLE_USER_HOME,值为maven本地仓库的地址</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">'com.study2'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*指定所使用的仓库</span></span><br><span class="line"><span class="comment">* mavenCentral()表示使用中央仓库，此刻项目中所需要的jar包都会默认从中央仓库下载到本地指定目录</span></span><br><span class="line"><span class="comment">* 如果只配置中央仓库，表示直接就从中央仓库下载jar包，但是如果指定下载位置已经有了，就不会再次下载了</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    <span class="comment">//以下配置表示先从本地仓库寻找依赖，如果没有再从仓库中下载</span></span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*gradle工程所有的jar包的坐标都在dependencies属性内放置</span></span><br><span class="line"><span class="comment">* 每一个jar包的坐标都有三个基本元素组成</span></span><br><span class="line"><span class="comment">* group、name、version</span></span><br><span class="line"><span class="comment">* testCompile表示该jar包在测试的时候起作用</span></span><br><span class="line"><span class="comment">* 我们在gradle里面添加坐标的时候都要带上jar包的作用域</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-context'</span>, <span class="string">version:</span> <span class="string">'5.1.4.RELEASE'</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gradle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0923</title>
      <link href="/jokerboozp.github.io/2019/09/23/2019-09-23-Java%E5%9F%BA%E7%A1%80%20-%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/jokerboozp.github.io/2019/09/23/2019-09-23-Java%E5%9F%BA%E7%A1%80%20-%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="类中的四个成员"><a href="#类中的四个成员" class="headerlink" title="类中的四个成员"></a>类中的四个成员</h4><ol><li>属性：静态描述类的特征</li><li>方法：动态描述类的行为</li><li>构造方法：用来创建当前类的对象</li><li>程序块（代码块）：理解为就是一个方法（非常特殊的方法：无参数、无返回值、没名字、没有修饰符）</li></ol><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><p>作用：构建当前类的对象</p></li><li><p>写法：权限修饰符 类名一致的方法(参数列表) [异常]{<br>  方法体<a id="more"></a><br>}</p></li><li><p>如何调用构造方法：通过new关键字调用</p></li><li><p>构造方法结构上没有返回值类型，但是他有返回值，返回值是对象</p></li><li><p>构造方法特点：</p><ul><li>每一个类都有构造方法，若自己在类中没有定义，系统会默认提供一个无参数的构造方法；若在类中自己定义了构造方法，则默认无参数的构造方法即被覆盖</li><li>构造方法存在方法的重载</li></ul></li><li><p>为什么要定义构造方法？什么时候需要设计构造方法？</p><ul><li>在创建对象的同时，想要一并做一些事情，默认提供的构造方法是不会做的，这个时候我们可以自己定义构造方法</li></ul></li></ul><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><ul><li>this是一个关键字，代替的是一个对象（当前调用属性或方法的那个对象）</li><li>调用属性或方法的这一行代码可以放置在类中的任何成员位置，上下位置随意</li><li>this可以调用属性、方法、构造方法</li><li>构造方法早于一般方法，且一般方法不能够调用构造方法。构造方法之间可以相互调用（this()的形式来在一个构造方法中调用另一个构造方法，且必须放在第一行）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span>  String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是无参数的默认的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age,String sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Person</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是带String参数的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人要吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张小贤"</span>,<span class="number">18</span>,<span class="string">"男"</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序块（代码块）"><a href="#程序块（代码块）" class="headerlink" title="程序块（代码块）"></a>程序块（代码块）</h4><ul><li>写法：可以认为程序块是一个没有修饰符、没有参数、没有返回值、没有名字的特殊方法</li><li>用法：块也需要调用才能执行，每一次我们调用构造方法之前，系统会帮我们自动的调用一次程序块，让他执行一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span>  String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age,String sex)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line">       <span class="keyword">this</span>.age=age;</span><br><span class="line">       <span class="keyword">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个普通的程序块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"我又是一个普通的程序块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"我也是一个普通的程序块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Person</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是带String参数的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人要吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张小贤"</span>,<span class="number">18</span>,<span class="string">"男"</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特点：没有重载的概念，但是可以在类中创建或定义多个程序块</li><li>可以在程序块中写一些程序，想要在创建对象之前执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro基础0922</title>
      <link href="/jokerboozp.github.io/2019/09/22/2019-09-22-Shiro%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/09/22/2019-09-22-Shiro%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="实现授权Realm"><a href="#实现授权Realm" class="headerlink" title="实现授权Realm"></a>实现授权Realm</h4><ul><li>实现步骤</li></ul><ol><li>从PrincipalCollection中来获取登陆用户的信息</li><li>利用登录的用户信息来获取当前用户的角色或权限（可能需要查询数据库）</li><li>创建SimpleAuthorizationInfo，并设置其roles属性</li><li>返回SimpleAuthorizationInfo对象</li></ol><ul><li>ShiroRealm.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.从PrincipalCollection中来获取登陆用户的信息</span></span><br><span class="line">Object principal=principals.getPrimaryPrincipal();</span><br><span class="line"><span class="comment">//2.利用登录的用户信息来获取当前用户的角色或权限（可能需要查询数据库）</span></span><br><span class="line">Set&lt;String&gt; roles=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">roles.add(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(principal)) &#123;</span><br><span class="line">roles.add(<span class="string">"admin"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.创建SimpleAuthorizationInfo，并设置其roles属性</span></span><br><span class="line">SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo(roles);</span><br><span class="line"><span class="comment">//4.返回SimpleAuthorizationInfo对象</span></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现结果：用户输入的用户<a id="more"></a>名是admin时，可以访问adminpage和userpage；用户输入的用户名是user时，只能访问userpage</li></ul><h4 id="Shiro标签"><a href="#Shiro标签" class="headerlink" title="Shiro标签"></a>Shiro标签</h4><ul><li>Shiro提供了JSTL标签用于在JSP页面进行权限控制，如根据用户登陆显示相应的页面按钮</li></ul><ol><li>guest标签：用户没有身份验证时显示相应信息，即游客访问信息</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:guest&gt;</span><br><span class="line">欢迎游客访问，&lt;a href="login.jsp"&gt;登陆&lt;/a&gt;</span><br><span class="line">&lt;/shiro:guest&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>user标签：用户已经经过认证/<strong>记住我</strong>登陆后显示相应的信息</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:user&gt;</span><br><span class="line">欢迎[&lt;shiro:principal/&gt;]登陆，&lt;a href="logout"&gt;退出&lt;/a&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>authenticated标签：用户已经身份验证通过，即Subject.login登陆成功，<strong>不是记住我登陆的</strong></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:authenticated&gt;</span><br><span class="line">用户[&lt;shiro:principal/&gt;]已身份验证通过</span><br><span class="line">&lt;/shiro:authenticated&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>notAuthenticated标签：用户未进行身份验证，即没有调用Subject.login进行登陆，<strong>包括记住我自动登录</strong>的也属于未进行身份验证</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:notAuthenticated&gt;</span><br><span class="line">未身份验证（包括记住我）</span><br><span class="line">&lt;/shiro:notAuthenticated/&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>principal标签：显示用户身份信息，默认调用Subject.getPrincipal()获取，即Primary Principal</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:principal property=<span class="string">"username"</span>/&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>hasRole标签：如果当前Subject有角色将显示body体内容</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">用户[&lt;shrio:principal/&gt;]拥有角色admin&lt;br/&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>hasAnyRoles标签：如果当前Subject有任意一个角色（或的关系）将显示body体内容</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shiro:hasAnyRoles name=<span class="string">"admin,user"</span>&gt;</span><br><span class="line">用户[&lt;shiro:principal/&gt;]拥有角色admin或user&lt;br/&gt;</span><br><span class="line">&lt;/shiro:hasAnyRoles&gt;</span><br></pre></td></tr></table></figure><ul><li>实现的结果：用户登陆身份为admin时，显示admin.jsp、user.jsp、logout.jsp三个按钮；用户登陆身份为user，显示user.jsp、logout.jsp两个按钮</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">    &lt;%@ taglib prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;list page&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">Welcome:&lt;shiro:principal&gt;&lt;/shiro:principal&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="admin.jsp"&gt;adminPage&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"user"</span>&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="user.jsp"&gt;userPage&lt;/a&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="shiro/logout"&gt;Logout&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>结果示意</li><li>admin</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20104532.png" alt="adminpage"></p><ul><li>user</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20104556.png" alt="userpage"></p><h4 id="Shiro权限注解"><a href="#Shiro权限注解" class="headerlink" title="Shiro权限注解"></a>Shiro权限注解</h4><ol><li><code>@RequiresAuthentication</code>：表示当前Subject已经通过login进行了身份验证；即<code>Subject.isAuthenticated()</code>返回true。</li><li><code>@RequiresUser</code>：表示当前Subject已经身份验证或者通过<strong>记住我登陆的</strong></li><li><code>@RequiresGuest</code>：表示当前Subject没有身份验证或未通过记住我登录过，即是游客身份</li><li><code>@RequiresRoles(value={&quot;admin&quot;,&quot;user&quot;},logical=Logical.AND)</code>：表示当前Subject需要<strong>角色</strong>admin和user</li><li><code>@RequiresPermissions(value={&quot;user:a&quot;,&quot;user:b&quot;},logical=Logical.OR)</code>：表示当前Subject需要<strong>权限</strong>user:a或user:b</li></ol><ul><li><p><strong>注意！！</strong>：在开发的时候一般会在Service层加上@Transactional注解（即让Service方法开始的时候会有事务产生，这时候的Service已经是一个代理对象了），这时候就不能在Service层加Shiro的权限注解了，需要加在Controller层（因为不能够让Service称为代理的代理，这样做的话，在注入的时候会发生类型转换异常）</p></li><li><p>例子：</p></li><li><p>ShiroService.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresRoles;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequiresRoles</span>(&#123;<span class="string">"admin"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"testMethod,tiem:"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroService"</span> <span class="attr">class</span>=<span class="string">"com.sc.service.ShiroService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>list.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="shiro/testShiroAnnotation"&gt;Test ShiroAnnotation&lt;/a&gt;</span><br></pre></td></tr></table></figure><ul><li>ShiroHandler.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShiroService shiroService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testShiroAnnotation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testShiroAnnotation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">shiroService.testMethod();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显示结果：</li><li>用户登陆身份为admin时，可以调用ShiroService中的testMethod方法；用户登陆身份为user时，点击testMethod会报异常，显示没有admin权限</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20113642.png" alt="展示页面"></p><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20113601.png" alt="报错页面"></p><h4 id="从数据表中初始化资源和权限"><a href="#从数据表中初始化资源和权限" class="headerlink" title="从数据表中初始化资源和权限"></a>从数据表中初始化资源和权限</h4><ul><li>按照以前配置权限的方法可能太过于麻烦（在applicationContext.xml中一个一个的配置），直接从map中获取会更方便</li><li>步骤：</li></ul><ol><li>把原来的filterChainDefinitions更改为filterChainDefinitionMap</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置一个bean，该bean实际上是一个Map，通过实例工厂方法的方式</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapBuilder"</span> <span class="attr">factory-method</span>=<span class="string">"buildfilterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapBuilder"</span> <span class="attr">class</span>=<span class="string">"com.sc.factory.FilterChainDefinitionMapBuilder"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建一个工厂类FilterChainDefinitionMapBuilder.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapBuilder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LinkedHashMap&lt;String, String&gt; <span class="title">buildfilterChainDefinitionMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkedHashMap&lt;String, String&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//添加权限的顺序应该注意，否则会相互覆盖</span></span><br><span class="line">map.put(<span class="string">"/login.jsp"</span>, <span class="string">"anon"</span>);</span><br><span class="line">map.put(<span class="string">"/shiro/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">map.put(<span class="string">"/shiro/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>项目结构：</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20120825.png" alt="项目结构"></p><h4 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h4><ul><li><p>Shiro提供了完整的企业级会话管理功能，<strong>不依赖于底层容器（如web容器tomcat），不管是JavaSE还是JavaEE环境都可以使用</strong>，提供了会话管理、会话事件监听、会话存储/持久化、容器无关的集群、失效/过期支持、对web的透明支持、SSO单点登录的支持等特性。</p></li><li><p>会话相关的API</p></li></ul><ol><li><code>Subject.getSession()</code>：即可获取会话，相当于<code>Subject.getSession(true)</code>,即没有创建Session对象会创建一个；<code>Subject.getSession(false)</code>，没有创建Session则返回null</li><li><code>session.getId()</code>：获取当前会话的唯一标识</li><li><code>session.getHost()</code>：获取当前Subject的主机地址</li><li><code>session.getTimeOUt() &amp; session.setTimeOut(毫秒)</code>：获取/设置当前Session的过期时间</li><li><code>session.getStartTimestamp() &amp; session.getLastAccessTime()</code>：获取会话的启动时间以及最后的访问时间；如果是JavaSE应用则需要自己定期调用<code>session.touch()</code>去更新最后访问时间；如果是web应用，每次进入ShiroFilter都会自动调用<code>session.touch</code>来更新最后访问时间</li><li><code>session.touch() &amp; session.stop()</code>：更新会话最后访问时间以及销毁会话；当<code>Subject,logout()</code>时会自动调用stop方法来销毁会话。如果在web中，调用<code>HttpSession.invalidate()</code>也会自动调用Shiro <code>Session.stop()</code>方法进行销毁Shiro的会话</li><li><code>session.setAttribute(key,val) &amp; session.getAttribute(key) &amp; session.removeAttribute(key)</code>：设置/获取/删除会话属性；在整个会话范围内都可以对这些属性进行操作</li></ol><ul><li><p>会话监听器</p><ul><li>会话监听器用于监听会话创建、过期及停止事件</li><li><code>onStart(Session):void</code></li><li><code>onStop(Session):void</code></li><li><code>onExpiration(Session):void</code></li></ul></li><li><p>在web层（Handler层）推荐使用传统的HttpSession。使用Shiro Session可以在Service层访问到session中的数据</p></li><li><p>例子：</p></li><li><p>ShiroHandler.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShiroService shiroService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testShiroAnnotation"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testShiroAnnotation</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">session.setAttribute(<span class="string">"key"</span>, <span class="string">"value123456"</span>);</span><br><span class="line">shiroService.testMethod();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ShiroService.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresRoles;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequiresRoles</span>(&#123; <span class="string">"admin"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"testMethod,tiem:"</span> + <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">Object val = session.getAttribute(<span class="string">"key"</span>);</span><br><span class="line">System.out.println(<span class="string">"Service Session:"</span> + val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20131033.png" alt="运行结果"></p><h4 id="SessionDao"><a href="#SessionDao" class="headerlink" title="SessionDao"></a>SessionDao</h4><ul><li>SessionDao可以把Session写到数据库中，然后对Session进行增删改查操作</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-22%20131641.png" alt="SessionDao"></p><ol><li><code>AbstractSessionDAO</code>提供了<code>SessionDao</code>的<strong>基础实现</strong>，如生成会话ID等</li><li><code>CachingSessionDAO</code>提供了对开发者透明的<strong>会话缓存的功能</strong>，需要设置相应的CacheManager</li><li><code>MemorySessionDAO</code>直接在<strong>内存中进行会话维护</strong></li><li><code>EnterpriseCacheSessionDAO</code>提供了缓存功能的会话维护，<strong>默认情况下使用MapCache实现</strong>，内部使用ConcurrentHashMap保存缓存的会话</li></ol><h4 id="会话验证"><a href="#会话验证" class="headerlink" title="会话验证"></a>会话验证</h4><ul><li>Shiro提供了会话验证调度器，用于定期验证会话是否已经过期，如果会话过期则停止会话。</li><li>出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；但是如果在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，Shiro提供了会话验证调度器<code>SessionValidationScheduler</code></li><li>Shiro也提供了使用Quartz会话验证调度器：<code>QuartzSessionValidationScheduler</code></li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><p>CacheManagerAware接口</p><ul><li>Shiro内部的组件（DefaultSecurityManager）会自动检测相应的对象（如Realm）<strong>是否实现了CacheManagerAware并自动注入相应的CacheManager</strong>。</li></ul></li><li><p>Realm缓存</p><ul><li>Shiro提供了CachingRealm，其实现了CacheManagerAware接口，提供了缓存的一些基础实现</li><li><code>AuthentiactingRealm</code>及<code>AuthorizingRealm</code>也分别提供了对<code>AuthenticationInfo</code>和<code>AuthorizationInfo</code>信息的缓存</li></ul></li></ul><h4 id="RememberMe（记住我）"><a href="#RememberMe（记住我）" class="headerlink" title="RememberMe（记住我）"></a>RememberMe（记住我）</h4><ul><li><p>Shiro提供了记住我（rememberme）的功能，具体流程如下：</p><ul><li>首先在登陆页面选择RememberMe然后登陆成功；如果是浏览器登陆，一般会把RememberMe的Cookie写到客户端并保存下来</li><li>关闭浏览器再重新打开；会发现浏览器还是记住你的</li><li>访问一般的网页端还是知道你是谁，且能够正常访问</li><li>但是比如我们访问淘宝时，如果要<strong>查看我的订单或进行支付时，此时还是需要再进行身份验证的，以确保当前用户还是你</strong></li></ul></li><li><p>认证和记住我的区别</p><ul><li><code>subject.isAuthenticated()</code>表示用户进行了身份验证登陆的，即使有<code>Subject.login</code>进行了登录</li><li><code>subject.isRemembered()</code>表示用户是通过记住我登陆的，此时你可能并不是真正的你在访问的</li><li>两者二选一，即<code>subject.isAuthenticated()==true</code>则<code>subject.isRemembered()==false</code>。反之一样</li></ul></li><li><p>建议：</p><ul><li>访问一般网页：如个人主页之类的，我们使用user拦截器即可，user拦截器只要用户登陆（<code>isRemembered()||isAuthenticated()</code>）过即可访问成功</li><li>访问特殊网页：如我的订单、提交订单页面，我们使用authc拦截器即可，authc拦截器会判断用户是否通过<code>Subject.login(isAuthenticated()==true)</code>登陆的，如果是才会放行，否则会跳到登陆页面让你重新登陆</li></ul></li><li><p>RememberMe操作流程：</p></li><li><p>FilterChainDefinitionMapBuilder.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapBuilder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LinkedHashMap&lt;String, String&gt; <span class="title">buildfilterChainDefinitionMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkedHashMap&lt;String, String&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"/login.jsp"</span>, <span class="string">"anon"</span>);</span><br><span class="line">map.put(<span class="string">"/shiro/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">map.put(<span class="string">"/shiro/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">map.put(<span class="string">"/user.jsp"</span>, <span class="string">"authc,roles[user]"</span>);</span><br><span class="line">map.put(<span class="string">"/admin.jsp"</span>, <span class="string">"authc,roles[admin]"</span>);</span><br><span class="line">map.put(<span class="string">"/list.jsp"</span>, <span class="string">"user"</span>);</span><br><span class="line">map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ShiroHandler.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line"><span class="comment">// 把用户名和密码封装为 UsernamePasswordToken 对象</span></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"><span class="comment">// rememberme</span></span><br><span class="line">token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"1. "</span> + token.hashCode());</span><br><span class="line"><span class="comment">// 执行登录.</span></span><br><span class="line">currentUser.login(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... catch more exceptions here (maybe custom ones specific to your</span></span><br><span class="line"><span class="comment">// application?</span></span><br><span class="line"><span class="comment">// 所有认证时异常的父类.</span></span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line"><span class="comment">// unexpected condition? error?</span></span><br><span class="line">System.out.println(<span class="string">"登录失败: "</span> + ae.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager.cookie.maxAge"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>结果：</li><li>设置cookie最大保留时间为10秒，关闭浏览器之后10秒内打开相同网页不需要登陆即可访问（根据设置的权限而定）；10秒之后再打开需要重新登陆</li></ul>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0921</title>
      <link href="/jokerboozp.github.io/2019/09/21/2019-09-21-Java%E5%9F%BA%E7%A1%80-Map/"/>
      <url>/jokerboozp.github.io/2019/09/21/2019-09-21-Java%E5%9F%BA%E7%A1%80-Map/</url>
      
        <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h4><ul><li>java.util中的集合类包含了Java中某些最常用的类。最常用的集合类是List和Map</li><li>Map提供了一个更为通用的元素存储方法。Map集合类用于存储元素对（称作“键”和“值”）。其中每一个键映射到一个值</li></ul><h4 id="Map用法"><a href="#Map用法" class="headerlink" title="Map用法"></a>Map用法</h4><ul><li>Java中自带了各种Map类，这些Map类可归为三种类型<a id="more"></a></li></ul><ol><li>通用Map，用于在应用程序中管理映射，通常在java.util程序包中实现。包括：<code>HashMap、Hashtable、Properties、LinkedHashMap、IdentityHashMap、TreeMap、WeakHashMap、ConcurrentHashMap</code></li><li>专用Map，通常我们不必亲自创建此类Map，而是通过某些其他类对其进行访问。包括：<code>java.util.jar.Attributes</code>、<code>javax.print.attribute.standard.PrintStateReasons</code>、<code>java.security.Provider</code>、<code>java.awt.RenderingHints</code>、<code>javax.swing.UIDefaults</code></li><li>一个用于帮助我们实现自己的Map类的抽象类：<code>Abstract Map</code></li></ol><h4 id="类型区别"><a href="#类型区别" class="headerlink" title="类型区别"></a>类型区别</h4><ul><li><p>HashMap</p><ul><li>最常用的Map，他根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null（多条的话会被覆盖）；允许多条记录的值为null。是非同步的。</li></ul></li><li><p>TreeMap</p><ul><li>能够把它保存的记录根据键（key）排序，默认是升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。是非同步的。</li></ul></li><li><p>Hashtable</p><ul><li>与HashMap类似，不同的是：key和value的值均不允许为null；它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtable在写入时会比较慢。</li></ul></li><li><p>LinkedHashMap</p><ul><li>保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢。key和value均允许为空。是非同步的。</li></ul></li></ul><h4 id="Map初始化"><a href="#Map初始化" class="headerlink" title="Map初始化"></a>Map初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br></pre></td></tr></table></figure><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"key1"</span>,<span class="string">"value1"</span>);</span><br></pre></td></tr></table></figure><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.get(<span class="string">"key1"</span>);</span><br></pre></td></tr></table></figure><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">"key1"</span>);</span><br></pre></td></tr></table></figure><h4 id="清空Map"><a href="#清空Map" class="headerlink" title="清空Map"></a>清空Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure><h4 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h4><ul><li>增强for循环遍历<ul><li>使用keySet()遍历</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">    System.out.println(key+<span class="string">":"</span>+map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用entrySet()遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; entry:map.entrySet())&#123;</span><br><span class="line">    System.out.println(entry.getKey()+<span class="string">":"</span>+entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迭代器遍历<ul><li>使用keySet()遍历</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator=map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    String key=iterator.next();</span><br><span class="line">    System.out.println(key+<span class="string">":"</span>+map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用entrySet()遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String,String&gt; iterator=map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Map.Entry&lt;String,String&gt; entry=iterator.next();</span><br><span class="line">    System.out.println(entry.getKey()+<span class="string">":"</span>+entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环总结"><a href="#循环总结" class="headerlink" title="循环总结"></a>循环总结</h4><ol><li>增强for循环使用方便，但性能较差，不适合处理超大量级的数据</li><li>迭代器的遍历速度要比增强for循环快很多，是增强for循环的两倍左右</li><li>使用entrySet遍历的速度要比keySet快很多，是keySet的1.5倍左右</li></ol><h4 id="Map排序（HashMap、Hashtable、LinkedHashMap排序）"><a href="#Map排序（HashMap、Hashtable、LinkedHashMap排序）" class="headerlink" title="Map排序（HashMap、Hashtable、LinkedHashMap排序）"></a>Map排序（HashMap、Hashtable、LinkedHashMap排序）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"a"</span>,<span class="string">"c"</span>);</span><br><span class="line">map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">map.put(<span class="string">"c"</span>,<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ArrayList构造函数把map.entrySet()转换成list</span></span><br><span class="line">List&lt;Map.Entry&lt;String,String&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String,String&gt;&gt;(map.entrySet());</span><br><span class="line"><span class="comment">//通过比较器实现比较排序</span></span><br><span class="line">Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Map,Entry&lt;String,String&gt;&gt;()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String,String&gt; mapping1,Map.Entry&lt;String,String&gt; mapping2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapping1.getKey().compareTo(mapping2.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String,String&gt; mapping:list)&#123;</span><br><span class="line">    System.out.println(mapping.getKey()+<span class="string">":"</span>+mapping.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeMap排序"><a href="#TreeMap排序" class="headerlink" title="TreeMap排序"></a>TreeMap排序</h4><ul><li>TreeMap默认按key进行升序排序，如果想改变默认的排序，可以使用比较器：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> TreeMap&lt;String,String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String obj1,String obj2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj2.compareTo(obj1);<span class="comment">//降序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.put(<span class="string">"a"</span>,<span class="string">"c"</span>);</span><br><span class="line">map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">map.put(<span class="string">"c"</span>,<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">    System.out.println(key+<span class="string">":"</span>+map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按照value排序（通用）"><a href="#按照value排序（通用）" class="headerlink" title="按照value排序（通用）"></a>按照value排序（通用）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> TreeMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"a"</span>,<span class="string">"c"</span>);</span><br><span class="line">map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">map.put(<span class="string">"c"</span>,<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过ArrayList构造函数把map.entrySet()转换成list</span></span><br><span class="line">List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet());</span><br><span class="line">        <span class="comment">// 通过比较器实现比较排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mapping1.getValue().compareTo(mapping2.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">" ："</span> + map.get(key));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-21%20180155.png" alt="常用API"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro基础0921</title>
      <link href="/jokerboozp.github.io/2019/09/21/2019-09-21-Shiro%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/09/21/2019-09-21-Shiro%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="更改Shiro认证策略"><a href="#更改Shiro认证策略" class="headerlink" title="更改Shiro认证策略"></a>更改Shiro认证策略</h4><ul><li>更改applicationContext.xml中关于多Realm认证的配置</li><li>示例为把认证策略改为AllSuccessfulStrategy</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AllSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShiroRealm.java<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[shiroRealm] doGetAuthenticationInfo"</span>);</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"038bdaf98f2037b31f1e75b5b4c9b26e"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"098d2c478e9c11555ce2823231e02ec1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line"><span class="comment">//盐值</span></span><br><span class="line">ByteSource credentialsSalt=ByteSource.Util.bytes(username);</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">null</span>;<span class="comment">//new SimpleAuthenticationInfo(principal, credentials, realmName);</span></span><br><span class="line">info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"MD5"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=ByteSource.Util.bytes(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SecondRealm.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[SecondRealm] doGetAuthenticationInfo"</span>);</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"ce2f6417c7e1d32c1d81a797ee0b499f87c5de06222"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"073d4c3ae812935f23cb3f2a71943f49e082a718222"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line"><span class="comment">//盐值</span></span><br><span class="line">ByteSource credentialsSalt=ByteSource.Util.bytes(username);</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">null</span>;<span class="comment">//new SimpleAuthenticationInfo(principal, credentials, realmName);</span></span><br><span class="line">info=<span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">"secondRealmName"</span>, credentials, credentialsSalt, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"SHA1"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=ByteSource.Util.bytes(<span class="string">"admin"</span>);</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Shiro把Realms配置给SecurityManager"><a href="#Shiro把Realms配置给SecurityManager" class="headerlink" title="Shiro把Realms配置给SecurityManager"></a>Shiro把Realms配置给SecurityManager</h4><ul><li>在applicationContext.xml中把在配置多Realm验证中配置的Realms放在SecurityManager中。认证策略改为Atleast</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置 SecurityManager! --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 CacheManager. 2.1 需要加入 ehcache 的 jar 包及配置文件. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置 Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.ShiroRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.SecondRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. --&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 6. 配置 ShiroFilter. 6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 3). logout 登出. 4). roles 角色过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /shiro/login=anon</span><br><span class="line">                /shiro/logout=logout</span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Shiro授权"><a href="#Shiro授权" class="headerlink" title="Shiro授权"></a>Shiro授权</h4><ul><li><p>授权，也叫访问控制，即在应用中控制谁访问哪些资源（如访问页面/编辑数据/页面操作等）。在授权中需要了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）</p><ul><li>主体（Subject）：访问应用的用户。在Shiro使用Subject代表该用户。用户只有授权后才能访问相应的资源</li><li>资源（Resource）：在应用中用户可以访问的URL，比如访问JSP页面，查看/编辑某些数据，访问某个业务方法，打印文本都是资源。用户只有授权后才能访问。</li><li>权限（Permissions）：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力，即权限表示在应用中用户能不能访问某个资源，如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增删改查）式权限控制）等。权限代表了用户有没有操作某个资源的权力，即反映在某个资源上的某个操作允不允许。</li><li>Shiro支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的）</li><li>角色（Role）：权限的集合，一般情况下会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。不同的角色拥有一组不同的权限。</li></ul></li><li><p>Shiro支持三种方式的授权</p><ul><li>编程式：通过<code>if/else</code>代码块完成</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">"admin"</span>))&#123;</span><br><span class="line">    <span class="comment">//有权限</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解式：通过在执行的Java方法上放置相应的注解完成，没有权限将抛出相应的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//有权限 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSP/GSP标签：在JSP/GSP页面通过相应的标签完成</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;shrio:hasRolename=<span class="string">"admin"</span>&gt;</span><br><span class="line">&lt;!- 有权限 -&gt;</span><br><span class="line">&lt;/shrio:hasRole&gt;</span><br></pre></td></tr></table></figure><h4 id="Shiro默认拦截器"><a href="#Shiro默认拦截器" class="headerlink" title="Shiro默认拦截器"></a>Shiro默认拦截器</h4><ul><li>Shiro内置了很多默认的拦截器，比如身份认证、授权等相关的。</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-21%20152038.png" alt="身份验证相关的"></p><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-21%20152125.png" alt="授权相关的"></p><ul><li>roles角色过滤器（通过设置角色来进行拦截操作）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">//applicationContext.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置 SecurityManager! --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 CacheManager. 2.1 需要加入 ehcache 的 jar 包及配置文件. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置 Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.ShiroRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.SecondRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. --&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 6. 配置 ShiroFilter. 6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">        1). anon 可以被匿名访问 </span></span><br><span class="line"><span class="comment">        2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">        3). logout 登出. </span></span><br><span class="line"><span class="comment">        4). roles 角色过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /shiro/login=anon</span><br><span class="line">                /shiro/logout=logout</span><br><span class="line">                </span><br><span class="line">                /user.jsp=roles[user]</span><br><span class="line">                /admin.jsp=roles[admin]</span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="授权流程分析"><a href="#授权流程分析" class="headerlink" title="授权流程分析"></a>授权流程分析</h4><ul><li>授权需要继承<code>AuthorizingRealm</code>类，同时实现<code>doGetAuthorizationInfo(PrincipalCollection)</code>方法.</li><li><code>AuthorizingRealm</code>类继承自<code>AuthenticatingRealm</code>，但没有实现<code>AuthenticatingRealm</code>中的<code>doGetAuthenticationInfo</code>方法。所有认证和授权只需要继承<code>AuthorizingRealm</code>就可以了，同时实现他的两个抽象方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0919</title>
      <link href="/jokerboozp.github.io/2019/09/19/2019-09-19-Java%E5%9F%BA%E7%A1%80-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>/jokerboozp.github.io/2019/09/19/2019-09-19-Java%E5%9F%BA%E7%A1%80-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Java构造函数"><a href="#Java构造函数" class="headerlink" title="Java构造函数"></a>Java构造函数</h3><h4 id="构造函数的概念"><a href="#构造函数的概念" class="headerlink" title="构造函数的概念"></a>构造函数的概念</h4><ul><li>构造函数是函数的一种特殊形式。构造函数中不需要定义返回类型（void是无需返回值的意思，和构造方法不同），且构造函数的名称与所在的类名完全一致，其余的与函数的特性相同，可以带有参数列表，可以存在函数的重载现象。</li></ul><h4 id="构造函数的格式"><a href="#构造函数的格式" class="headerlink" title="构造函数的格式"></a>构造函数的格式<a id="more"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造函数</span></span><br><span class="line">    Demo()&#123;</span><br><span class="line">        System.out.println(<span class="string">"constractor_run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    Demo(<span class="keyword">int</span> num)&#123;</span><br><span class="line">        System.out.println(<span class="string">"constractor_args_run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"function_run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果类中我们不声明构造函数，JVM会帮我们默认生成一个空参数的构造函数；如果在类中我们声明了带参数列表的构造函数，JVM就不会帮我们默认生成一个空参数的构造函数，我们想要使用空参数的构造函数就必须自己去显式的声明一个空参的构造函数</li></ul><h4 id="构造函数的作用"><a href="#构造函数的作用" class="headerlink" title="构造函数的作用"></a>构造函数的作用</h4><ul><li>创建对象。任何一个对象创建时，都需要初始化才能使用，所以任何类想要创建实例对象就必须具有构造函数</li><li>对象初始化。构造函数可以对对象进行初始化，并且是给与之格式（参数列表）相符合的对象初始化。是具有一定针对性的初始化函数。</li></ul><h4 id="构造函数与普通函数的区别"><a href="#构造函数与普通函数的区别" class="headerlink" title="构造函数与普通函数的区别"></a>构造函数与普通函数的区别</h4><ul><li>格式不同：<ul><li>构造函数不存在返回类型，函数名与所在类的类名一致</li><li>普通函数有返回类型，函数名可以根据需求进行命名</li></ul></li><li>调用时期不同<ul><li>构造函数在类的对象创建时就运行</li><li>普通函数在对象调用时才会执行</li></ul></li><li>执行次数不同<ul><li>一个对象创建后，其构造函数只执行一次，就是创建时执行</li><li>一个对象创建后，其普通函数可以执行多次，取决于对象的调用次数</li></ul></li></ul><h4 id="构造函数的使用场景"><a href="#构造函数的使用场景" class="headerlink" title="构造函数的使用场景"></a>构造函数的使用场景</h4><ul><li>既然构造函数是对新对象进行初始化，那么当开发过程中分析事物的时候，发现事物一出现就具备了某些特征时，就可以将其定义在构造函数中，这样方便快捷，也符合面向对象的编程思想</li></ul><h4 id="构造函数在继承中的特点"><a href="#构造函数在继承中的特点" class="headerlink" title="构造函数在继承中的特点"></a>构造函数在继承中的特点</h4><ul><li>在继承中，子类创建的对象可以调用父类的公共方法和属性，那么子类会不会调用父类的构造函数呢？子类的构造函数与父类的构造函数有什么关系？子类的构造函数需要注意什么问题呢？<ul><li>子类会不会调用父类的函数？<ul><li>子类继承父类，子类对象初始化时父类的构造函数也会执行，因为子类需要父类中的属性，子类需要知道是如何初始化的，所以子类初始化就必然会调用父类的构造函数（除非父类没有属性）</li></ul></li><li>子类的构造函数与父类的构造函数有什么关系？<ul><li>子类的构造函数中默认的第一行有一条隐式语句super()，该语句会访问父类中的空参数构造函数。除非父类中没有空参数的构造函数，那么子类构造函数的第一行必须显式调用父类的构造函数，即super(int x,…)</li></ul></li><li>子类的构造函数需要注意什么问题？<ul><li>子类的构造函数中，super()语句代表调用了父类的构造函数；this()语句代表了子类自身的构造函数。需要注意的是，这两条语句显式写出来必须放在构造方法的第一行，而且这两条语句不能共存，一个构造函数的第一行要么是super()，要么是this()。</li><li>为什么在第一行？因为需要首先进行初始化。</li><li>为什么不能共存？因为this()代表的本类的其他构造函数，也会去调用super()，出现了this()就没有必要再出现super()了，重复调用没有意义。换言之，子类中至少有一个构造函数的开头为super()，当然也可以隐式存在；也就是说至少有一个构造函数的开头不是this()。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro基础0918</title>
      <link href="/jokerboozp.github.io/2019/09/18/2019-09-18-Shiro%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/09/18/2019-09-18-Shiro%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="Shiro的密码对比"><a href="#Shiro的密码对比" class="headerlink" title="Shiro的密码对比"></a>Shiro的密码对比</h4><ul><li>通过<code>AuthenticatingRealm</code>的<code>credentialsMatcher</code>属性来进行密码的比对</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-18%20105619.png" alt="Debug"></p><h4 id="Shiro的MD5加密"><a href="#Shiro的MD5加密" class="headerlink" title="Shiro的MD5加密"></a>Shiro的MD5加密</h4><ul><li>替换当前Realm的credentialsMatcher属性，直接使用HashedCredentialsMatcher对象，并设置加密即可<a id="more"></a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.xml </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.ShiroRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ShiroRealm.java</span></span><br><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"MD5"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MD5盐值加密"><a href="#MD5盐值加密" class="headerlink" title="MD5盐值加密"></a>MD5盐值加密</h4><ul><li>当两个用户密码相同时，需要采用盐值加密来进行正常的认证</li><li>在<code>doGetAuthenticationInfo</code>方法返回值创建<code>SimpleAuthenticationInfo</code>对象时，需要使用<code>SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName)</code>构造器</li><li>使用<code>ByteSource.Util.bytes()</code>方法来计算盐值</li><li>盐值需要唯一，一般使用随机字符串或<code>userid</code></li><li>使用<code>new SimpleHash(hashAlgorithmName, credentials, salt,hashIterations)</code>来计算盐值加密后的密码的值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"038bdaf98f2037b31f1e75b5b4c9b26e"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"098d2c478e9c11555ce2823231e02ec1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line"><span class="comment">//盐值</span></span><br><span class="line">ByteSource credentialsSalt=ByteSource.Util.bytes(username);</span><br><span class="line"><span class="comment">//创建添加盐值之后的对象</span></span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">null</span>;</span><br><span class="line">info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"MD5"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=ByteSource.Util.bytes(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多Realm验证（如果把安全信息放在多个数据库中，且加密方式不同，那么就需要多个Realm来进行配置）"><a href="#多Realm验证（如果把安全信息放在多个数据库中，且加密方式不同，那么就需要多个Realm来进行配置）" class="headerlink" title="多Realm验证（如果把安全信息放在多个数据库中，且加密方式不同，那么就需要多个Realm来进行配置）"></a>多Realm验证（如果把安全信息放在多个数据库中，且加密方式不同，那么就需要多个Realm来进行配置）</h4><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置 SecurityManager! --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 CacheManager. 2.1 需要加入 ehcache 的 jar 包及配置文件. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置 Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.ShiroRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.SecondRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. --&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 6. 配置 ShiroFilter. 6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 3). logout 登出. 4). roles 角色过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /shiro/login=anon</span><br><span class="line">                /shiro/logout=logout</span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShrioRealm.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[SecondRealm] doGetAuthenticationInfo"</span>);</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"ce2f6417c7e1d32c1d81a797ee0b499f87c5de06"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"073d4c3ae812935f23cb3f2a71943f49e082a718"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line"><span class="comment">//盐值</span></span><br><span class="line">ByteSource credentialsSalt=ByteSource.Util.bytes(username);</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">null</span>;<span class="comment">//new SimpleAuthenticationInfo(principal, credentials, realmName);</span></span><br><span class="line">info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"SHA1"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=ByteSource.Util.bytes(<span class="string">"admin"</span>);</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ShiroRealm.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"[shiroRealm] doGetAuthenticationInfo"</span>);</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"fc1709d0a95a6be30bc5926fdb7f22f4"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"admin"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"038bdaf98f2037b31f1e75b5b4c9b26e"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"user"</span>.equals(username)) &#123;</span><br><span class="line">credentials=<span class="string">"098d2c478e9c11555ce2823231e02ec1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line"><span class="comment">//盐值</span></span><br><span class="line">ByteSource credentialsSalt=ByteSource.Util.bytes(username);</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">null</span>;<span class="comment">//new SimpleAuthenticationInfo(principal, credentials, realmName);</span></span><br><span class="line">info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String hashAlgorithmName=<span class="string">"MD5"</span>;</span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line">Object salt=ByteSource.Util.bytes(<span class="string">"user"</span>);</span><br><span class="line"><span class="keyword">int</span> hashIterations=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">new</span> SimpleHash(hashAlgorithmName, credentials, salt,hashIterations);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多Realm认证策略（<code>AuthenticationStrategy</code>）<ul><li><code>AuthenticationStrategy</code>接口的默认实现：</li><li><code>FirstSuccessfulStrategy</code>：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略</li><li><code>AtLeastOneSuccessfulStrategy</code>：只要有一个Realm验证成功即可，和<code>FirstSuccessfulStrategy</code>不同，将返回所有Realm身份验证成功的认证信息</li><li><code>AllSuccessfulStrategy</code>：所有Realm验证成功才算成功，且返回所有Realm验证成功的认证信息，如果有一个失败就失败了。</li><li><code>ModularRealmAuthenticator</code>：默认是<code>AtLeastOneSuccessfulStrategy</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0917</title>
      <link href="/jokerboozp.github.io/2019/09/17/2019-09-17-Java%E5%9F%BA%E7%A1%80%20-%20%E5%8F%8D%E5%B0%84/"/>
      <url>/jokerboozp.github.io/2019/09/17/2019-09-17-Java%E5%9F%BA%E7%A1%80%20-%20%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h4 id="反射（reflect）"><a href="#反射（reflect）" class="headerlink" title="反射（reflect）"></a>反射（reflect）</h4><ul><li><p>反射机制指的是程序运行时能够获取自身的信息。在Java中，只要给定类的名字，那么就可以通过反射机制来获得类的所有信息</p></li><li><p>类是用来描述一组对象的，反射机制是用来描述一组类的</p><ul><li>Class：描述类本身</li><li>Field：描述类中的属性</li><li>Method：描述类中的方法</li><li>Constructor：描述类中的构造方法</li><li>Package：描述类所属的包<a id="more"></a></li><li>Annotation：描述类中的注解@Override（注解可以放在类上面，属性上面，方法上面，构造方法上面、参数前面）</li></ul></li><li><p>上述6个组成了反射机制</p></li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-17%20111305.png" alt="反射机制"></p><h4 id="Java反射机制主要提供了以下功能"><a href="#Java反射机制主要提供了以下功能" class="headerlink" title="Java反射机制主要提供了以下功能"></a>Java反射机制主要提供了以下功能</h4><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的方法；生成动态代理</li></ul><h4 id="反射机制的优缺点"><a href="#反射机制的优缺点" class="headerlink" title="反射机制的优缺点"></a>反射机制的优缺点</h4><ul><li>为什么要用反射机制？<ul><li>编译主要分为动态编译和静态编译。</li><li>动态编译：运行时确定类型，绑定对象。动态编译最大限度的发挥了Java的灵活性，体现了多态的应用，用以降低类之间的耦合性</li><li>静态编译：在编译时确定类型，绑定对象即通过</li></ul></li><li>反射机制的优点是可以实现动态的创建对象和编译，体现出很大的灵活性。</li><li>他的缺点是对性能有影响，使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的需要。这类操作总是慢于只直接执行相同的操作。</li></ul><h4 id="如何获取Class"><a href="#如何获取Class" class="headerlink" title="如何获取Class"></a>如何获取Class</h4><ul><li><code>Class clazz=Class.forName(&quot;包名.类名&quot;);</code></li><li><code>Class clazz=类名.class;</code></li><li><code>Class clazz=对象.getClass();//Object类中的方法</code></li></ul><h4 id="Class中的常用方法"><a href="#Class中的常用方法" class="headerlink" title="Class中的常用方法"></a>Class中的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过一个Class对象来操作Person.class类文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"testreflect.Person"</span>);</span><br><span class="line">            Object newInstance = clazz.newInstance();<span class="comment">//相当于调用了Person类中的默认无参数构造方法创建对象</span></span><br><span class="line">            System.out.println(newInstance);</span><br><span class="line">            <span class="comment">//获取类的修饰符</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = clazz.getModifiers();</span><br><span class="line">            System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//类名字</span></span><br><span class="line">            String name = clazz.getName();<span class="comment">//类全名:testreflect.Person</span></span><br><span class="line">            String simpleName = clazz.getSimpleName();<span class="comment">//类名:Person</span></span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(simpleName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取类所在的包</span></span><br><span class="line">            Package clazzPackage = clazz.getPackage();</span><br><span class="line">            System.out.println(clazzPackage.getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取当前类的父类</span></span><br><span class="line">            Class superclass = clazz.getSuperclass();</span><br><span class="line">            System.out.println(superclass);</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//获取集合对应的class</span></span><br><span class="line">            Class clazz1 = ArrayList<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            Class sclazz = clazz1.getSuperclass();</span><br><span class="line">            <span class="keyword">if</span> (sclazz!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(sclazz.getName());</span><br><span class="line">                sclazz=sclazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取当前clazz所有的父接口</span></span><br><span class="line">            Class[] interfaces = clazz1.getInterfaces();</span><br><span class="line">            <span class="keyword">for</span> (Class c:interfaces)&#123;</span><br><span class="line">                System.out.println(c.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Field类中的常用方法"><a href="#Field类中的常用方法" class="headerlink" title="Field类中的常用方法"></a>Field类中的常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过一个Class对象来操作Person.class类文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"testreflect.Person"</span>);</span><br><span class="line">            <span class="comment">//通过clazz来获取类中的属性</span></span><br><span class="line">            Field field = clazz.getField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">//获取结构</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();<span class="comment">//属性的修饰符</span></span><br><span class="line">            System.out.println(modifiers);</span><br><span class="line">            <span class="comment">//获取属性的类型</span></span><br><span class="line">            Class&lt;?&gt; fieldType = field.getType();</span><br><span class="line">            System.out.println(fieldType);</span><br><span class="line">            <span class="comment">//获取属性名</span></span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.println(fieldName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作Person中的公有属性，向里面存值-从里面取值"><a href="#操作Person中的公有属性，向里面存值-从里面取值" class="headerlink" title="操作Person中的公有属性，向里面存值/从里面取值"></a>操作Person中的公有属性，向里面存值/从里面取值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestMain.java</span></span><br><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过一个Class对象来操作Person.class类文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"testreflect.Person"</span>);</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            <span class="comment">//通过clazz来获取类中的属性</span></span><br><span class="line">            Field field = clazz.getField(<span class="string">"name"</span>);<span class="comment">//知道属性名字是什么，属性是公有的</span></span><br><span class="line">            <span class="comment">//Field[] fields = clazz.getFields();获取全部属性</span></span><br><span class="line">            <span class="comment">//赋值</span></span><br><span class="line">            field.set(p,<span class="string">"jokerboozp"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取值</span></span><br><span class="line">            String name = (String) field.get(p);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>   String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;"</span>+name+<span class="string">","</span>+age+<span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作Person中的私有属性"><a href="#操作Person中的私有属性" class="headerlink" title="操作Person中的私有属性"></a>操作Person中的私有属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestMain.java</span></span><br><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过一个Class对象来操作Person.class类文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">"testreflect.Person"</span>);</span><br><span class="line">            Person p = (Person) clazz.newInstance();</span><br><span class="line">            <span class="comment">//获取私有属性</span></span><br><span class="line">            Field f = clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">            <span class="comment">//设置私有属性可操作</span></span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//设置私有属性值</span></span><br><span class="line">            f.set(p,<span class="string">"jokerboozp"</span>);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">            <span class="comment">//取到私有属性的值</span></span><br><span class="line">            String value = (String) f.get(p);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span>   String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;"</span>+name+<span class="string">","</span>+age+<span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子(修改预先定义的String内容。)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"abc"</span>;</span><br><span class="line">相当于</span><br><span class="line"><span class="keyword">char</span> data[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line">且String是被<span class="keyword">final</span>修饰的</span><br><span class="line">所以本例子相当于是利用反射修改私有属性</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> testreflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeStringValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//反射的技术可以获取私有属性，可以操作私有属性，虽然很不合理</span></span><br><span class="line">        <span class="comment">//1.获取String 类对应的那天个class</span></span><br><span class="line">        Class&lt;? extends String&gt; clazz = str.getClass();</span><br><span class="line">        <span class="comment">//2.通过clazz获取类中的value属性</span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">        <span class="comment">//3.直接操作属性的值，设置私有属性可以被操作</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//4.获取value属性里面的值（内存地址）</span></span><br><span class="line">        <span class="keyword">char</span>[] temp = (<span class="keyword">char</span>[]) field.get(str);</span><br><span class="line">        <span class="comment">//通过temp的地址引用，找到真实String对象中的数组，修改数组中每一个元素</span></span><br><span class="line">        temp[<span class="number">0</span>]=<span class="string">'张'</span>;temp[<span class="number">1</span>]=<span class="string">'小'</span>;temp[<span class="number">2</span>]=<span class="string">'贤'</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro基础0916</title>
      <link href="/jokerboozp.github.io/2019/09/16/2019-09-16-Shiro%E5%9F%BA%E7%A1%80/"/>
      <url>/jokerboozp.github.io/2019/09/16/2019-09-16-Shiro%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Shiro权限URL配置的细节以及认证流程"><a href="#Shiro权限URL配置的细节以及认证流程" class="headerlink" title="Shiro权限URL配置的细节以及认证流程"></a>Shiro权限URL配置的细节以及认证流程</h3><ul><li>项目结构及最终结果</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-16%20172202.png" alt="项目结果"></p><ul><li>applicationContext.xml<a id="more"></a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">   6. 配置 ShiroFilter. </span></span><br><span class="line"><span class="comment">   6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致.</span></span><br><span class="line"><span class="comment">                     若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean.</span></span><br><span class="line"><span class="comment">   --&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">       配置哪些页面需要受保护. </span></span><br><span class="line"><span class="comment">       以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">       1). anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">       2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">       3). logout 登出.</span></span><br><span class="line"><span class="comment">       4). roles 角色过滤器</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">               /login.jsp = anon</span><br><span class="line">               </span><br><span class="line">               # everything else requires authentication:</span><br><span class="line">               /** = authc</span><br><span class="line">           <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>[urls]</code>部分的配置，其格式是：“url=拦截器[参数],拦截器[参数]”</li><li>如果当前请求的url匹配[urls]部分的某个url部分，将会执行其配置的拦截器</li><li>anon（anonymous）拦截器表示匿名访问（即不需要登陆即可访问）</li><li>authc（authentication）拦截器表示需要身份认证通过后才能访问</li></ul><h4 id="URL匹配模式"><a href="#URL匹配模式" class="headerlink" title="URL匹配模式"></a>URL匹配模式</h4><ul><li>url模式使用Ant风格模式</li><li>Ant路径通配符支持<code>?、*、**</code>，注意通配符匹配不包括目录分隔符<code>/</code>；<ul><li><code>?</code>：匹配一个字符，如<code>/admin?</code>将匹配<code>/admin1</code>，但不匹配<code>/admin或/admin/</code></li><li><code>*</code>：匹配零个或多个字符串，如<code>/admin</code>将匹配<code>/admin、/admin123</code>，但不匹配<code>/admin/1</code></li><li><code>**</code>：匹配路径中的零个或多个路径，如<code>/admin/**</code>将匹配<code>/admin/a或/admin/a/b</code></li></ul></li></ul><h4 id="URL匹配顺序"><a href="#URL匹配顺序" class="headerlink" title="URL匹配顺序"></a>URL匹配顺序</h4><ul><li>URL权限采取一次匹配优先的方式，即从头开始使用第一个匹配的url模式对应的拦截器链，如：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-/bb/**=filter1</span><br><span class="line">-/bb/aa=filter2</span><br><span class="line">-/**=filter3</span><br></pre></td></tr></table></figure><ul><li>如果请求的是<code>/bb/aa</code>，因为按照声明顺序进行匹配，那么将使用filter1进行拦截</li></ul><h4 id="shiro的认证"><a href="#shiro的认证" class="headerlink" title="shiro的认证"></a>shiro的认证</h4><ul><li>shiro认证的步骤<ul><li>获取当前的Subject，调用SecurityUtils.getSubject();</li><li>测试当前的用户是否已经被认证（即是否已经登陆），调用Subject的isAuthenticated()方法</li><li>若没有被认证，则把用户名和密码封装为UsernamePasswordToken对象<ul><li>创建一个表单页面</li><li>把请求提交到SpringMVC的Handler</li><li>获取用户名和密码</li></ul></li><li>执行登陆：调用Subject的login(AuthenticationToken)方法</li><li>自定义Realm的方法，从数据库中获取对应的记录，返回给Shiro<ul><li>继承org.apache.shiro.realm.AuthenticatingRealm类</li><li>实现doGetAuthenticationInfo(AuthenticationToken)方法</li></ul></li><li>用Shiro完成密码比对</li></ul></li></ul><h4 id="ShiroDelegatingFilterProxy"><a href="#ShiroDelegatingFilterProxy" class="headerlink" title="ShiroDelegatingFilterProxy"></a>ShiroDelegatingFilterProxy</h4><ul><li>Shiro配置过程中web.xml文件中的<code>filter-name</code>和applicationContext.xml中的<code>bean id</code>必须相同.若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 filter-name 名字对应的 filter bean.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">web.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">applicationContext.xml</span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 3). logout 登出. 4). roles 角色过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                </span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实现认证Realm"><a href="#实现认证Realm" class="headerlink" title="实现认证Realm"></a>实现认证Realm</h4><ul><li>通过实现认证Realm来实现拦截器的相关功能</li><li>代码如下</li></ul><p>1.ShiroRealm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.LockedAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthenticatingRealm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthenticatingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="comment">//1.把AuthenticationToken转换为UsernamePasswordToken</span></span><br><span class="line">UsernamePasswordToken upToken=(UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//2.从UsernamePasswordToken中来获取username</span></span><br><span class="line">String username=upToken.getUsername();</span><br><span class="line"><span class="comment">//3.调用数据库的方法，从数据库中查询username对应的用户记录</span></span><br><span class="line">System.out.println(<span class="string">"从数据库中获取username："</span>+username+<span class="string">"所对应的用户信息"</span>);</span><br><span class="line"><span class="comment">//4.若用户不存在，则可以抛出UnknownAccountException异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"unknown"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.根据用户信息的情况决定是否需要抛出其他的异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"monster"</span>.equals(username)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.根据用户的情况，来构建AuthenticationInfo对象并返回,通常使用的实现类是SimpleAuthenticationInfo</span></span><br><span class="line"><span class="comment">//以下是从数据库中获取的</span></span><br><span class="line"><span class="comment">//第一个参数：principal-认证的实体信息，可以是username，也可以是数据表对应的用户的实体类对象</span></span><br><span class="line">Object principal=username;</span><br><span class="line"><span class="comment">//第二个参数：credentials-从数据表中获取的密码</span></span><br><span class="line">Object credentials=<span class="string">"123456"</span>;</span><br><span class="line"><span class="comment">//第三个参数：realmName-当前realm对象的name。调用父类的getName()方法即可</span></span><br><span class="line">String realmName=getName();</span><br><span class="line">SimpleAuthenticationInfo info=<span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, realmName);</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.ShiroHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/shiro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line"></span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line"><span class="comment">// 把用户名和密码封装为 UsernamePasswordToken 对象</span></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"><span class="comment">// rememberme</span></span><br><span class="line">token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"1. "</span> + token.hashCode());</span><br><span class="line"><span class="comment">// 执行登录.</span></span><br><span class="line">currentUser.login(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... catch more exceptions here (maybe custom ones specific to your</span></span><br><span class="line"><span class="comment">// application?</span></span><br><span class="line"><span class="comment">// 所有认证时异常的父类.</span></span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line"><span class="comment">// unexpected condition? error?</span></span><br><span class="line">System.out.println(<span class="string">"登录失败: "</span> + ae.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置 SecurityManager! --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager.cookie.maxAge"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 CacheManager. 2.1 需要加入 ehcache 的 jar 包及配置文件. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置 Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.ShiroRealm"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. --&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 6. 配置 ShiroFilter. 6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean. --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 3). logout 登出. 4). roles 角色过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /shiro/login=anon</span><br><span class="line">                /shiro/logout=logout</span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Shiro配置过程中出现500错误"><a href="#Shiro配置过程中出现500错误" class="headerlink" title="Shiro配置过程中出现500错误"></a>Shiro配置过程中出现500错误</h4><ul><li>在配置shiro完毕后运行项目出现500错误，错误示例如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean]-Failed to set up a Bean Validation provider</span><br><span class="line">javax.validation.ValidationException: Unable to create a Configuration, because no Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.</span><br><span class="line">at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:271)</span><br><span class="line">at org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.afterPropertiesSet(LocalValidatorFactoryBean.java:223)</span><br><span class="line">at org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean.afterPropertiesSet(OptionalValidatorFactoryBean.java:40)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1612)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:475)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:304)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:300)</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:700)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:760)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:658)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:624)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:672)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:543)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:484)</span><br><span class="line">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:136)</span><br><span class="line">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1227)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1140)</span><br><span class="line">at org.apache.catalina.core.StandardWrapper.load(StandardWrapper.java:1027)</span><br><span class="line">at org.apache.catalina.core.StandardContext.loadOnStartup(StandardContext.java:5038)</span><br><span class="line">at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5348)</span><br><span class="line">at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)</span><br><span class="line">at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1408)</span><br><span class="line">at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1398)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><h4 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h4><ul><li>没有添加<strong>jsr303-validation</strong>、<strong>hibernate-validator</strong>两个jar包</li><li>tomcat版本不是7.0版本<ul><li>以上两个条件缺一不可</li><li>注意：两个jar包版本需要相互匹配，否则依然会报错。本项目使用的版本依次为：<ul><li>jsr303-validation：0.5</li><li>hibernate-validator：5.2.4</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro与Spring集成</title>
      <link href="/jokerboozp.github.io/2019/09/12/2019-09-12-Shiro-Shiro%E4%B8%8Espring%E9%9B%86%E6%88%90/"/>
      <url>/jokerboozp.github.io/2019/09/12/2019-09-12-Shiro-Shiro%E4%B8%8Espring%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro与Spring集成的过程"><a href="#Shiro与Spring集成的过程" class="headerlink" title="Shiro与Spring集成的过程"></a>Shiro与Spring集成的过程</h1><ul><li>因为是基础版本，所以学习先利用jar包的形式进行展示</li><li>实现的结果：用户只能够访问配置文件中允许的jsp文件，没有授权或登录的情况下访问其他jsp文件会跳转到登陆界面</li></ul><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-12%20155842.png" alt="项目结构"></p><h4 id="1-Spring环境搭建"><a href="#1-Spring环境搭建" class="headerlink" title="1.Spring环境搭建"></a>1.Spring环境搭建</h4><p>1.导入Spring所需的jar包（下图展示的是搭建shiro项目所需要的所有jar包）</p><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-12%20153811.png" alt="shiro所需jar包"></p><p>2.配置Spring的web.xml文件<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- needed for ContextLoaderListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.配置applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.配置spring-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sc.shiro"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Shiro与Spring整合"><a href="#2-Shiro与Spring整合" class="headerlink" title="2.Shiro与Spring整合"></a>2.Shiro与Spring整合</h4><p>1.导入shiro的jar包</p><p>2.在web.xml文件中写入shiro的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Shiro Filter is defined in the spring application context: --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1. 配置  Shiro 的 shiroFilter.  </span></span><br><span class="line"><span class="comment">2. DelegatingFilterProxy 实际上是 Filter 的一个代理对象. 默认情况下, Spring 会到 IOC 容器中查找和 </span></span><br><span class="line"><span class="comment">&lt;filter-name&gt; 对应的 filter bean. 也可以通过 targetBeanName 的初始化参数来配置 filter bean 的 id. </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.在applicationContext.xml文件中写入shiro的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    1. 配置 SecurityManager!</span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager.cookie.maxAge"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    2. 配置 CacheManager. </span></span><br><span class="line"><span class="comment">    2.1 需要加入 ehcache 的 jar 包及配置文件. </span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    3. 配置 Realm </span></span><br><span class="line"><span class="comment">    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean</span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.sc.shiro.realms.ShiroRealm"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. </span></span><br><span class="line"><span class="comment">    --&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. </span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    6. 配置 ShiroFilter. </span></span><br><span class="line"><span class="comment">    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致.</span></span><br><span class="line"><span class="comment">                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean.</span></span><br><span class="line"><span class="comment">    --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护. </span></span><br><span class="line"><span class="comment">        以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">        1). anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">        3). logout 登出.</span></span><br><span class="line"><span class="comment">        4). roles 角色过滤器</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                </span><br><span class="line">                # everything else requires authentication:</span><br><span class="line">                /** = authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建ShiroRealm接口程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sc.shiro.realms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.Realm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">implements</span> <span class="title">Realm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken arg0)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.导入ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sets the path to the directory where cache .data files are created.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         If the path is a Java System Property it is replaced by</span></span><br><span class="line"><span class="comment">         its value in the running VM.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         The following properties are translated:</span></span><br><span class="line"><span class="comment">         user.home - User's home directory</span></span><br><span class="line"><span class="comment">         user.dir - User's current working directory</span></span><br><span class="line"><span class="comment">         java.io.tmpdir - Default temp file path --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"authorizationCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"authenticationCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro-activeSessionCache"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">statistics</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Default Cache configuration. These will applied to caches programmatically created through</span></span><br><span class="line"><span class="comment">        the CacheManager.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The following attributes are required for defaultCache:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        maxInMemory       - Sets the maximum number of objects that will be created in memory</span></span><br><span class="line"><span class="comment">        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element</span></span><br><span class="line"><span class="comment">                            is never expired.</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. Idle time is now - last accessed time</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. TTL is now - creation time</span></span><br><span class="line"><span class="comment">        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache</span></span><br><span class="line"><span class="comment">                            has reached the maxInMemory limit.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Predefined caches.  Add your cache configuration settings here.</span></span><br><span class="line"><span class="comment">        If you do not have a configuration for your cache a WARNING will be issued when the</span></span><br><span class="line"><span class="comment">        CacheManager starts</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The following attributes are required for defaultCache:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        name              - Sets the name of the cache. This is used to identify the cache. It must be unique.</span></span><br><span class="line"><span class="comment">        maxInMemory       - Sets the maximum number of objects that will be created in memory</span></span><br><span class="line"><span class="comment">        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element</span></span><br><span class="line"><span class="comment">                            is never expired.</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. Idle time is now - last accessed time</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. TTL is now - creation time</span></span><br><span class="line"><span class="comment">        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache</span></span><br><span class="line"><span class="comment">                            has reached the maxInMemory limit.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sample cache named sampleCache1</span></span><br><span class="line"><span class="comment">        This cache contains a maximum in memory of 10000 elements, and will expire</span></span><br><span class="line"><span class="comment">        an element if it is idle for more than 5 minutes and lives for more than</span></span><br><span class="line"><span class="comment">        10 minutes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        If there are more than 10000 elements it will overflow to the</span></span><br><span class="line"><span class="comment">        disk cache, which in this configuration will go to wherever java.io.tmp is</span></span><br><span class="line"><span class="comment">        defined on your system. On a standard Linux system this will be /tmp"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sample cache named sampleCache2</span></span><br><span class="line"><span class="comment">        This cache contains 1000 elements. Elements will always be held in memory.</span></span><br><span class="line"><span class="comment">        They are not expired. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span> --&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Place configuration for your caches following --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0912</title>
      <link href="/jokerboozp.github.io/2019/09/12/2019-09-12-Java%E5%9F%BA%E7%A1%80-TCP-Socket-UDP/"/>
      <url>/jokerboozp.github.io/2019/09/12/2019-09-12-Java%E5%9F%BA%E7%A1%80-TCP-Socket-UDP/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础网络编程"><a href="#Java基础网络编程" class="headerlink" title="Java基础网络编程"></a>Java基础网络编程</h1><h3 id="TCP-Socket简例"><a href="#TCP-Socket简例" class="headerlink" title="TCP_Socket简例"></a>TCP_Socket简例</h3><ul><li>例1：</li><li>Server端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ServerSocket s=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket s1=s.accept();</span><br><span class="line">                OutputStream os=s1.getOutputStream();</span><br><span class="line">                DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">                dos.writeUTF(<span class="string">"hello,"</span>+s1.getInetAddress()+<span class="string">"port#"</span>+s1.getPort()+<span class="string">" bye-bye!"</span>);</span><br><span class="line">                dos.close();</span><br><span class="line">                s1.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"程序运行出错："</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cilent端<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Socket s1=<span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">8888</span>);</span><br><span class="line">            InputStream is=s1.getInputStream();</span><br><span class="line">            DataInputStream dis=<span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            System.out.println(dis.readUTF());</span><br><span class="line">            dis.close();</span><br><span class="line">            s1.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ConnectException conExc)&#123;</span><br><span class="line">            conExc.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"服务器连接失败！"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>例2：</p></li><li><p>Server端</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocketServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream in=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream out=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ServerSocket ss=<span class="keyword">new</span> ServerSocket(<span class="number">5888</span>);</span><br><span class="line">            Socket socket=ss.accept();</span><br><span class="line">            in=socket.getInputStream();</span><br><span class="line">            out=socket.getOutputStream();</span><br><span class="line">            DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(out);</span><br><span class="line">            DataInputStream dis=<span class="keyword">new</span> DataInputStream(in);</span><br><span class="line">            String s=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>((s=dis.readUTF())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                System.out.println(<span class="string">"from:"</span>+socket.getInetAddress());</span><br><span class="line">                System.out.println(<span class="string">"Port:"</span>+socket.getPort());</span><br><span class="line">            &#125;</span><br><span class="line">            dos.writeUTF(<span class="string">"hi,hello"</span>);</span><br><span class="line">            dis.close();</span><br><span class="line">            dos.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>client端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSocketClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Socket socket=<span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">5888</span>);</span><br><span class="line">            is=socket.getInputStream();</span><br><span class="line">            os=socket.getOutputStream();</span><br><span class="line">            DataInputStream dis=<span class="keyword">new</span> DataInputStream(is);</span><br><span class="line">            DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">            dos.writeUTF(<span class="string">"hey!"</span>);</span><br><span class="line">            String s=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>((s=dis.readUTF())!=<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            dos.close();</span><br><span class="line">            dis.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul><li><p>不可靠的</p></li><li><p>效率高</p></li><li><p>数据报/非连接</p></li><li><p>例子：</p></li><li><p>Server层</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUDPServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> buf[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket dp=<span class="keyword">new</span> DatagramPacket(buf,buf.length);</span><br><span class="line">        DatagramSocket ds=<span class="keyword">new</span> DatagramSocket(<span class="number">5678</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            ByteArrayInputStream bais=<span class="keyword">new</span> ByteArrayInputStream(buf);</span><br><span class="line">            DataInputStream dis=<span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">            System.out.println(dis.readLong());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>client层</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUDPClient</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n=<span class="number">10000L</span>;</span><br><span class="line">    ByteArrayOutputStream baos=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">    dos.writeLong(n);</span><br><span class="line">        <span class="keyword">byte</span>[] buf=baos.toByteArray();</span><br><span class="line">        DatagramPacket dp=<span class="keyword">new</span> DatagramPacket(buf,buf.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">5678</span>));</span><br><span class="line">        DatagramSocket ds=<span class="keyword">new</span> DatagramSocket(<span class="number">9999</span>);</span><br><span class="line">        ds.send(dp);</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0911</title>
      <link href="/jokerboozp.github.io/2019/09/11/2019-09-11-Java%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/jokerboozp.github.io/2019/09/11/2019-09-11-Java%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础网络编程"><a href="#Java基础网络编程" class="headerlink" title="Java基础网络编程"></a>Java基础网络编程</h1><h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><ul><li>应用层、传输层、网络层、物理+数据链路层</li></ul><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><ul><li>IP协议是网际层的主要协议，支持网间互联的数据报通信。他提供的主要功能有：<ul><li>无连接数据报传送</li><li>数据报路由选择和差错控制</li></ul></li></ul><h3 id="TCP和UDP协议"><a href="#TCP和UDP协议" class="headerlink" title="TCP和UDP协议"></a>TCP和UDP协议</h3><ul><li>TCP（transmission control protocol）是专门设计用于在不可靠的因特网上提供可靠的、端到端的字节流通信的协议。它是一种面向连接的协议。TCP连接是字节流而非报文流。<a id="more"></a><ul><li>TCP可靠，但是比较慢</li></ul></li><li>UDP（user data protocol）向应用程序提供了一种发射封装的原始IP数据报的方法，并且发送时无需建立连接。是一种不可靠的连接。<ul><li>UDP不可靠，但是慢</li></ul></li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li>两个Java应用程序可通过一个双向的网络通信连接实现数据交换，这个双向链路的一端称为一个socket。</li><li>socket通常用来实现client-server连接</li><li>java.net包中定义的两个类socket和ServerSocket，分别用来实现双向连接的client和server端</li><li>建立连接时所需要的寻址信息为远程计算机的IP地址和端口号（Port number）<ul><li>端口号分为TCP端口、UDP端口。每一个有65536个端口</li></ul></li></ul><h3 id="TCP-Socket通信模型"><a href="#TCP-Socket通信模型" class="headerlink" title="TCP Socket通信模型"></a>TCP Socket通信模型</h3><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-11%20162812.png" alt="TCP Socket通信模型"></p><h3 id="socket的Java程序"><a href="#socket的Java程序" class="headerlink" title="socket的Java程序"></a>socket的Java程序</h3><ul><li>在运行时要先运行TCPServer，先运行TCPClient的话会导致server没有信息</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-11%20162400.png" alt="运行结果"></p><p>1.TCPServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ServerSocket ss=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Socket s=ss.accept();<span class="comment">//accept是阻塞式的，等待信息过来，没有信息则一直等待</span></span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(s.getInputStream());</span><br><span class="line">System.out.println(dis.readUTF());<span class="comment">//readUTF也是阻塞式</span></span><br><span class="line">dis.close();</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.TCPClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Socket s=<span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">6666</span>);</span><br><span class="line">OutputStream os=s.getOutputStream();</span><br><span class="line">DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line">dos.writeUTF(<span class="string">"hello server!"</span>);</span><br><span class="line">dos.flush();</span><br><span class="line">dos.close();</span><br><span class="line">s.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0910</title>
      <link href="/jokerboozp.github.io/2019/09/10/2019-09-10-Java%E5%9F%BA%E7%A1%80-%E5%A4%9A%E6%80%81/"/>
      <url>/jokerboozp.github.io/2019/09/10/2019-09-10-Java%E5%9F%BA%E7%A1%80-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>面向对象三大特性：封装、继承、多态</li><li>实现多态的技术：动态绑定（迟绑定），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用相应的方法。</li><li>多态的作用：消除类型之间的耦合关系</li></ul><h3 id="多态的定义"><a href="#多态的定义" class="headerlink" title="多态的定义"></a>多态的定义</h3><ul><li>指运行不同类的对象对同一<a id="more"></a>消息做出响应，即同一消息可以根据发送对象的不同采用多种不同的行为方式（发送消息指的就是函数调用）</li></ul><h3 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h3><p>1.可替换性（substitutability）：多态对已存在的代码具有可替代性。例如：多态对圆Circle类工作，对其他任何圆形几何体，如圆环也同样工作。<br>2.可扩充性（extensibility）：多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性，继承性，以及其他特性的运行和操作，实际上新加子类更容易获得多态功能。例如：实现了圆锥，半圆锥以及半球体的多态基础上，很容易添加球体类的多态性。<br>3.接口性（interface-ability）：多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或覆盖它而实现的。<br>4.灵活性（flexibility）：他在应用中体现了灵活多样的操作，提高了使用效率<br>5.简化性（simplicity）：多态简化对应用软件的代码编写和修改过程，尤其是在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p><h3 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h3><ul><li>接口实现，继承父类方法进行方法重写，同一个类中进行方法重载</li><li>父类引用指向子类对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0910生产消费</title>
      <link href="/jokerboozp.github.io/2019/09/10/2019-09-10-Java%E5%9F%BA%E7%A1%80-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/"/>
      <url>/jokerboozp.github.io/2019/09/10/2019-09-10-Java%E5%9F%BA%E7%A1%80-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><ul><li><p>生产者和消费者在同一时间段内共用同一个存储空间，生产者向空间内存放数据，消费者却取用数据。如果不加协调的话会出现以下情况：</p><ul><li>存储空间已满，而生产者一直占用着它，消费者等着生产者让出空间从而去除产品，生产者等着消费者消费产品，从而向空间中添加产品。两者互相等待，从而发生死锁。</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-10%20114712.png" alt="生产者消费者示意图"></li></ul></li><li><p>例子：向筐子中放馒头，师傅生产，用户消费<a id="more"></a></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">new</span> SyncStack();</span><br><span class="line">Producer p=<span class="keyword">new</span> Producer(ss);</span><br><span class="line">Consumer c=<span class="keyword">new</span> Consumer(ss);</span><br><span class="line"><span class="keyword">new</span> Thread(p).start();</span><br><span class="line"><span class="keyword">new</span> Thread(c).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WoTou</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">WoTou(<span class="keyword">int</span> id)&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"WoTou:"</span>+id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncStack</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">WoTou[] arrWT=<span class="keyword">new</span> WoTou[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(WoTou wt)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index==arrWT.length)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前的正在访问的对象的线程wait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();<span class="comment">//叫醒一个正在该对象上等待的线程</span></span><br><span class="line">arrWT[index]=wt;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> WoTou <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前的正在访问的对象的线程wait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">index--;</span><br><span class="line"><span class="keyword">return</span> arrWT[index];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">null</span>;</span><br><span class="line">Producer(SyncStack ss)&#123;</span><br><span class="line"><span class="keyword">this</span>.ss=ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">WoTou wt=<span class="keyword">new</span> WoTou(i);</span><br><span class="line">ss.push(wt);</span><br><span class="line">System.out.println(<span class="string">"生产了："</span>+wt);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>)(Math.random())*<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">null</span>;</span><br><span class="line">Consumer(SyncStack ss)&#123;</span><br><span class="line"><span class="keyword">this</span>.ss=ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">WoTou wt=ss.pop();</span><br><span class="line">System.out.println(<span class="string">"消费了："</span>+wt);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>)(Math.random())*<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0907总结</title>
      <link href="/jokerboozp.github.io/2019/09/07/2019-09-07-Java%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>/jokerboozp.github.io/2019/09/07/2019-09-07-Java%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="线程总结"><a href="#线程总结" class="headerlink" title="线程总结"></a>线程总结</h3><h4 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h4><p>1.wait是object类的方法，sleep是thread类的方法<br>2.wait时别的线程可以访问锁定对象；sleep时别的线程不可以访问锁定对象。调用wait方法时必须锁定该对象。</p><h4 id="线程、进程的概念"><a href="#线程、进程的概念" class="headerlink" title="线程、进程的概念"></a>线程、进程的概念</h4><h4 id="创建和启动线程的方式"><a href="#创建和启动线程的方式" class="headerlink" title="创建和启动线程的方式"></a>创建和启动线程的方式</h4><p>1.从thread类继承，重写run方法<a id="more"></a><br>2.实现runnable接口</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><h4 id="notify-notifyAll"><a href="#notify-notifyAll" class="headerlink" title="notify/notifyAll"></a>notify/notifyAll</h4>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0906</title>
      <link href="/jokerboozp.github.io/2019/09/06/2019-09-06-Java%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/jokerboozp.github.io/2019/09/06/2019-09-06-Java%E5%9F%BA%E7%A1%80-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li>多个线程之间进行协调的方法叫做线程同步</li><li>在Java语言中，引入了对象互斥锁的概念，保证共享数据操作的完整性。每个对象对应于一个可称为“互斥锁”的标记，这个标记保证在任一时刻，只能有一个线程访问该对象</li><li>关键字synchronized来与对象的互斥锁联系。当某个对象synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。<a id="more"></a></li></ul><h4 id="synchronized使用方法"><a href="#synchronized使用方法" class="headerlink" title="synchronized使用方法"></a>synchronized使用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="comment">//锁定当前对象</span></span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        System.out.println(name+<span class="string">",你是第"</span>+num+<span class="string">"个使用timer的线程"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>synchronized也可以放在方法声明中，表示整个方法为同步方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestSync test=<span class="keyword">new</span> TestSync();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(test);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(test);</span><br><span class="line">        t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"t2"</span>);</span><br><span class="line">        <span class="comment">//t1和t2都访问的同一个对象timer，所以涉及到线程同步</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        timer.add(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="comment">//也可以写成public synchronized void add(String name)</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="comment">//锁定当前对象</span></span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        System.out.println(name+<span class="string">",你是第"</span>+num+<span class="string">"个使用timer的线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>死锁例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> Object o1=<span class="keyword">new</span> Object(),o2=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"flag="</span>+flag);</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(o1)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span>(o2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(o2)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span>(o1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestDeadLock td1=<span class="keyword">new</span> TestDeadLock();</span><br><span class="line">        TestDeadLock td2=<span class="keyword">new</span> TestDeadLock();</span><br><span class="line">        td1.flag=<span class="number">1</span>;</span><br><span class="line">        td2.flag=<span class="number">0</span>;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(td1);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(td2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><ul><li>一个程序，模拟做馒头和吃馒头。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">new</span> SyncStack();</span><br><span class="line">Producer p=<span class="keyword">new</span> Producer(ss);</span><br><span class="line">Consumer c=<span class="keyword">new</span> Consumer(ss);</span><br><span class="line"><span class="keyword">new</span> Thread(p).start();</span><br><span class="line"><span class="keyword">new</span> Thread(c).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WoTou</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">WoTou(<span class="keyword">int</span> id)&#123;</span><br><span class="line"><span class="keyword">this</span>.id=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"WoTou:"</span>+id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncStack</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">WoTou[] arrWT=<span class="keyword">new</span> WoTou[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(WoTou wt)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index==arrWT.length)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前的正在访问的对象的线程wait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();<span class="comment">//叫醒一个正在该对象上等待的线程</span></span><br><span class="line">arrWT[index]=wt;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> WoTou <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//当前的正在访问的对象的线程wait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">index--;</span><br><span class="line"><span class="keyword">return</span> arrWT[index];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">null</span>;</span><br><span class="line">Producer(SyncStack ss)&#123;</span><br><span class="line"><span class="keyword">this</span>.ss=ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">WoTou wt=<span class="keyword">new</span> WoTou(i);</span><br><span class="line">ss.push(wt);</span><br><span class="line">System.out.println(<span class="string">"生产了："</span>+wt);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>)(Math.random())*<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">SyncStack ss=<span class="keyword">null</span>;</span><br><span class="line">Consumer(SyncStack ss)&#123;</span><br><span class="line"><span class="keyword">this</span>.ss=ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">WoTou wt=ss.pop();</span><br><span class="line">System.out.println(<span class="string">"消费了："</span>+wt);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>)(Math.random())*<span class="number">1000</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0905</title>
      <link href="/jokerboozp.github.io/2019/09/05/2019-09-05-Java%E5%9F%BA%E7%A1%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/jokerboozp.github.io/2019/09/05/2019-09-05-Java%E5%9F%BA%E7%A1%80-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java多线程机制"><a href="#Java多线程机制" class="headerlink" title="Java多线程机制"></a>Java多线程机制</h2><h3 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h3><ul><li>线程是一个程序内部的顺序控制流</li><li>Java中的线程是通过java.lang.Thread类来实现的</li><li>VM启动时会有一个由主方法所定义的线程（public static void main(){}）</li><li>可以通过创建Thread的实例来创建新的线程</li><li>每个线程都是通过某个特定的Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体</li><li>通过调用Thread类的start()方法来启动一个线程</li></ul><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><ul><li>每一个进程都有独立的代码<a id="more"></a>和数据空间（进程上下文），进程间的切换会有较大的开销</li><li>线程可以看成是轻量级的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小</li><li>多进程：在操作系统中能同时运行多个程序（任务）</li><li>多线程：在同一应用程序中有多个顺序流同时执行</li></ul><h3 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h3><ul><li>有两种的方式创建新的线程</li></ul><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><ul><li><p>定义线程类实现Runnable接口</p><ul><li><code>Thread myThread=new Thread(target);</code>//target为Runnable接口类型</li><li>Runnable中只有一个方法<ul><li><code>public void run();</code>用于定义线程运行体</li></ul></li><li>使用Runnable接口可以为多个线程提供共享的数据</li><li>在实现Runnable接口的类的run方法定义中可以使用Thread的静态方法<ul><li><code>public static Thread currentThread();</code>获取当前线程的引用</li></ul></li></ul></li><li><p>例子：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Runner1 r=<span class="keyword">new</span> Runner1();</span><br><span class="line">        <span class="comment">//r.run();</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Main Thread:======="</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Runner1:"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><ul><li>定义一个Thread的子类并重写其run方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;......&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>然后生成该类的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyThread myThread=<span class="keyword">new</span> MyThread(......)</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Runner1 r=<span class="keyword">new</span> Runner1();</span><br><span class="line">        r.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Main Thread:======="</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Runner1:"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="线程的状态转换"><a href="#线程的状态转换" class="headerlink" title="线程的状态转换"></a>线程的状态转换</h3><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-05%20093911.png" alt="线程的状态转换"></p><h3 id="线程控制的基本方法"><a href="#线程控制的基本方法" class="headerlink" title="线程控制的基本方法"></a>线程控制的基本方法</h3><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>isAlive()</td><td>判断线程是否还“活”着，即线程是否还未终止（阻塞，运行，就绪都叫“活着”）</td></tr><tr><td>getPriority()</td><td>获得线程的优先级数值</td></tr><tr><td>setPriority()</td><td>设置线程的优先级数值</td></tr><tr><td>Thread.sleep()</td><td>将当前线程睡眠指定毫秒数</td></tr><tr><td>join()</td><td>调用某线程的该方法，将当前线程与该线程“合并”，即等待该线程结束，再恢复当前线程的运行</td></tr><tr><td>yield()</td><td>让出CPU，当前线程进入就绪队列等待调度</td></tr><tr><td>wait()</td><td>当前线程进入对象的wait pool</td></tr><tr><td>notify()/notifyAll()</td><td>唤醒对象的wait pool中的一个/所有等待线程</td></tr></tbody></table><h3 id="sleep、join、yield方法"><a href="#sleep、join、yield方法" class="headerlink" title="sleep、join、yield方法"></a>sleep、join、yield方法</h3><h4 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h4><ul><li>可以调用Thread的静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="comment">//使得当前线程休眠（暂时停止执行millis毫秒）</span></span></span><br></pre></td></tr></table></figure><ul><li>由于是静态方法，sleep可以由类名直接调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(...)</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterrupt</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread thread=<span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10000</span>);&#125;</span><br><span class="line"><span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">            thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"===="</span>+<span class="keyword">new</span> Date()+<span class="string">"===="</span>);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><ul><li>合并某个线程</li><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread t1=<span class="keyword">new</span> MyThread(<span class="string">"t1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            t1.join();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"i am main thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    MyThread(String s)&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"i am "</span>+getName());</span><br><span class="line">            <span class="keyword">try</span>&#123;sleep(<span class="number">1000</span>);&#125;</span><br><span class="line">            <span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="yield方法"><a href="#yield方法" class="headerlink" title="yield方法"></a>yield方法</h4><ul><li>让出CPU，给其他线程执行的机会</li><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread t1=<span class="keyword">new</span> MyThread(<span class="string">"t1"</span>);</span><br><span class="line">        MyThread t2=<span class="keyword">new</span> MyThread(<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    MyThread(String s)&#123;<span class="keyword">super</span>(s);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">":"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                yield();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ul><li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程。线程调度器按照线程的优先级决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从1到10，一个线程的缺省优先级是5</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread.MIN_PRIORITY=<span class="number">1</span></span><br><span class="line">Thread.MAX_PRIORITY=<span class="number">10</span></span><br><span class="line">Thread.NORM_PRIORITY=<span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> T1());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> T2());</span><br><span class="line">        t1.setPriority(Thread.NORM_PRIORITY+<span class="number">3</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"T1:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"===========T2:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用下述方法获得或设置线程对象的优先级</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Runner r=<span class="keyword">new</span> Runner();</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10000</span>==<span class="number">0</span> &amp; i&gt;<span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">"in thread main i="</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Thread main is over"</span>);</span><br><span class="line">            r.shutDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(flag==<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">" "</span>+ i++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">            flag=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>例3：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Runner();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MainThread:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().isAlive());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"SubThread:"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Timer timer=<span class="keyword">new</span> Timer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestSync test=<span class="keyword">new</span> TestSync();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(test);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(test);</span><br><span class="line">        t1.setName(<span class="string">"t1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"t2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        timer.add(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="comment">//也可以写成public synchronized void add(String name)</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="comment">//锁定当前对象</span></span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">try</span>&#123;Thread.sleep(<span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">        System.out.println(name+<span class="string">",你是第"</span>+num+<span class="string">"个使用timer的线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0903总结</title>
      <link href="/jokerboozp.github.io/2019/09/03/2019-09-03-Java%E5%9F%BA%E7%A1%80-%E6%B5%81%E6%80%BB%E7%BB%93/"/>
      <url>/jokerboozp.github.io/2019/09/03/2019-09-03-Java%E5%9F%BA%E7%A1%80-%E6%B5%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h4 id="流总结"><a href="#流总结" class="headerlink" title="流总结"></a>流总结</h4><ul><li>InputStream/OutputStream</li><li>Reader/Writer</li><li>FileInputStream/FileOutputStream</li><li>FileReader/FileWriter<a id="more"></a></li><li>BufferedInputStream/BufferedOutputStream</li><li>BufferedReader/BufferedWriter</li><li>ByteArrayInputStream/ByteArrayOutputStream</li><li>InputStreamReader/OutputStreamWriter</li><li>DataInputStream/DataOutputStream</li><li>PrintStream/PrintWriter</li><li>ObjectInputStream/ObjectOutputStream</li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0903</title>
      <link href="/jokerboozp.github.io/2019/09/03/2019-09-03-Java%E5%9F%BA%E7%A1%80-%E5%A4%84%E7%90%86%E6%B5%81/"/>
      <url>/jokerboozp.github.io/2019/09/03/2019-09-03-Java%E5%9F%BA%E7%A1%80-%E5%A4%84%E7%90%86%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h2><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-03%20084141.png" alt="处理流类别"></p><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><ul><li>缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，提高了读写的效率，同时增加了一些新的方法</li><li>JDK提供了四种缓存流，其常用的构造方法为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader(Reader in)</span><br><span class="line">BufferedReader(Reader in,<span class="keyword">int</span> sz)<span class="comment">//sz为自定义缓存区大小</span></span><br><span class="line">BufferedWriter(Writer out)</span><br><span class="line">BufferedWriter(Writer out,<span class="keyword">int</span> sz)</span><br><span class="line">BufferedInputStream(InputStream in)</span><br><span class="line">BufferedInputStream(InputStream in,<span class="keyword">int</span> size)</span><br><span class="line">BufferedOutputStream(OutputStream out)</span><br><span class="line">BufferedOutputStream(OutputStream out,<span class="keyword">int</span> size)</span><br></pre></td></tr></table></figure><ul><li>缓冲输入流支持其父类的mark和reset方法<a id="more"></a></li><li>BufferedReader提供了readLine方法用于读取一行字符（以\r或\n分隔）</li><li>BufferedWriter提供了newLine用于写入一个行分隔符</li><li>对于输出的缓冲流，写出的数据会现在内存中缓存，使用flush方法将会使内存中的数据立刻写出</li><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">            BufferedInputStream bis=<span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">            <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">            System.out.println(bis.read());</span><br><span class="line">            System.out.println(bis.read());</span><br><span class="line">            bis.mark(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span> &amp;&amp; (c=bis.read())!=-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                System.out.print(c+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            bis.reset();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span> &amp;&amp; (c=bis.read())!=-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                System.out.print(c+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"E:\\test\\Animal.java"</span>));</span><br><span class="line">            BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"E:\\test\\Animal.java"</span>));</span><br><span class="line">            String s=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">                s=String.valueOf(Math.random());</span><br><span class="line">                bw.write(s);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            bw.flush();</span><br><span class="line">            <span class="keyword">while</span>((s=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.close();</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><ul><li>InputStreamReader和OutputStreamWriter可与字节数据到字符数据之间的转换</li><li>InputStreamReader需要和InputStream“套接”</li><li>OutputStreamWriter需要和OutputStream“套接”</li><li>转换流在构造时可以指定其编码集合，例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream isr=<span class="keyword">new</span> InputStreamReader(System.in,<span class="string">"IOS8859-1"</span>);</span><br></pre></td></tr></table></figure><ul><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransForm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            OutputStreamWriter osw=<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\test\\Animal.java"</span>));</span><br><span class="line">            osw.write(<span class="string">"abcdefg"</span>);</span><br><span class="line">            System.out.println(osw.getEncoding());</span><br><span class="line">            osw.close();</span><br><span class="line">            osw=<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\test\\Animal.java"</span>,<span class="keyword">true</span>),<span class="string">"ISO8859-1"</span>);<span class="comment">//在文件后添加，而不是直接覆盖以前拥有的</span></span><br><span class="line">            osw.write(<span class="string">"abcdefg"</span>);</span><br><span class="line">            System.out.println(osw.getEncoding());</span><br><span class="line">            osw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransForm</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        InputStreamReader isr=<span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">        BufferedReader br=<span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String s=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s=br.readLine();</span><br><span class="line">            <span class="keyword">while</span>(s!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">"exit"</span>))<span class="keyword">break</span>;</span><br><span class="line">                System.out.println(s.toUpperCase());</span><br><span class="line">                s=br.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><ul><li>DataInputStream和DataOutputStream分别继承自InputStream和OutputStream，它属于处理流，需要分别“套接”在InputStream和OutputStream类型的节点流上</li><li>DataInputStream和DataOutputStream提供了可以存取与机器无关的Java原始类型数据（如int，double等）的方法</li><li>DataInputStream和DataOutputStream的构造方法为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataInputStream(InputStream in)</span><br><span class="line">DataOutputStream(OutputStream out)</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos=<span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            dos.writeDouble(Math.random());</span><br><span class="line">            dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            ByteArrayInputStream bais=<span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            System.out.println(bais.available());</span><br><span class="line">            DataInputStream dis=<span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">            System.out.println(dis.readDouble());<span class="comment">//先写入的先读出来 </span></span><br><span class="line">            System.out.println(dis.readBoolean());</span><br><span class="line">            dos.close();</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Print流"><a href="#Print流" class="headerlink" title="Print流"></a>Print流</h3><ul><li>PrintWriter和PrintStream都属于输出流，分别针对与字符和字节</li><li>PrintWriter和PrintStream提供了重载的Print方法</li><li>Println方法可用于多种数据类型的输出</li><li>PrintWriter和PrintStream的输出操作不会抛出异常，用户通过检测错误状态获取错误信息</li><li>PrintWriter和PrintStream有自动flush功能</li><li>常用方法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter(Writer out)</span><br><span class="line">PrintWriter(Writer out,<span class="keyword">boolean</span> autoFlush)</span><br><span class="line">PrintWriter(OutputStream out)</span><br><span class="line">PrintWriter(OutputStream out,<span class="keyword">boolean</span> autoFlush)</span><br><span class="line">PrintStream(OutputStream out)</span><br><span class="line">PrintStream(OutputStream out,<span class="keyword">boolean</span> autoFlush)</span><br></pre></td></tr></table></figure><ul><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PrintStream ps=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">            ps=<span class="keyword">new</span> PrintStream(fos);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.setOut(ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ln=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="number">0</span>;c&lt;=<span class="number">60000</span>;c++)&#123;</span><br><span class="line">            System.out.println(c++);</span><br><span class="line">            <span class="keyword">if</span>(ln++&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                ln=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String filename=args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(filename!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list(filename,System.out);</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(String f,PrintStream fs)</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(f));</span><br><span class="line">                String s=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span>((s=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    fs.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                fs.println(<span class="string">"无法读取文件"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例3:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileWriter fw=<span class="keyword">new</span> FileWriter(<span class="string">"E:\\test\\Animal.java"</span>,<span class="keyword">true</span>);</span><br><span class="line">            PrintWriter log=<span class="keyword">new</span> PrintWriter(fw);</span><br><span class="line">            <span class="keyword">while</span>((s=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">"exit"</span>))<span class="keyword">break</span>;</span><br><span class="line">                System.out.println(s.toUpperCase());</span><br><span class="line">                log.println(<span class="string">"------"</span>);</span><br><span class="line">                log.println(s.toUpperCase());</span><br><span class="line">                log.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            log.println(<span class="string">"===="</span>+<span class="keyword">new</span> Date()+<span class="string">"===="</span>);</span><br><span class="line">            log.flush();</span><br><span class="line">            log.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object流"><a href="#Object流" class="headerlink" title="Object流"></a>Object流</h3><ul><li>直接将Object写入或读出<ul><li>transient关键字</li><li>serializable接口</li><li>externalizable接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectIO</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        T t=<span class="keyword">new</span> T();</span><br><span class="line">        t.k=<span class="number">8</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        oos.writeObject(t);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">        ObjectInputStream cls=<span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        T tReaded=(T)cls.readObject();</span><br><span class="line">        System.out.println(tReaded.i+<span class="string">" "</span>+tReaded.j+<span class="string">" "</span>+tReaded.d+<span class="string">" "</span>+tReaded.k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="comment">//Serializable接口：标记性的接口，如果想把某个列的对象序列化，则必须实现Serializable接口</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">9</span>;</span><br><span class="line">    <span class="keyword">double</span> d=<span class="number">2.3</span>;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> k=<span class="number">15</span>;<span class="comment">//transient关键字修饰的变量在序列化时不考虑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro基础</title>
      <link href="/jokerboozp.github.io/2019/09/03/2019-09-03-Shiro-Shiro%E7%AE%80%E4%BB%8B/"/>
      <url>/jokerboozp.github.io/2019/09/03/2019-09-03-Shiro-Shiro%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><ul><li>Shiro是一个安全（权限）框架</li><li>Shiro可以完成：认证、授权、加密、会话管理、与Web集成、缓存等</li><li>shiro是一个有许多特性的全面的安全框架，下面这幅图可以了解shiro的特性</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/shiro-1.png" alt="shiro特性"></p><h4 id="shiro架构"><a href="#shiro架构" class="headerlink" title="shiro架构"></a>shiro架构<a id="more"></a></h4><ul><li>从大的角度来看，shiro主要有三个概念：subject、SecirityManager、Realms，下面这幅图可以看到这些原件之间的交互、</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/shiro-2.png" alt="shiro架构"></p><ul><li>subject：翻译为主角，当前参与应用安全部份的主角。可以是用户，可以是第三方服务，可以是cron任务，或者任何东西。主要指一个正在与当前软件交互的东西。所有subject都需要SecurityManager，当你与subject进行交互，这些交互行为实际上被转换为与SecurityManager的交互</li><li>SecurityManager：安全管理员，Shiro架构的核心，他就像Shiro内部所有原件的保护伞。然而一旦配置了SecurityManager，SecurityManager就用到的比较少，大部分时间都花在Subject上面。</li><li>Realms：Realms作为Shrio和你的应用程序的连接桥，当需要与安全数据交互的时候，像用户账户，或者访问控制，shiro就从一个或者多个Realms中查找。shiro提供了一些可以直接使用的Realms，如果默认的Realms不能满足你的要求，你也可以定制自己的Realms。</li></ul><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/shiro-3.png" alt="shiro架构"></p>]]></content>
      
      
      <categories>
          
          <category> Shiro </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0902</title>
      <link href="/jokerboozp.github.io/2019/09/02/2019-09-02-Java%E5%9F%BA%E7%A1%80-IO/"/>
      <url>/jokerboozp.github.io/2019/09/02/2019-09-02-Java%E5%9F%BA%E7%A1%80-IO/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><h3 id="输入-输出流的分类"><a href="#输入-输出流的分类" class="headerlink" title="输入/输出流的分类"></a>输入/输出流的分类</h3><ul><li><p>java.io包中定义了多个流类型（类或抽象类）来实现输入/输出功能；可以从不同角度对其进行分类</p><ul><li>按数据流的方向不同可分为输入流和输出流</li><li>按照处理数据单位不同可分为字节流和字符流</li><li>按照功能不同可分为节点流和处理流</li></ul></li><li><p>JDK所提供的所有流类型都位于包java.io内，都分别继承自以下四种抽象流类型</p></li></ul><table><thead><tr><th align="center">名称</th><th align="center">字节流</th><th align="right">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="right">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="right">Writer</td></tr></tbody></table><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><ul><li>节点流为可以从一个特定的数据源（节点）读取数据</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20112101.png" alt="节点流"></li><li>处理流是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写能力</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20112114.png" alt="处理流"><h4 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h4><ul><li>继承自InputStream的流都是用于向程序中输入数据，且数据的单位为字节（8bit）；下图深色为节点流，浅色为处理流<ul><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20113037.png" alt="分类"></li></ul></li></ul></li></ul><h4 id="InputStream的基本方法"><a href="#InputStream的基本方法" class="headerlink" title="InputStream的基本方法"></a>InputStream的基本方法</h4><ul><li><code>int read() throws IOException</code>//读取一个字节并以整数的形式返回(0~255)，如果返回-1代表已到输出流的末尾</li><li><code>int read(byte[] buffer) throws IOException</code>//读取一系列字节并存储到一个数组buffer，返回实际读取的字节数，如果读取前已到输入流的末尾返回-1</li><li><code>int read(byte[] buffer,int offset,int length) throws IOException</code>//读取length个字节，并存储到一个字节数组buffer，从length位置开始。返回实际控制的字节数，如果读取前已到输入流的末尾返回-1</li><li><code>void colse() throws IOException</code>//关闭流释放内存资源</li><li><code>long skip(long n) throws IOException</code>//跳过n个字节不读，返回实际跳过的字节数</li></ul><h4 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h4><ul><li>继承自OutputStream的流是用于程序中输入数据，且数据的单位为字节（8bit）；下图深色为节点流，浅色为处理流<ul><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20134236.png" alt="OutputStream"></li></ul></li></ul><h4 id="OutputStream的基本方法"><a href="#OutputStream的基本方法" class="headerlink" title="OutputStream的基本方法"></a>OutputStream的基本方法</h4><ul><li><code>void write(int b) throws IOException</code>//向输出流中写入一个字节数据，该字节数据为参数b的低8位</li><li><code>void write(byte[] b) throws IOException</code>//将一个字节类型数据中的数组中的数据写入输出流</li><li><code>void write(byte[] b,int off,int len) throws IOException</code>//将一个字节类型的数组中的数据从指定位置（off）开始的len个字节写入到输出流中</li><li><code>void colse() throws IOException</code>//关闭流释放内存资源</li><li><code>void flus() throws IOException</code>//将输出流中缓冲的数据全部写出到目的地</li></ul><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><ul><li>继承自Reader的流都是用于向程序中输入数据，且数据的单位为字符（16bit）；下图中深色为节点流，浅色的为处理流。<ul><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20135952.png" alt="reader"></li></ul></li></ul><h4 id="Reader的基本方法"><a href="#Reader的基本方法" class="headerlink" title="Reader的基本方法"></a>Reader的基本方法</h4><ul><li><code>int read() throws IOException</code>//读取一个字符并以整数的形式返回(0~255)，如果返回-1代表已到输出流的末尾</li><li><code>int read(byte[] buffer) throws IOException</code>//读取一系列字符并存储到一个数组buffer，返回实际读取的字节数，如果读取前已到输入流的末尾返回-1</li><li><code>int read(byte[] buffer,int offset,int length) throws IOException</code>//读取length个字符，并存储到一个数组buffer，从length位置开始。返回实际读取的字符数，如果读取前已到输入流的末尾返回-1</li><li><code>void colse() throws IOException</code>//关闭流释放内存资源</li><li><code>long skip(long n) throws IOException</code>//跳过n个字符不读，返回实际跳过的字符数</li></ul><h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><ul><li>继承自Writer的流都是用于程序中输出数据，且数据的单位为字符（16bit）；下图深色的为节点流，浅色的为处理流</li><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20141104.png" alt="Writer"></li></ul><h4 id="Writer的基本方法"><a href="#Writer的基本方法" class="headerlink" title="Writer的基本方法"></a>Writer的基本方法</h4><ul><li><code>void write(int b) throws IOException</code>//向输出流中写入一个字符数据，该字符数据为参数b的低16位</li><li><code>void write(byte[] b) throws IOException</code>//将一个字符类型数据中的数组中的数据写入输出流</li><li><code>void write(byte[] cbuf,int offset,int length) throws IOException</code>//将一个字符类型的数组中的数据从指定位置（offset）开始的lenth个字符写入到输出流中</li><li><code>void write(String string) throws IOException</code>//将一个字符串中的字符写入到输出流</li><li><code>void colse() throws IOException</code>//关闭流释放内存资源</li><li><code>void flus() throws IOException</code>//将输出流中缓冲的数据全部写出到目的地</li></ul><h4 id="节点流类型"><a href="#节点流类型" class="headerlink" title="节点流类型"></a>节点流类型</h4><p><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-09-02%20142038.png" alt="节点流类型"></p><ul><li>例1：</li><li>文件的读取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileInputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">        FileInputStream in=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in =<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"找不到指定文件"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((b=in.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">"共读取了"</span>+num+<span class="string">"个字节"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException el)&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件读取错误"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例2：<a id="more"></a></li><li>文件的复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileOutputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">        FileInputStream in=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream out=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            in=<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\test\\Animal.java"</span>);</span><br><span class="line">            out=<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\test\\A.class"</span>);</span><br><span class="line">            <span class="keyword">while</span>((b=in.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                out.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(FileNotFoundException e2)&#123;</span><br><span class="line">            System.out.println(<span class="string">"找不到指定文件"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e1)&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件复制错误"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件已复制"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle编写高效sql</title>
      <link href="/jokerboozp.github.io/2019/09/02/2019-09-02-Oracle-%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88sql/"/>
      <url>/jokerboozp.github.io/2019/09/02/2019-09-02-Oracle-%E7%BC%96%E5%86%99%E9%AB%98%E6%95%88sql/</url>
      
        <content type="html"><![CDATA[<h4 id="编写高效SQL"><a href="#编写高效SQL" class="headerlink" title="编写高效SQL"></a>编写高效SQL</h4><p>1.选择最有效率的表名顺序（只在基于规则的优化器中有效）</p><ul><li>Oracle的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表（基础表driving table）将被最先处理，在FROM子句中包含多个表的情况下，你必须选择记录条数最少的表最为基础表。假如有三个以上的表连接查询，那就需要选择交叉表（intersection table）作为基础表，交叉表是指那个被其他表引用的表</li></ul><p>2.WHERE子句中的连接顺序<a id="more"></a></p><ul><li>Oracle采用自上而下的顺序解析WHERE子句，根据这个原理，表之间的连接必须写在其他WHERE条件之前，那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾</li></ul><p>3.SELECT语句中避免使用<code>*</code></p><ul><li>Oracle在解析过程中，会将<code>*</code>依次转换为所有的列名，这个工作是通过查询数据字典完成的，这意味着耗费更多的时间</li></ul><p>4.用EXISTS代替IN，用NOT EXISTS代替NOT IN</p><ul><li>在许多基于基础表的查询中，为了满足一个条件，往往需要对另一个表进行连接。在这种情况下，使用EXISTS（或NOT EXISTS）通常将提高查询的效率。在子查询中，NOT IN子句将执行一个内部的排序和合并，无论在哪种情况下，NOT IN都是最低效的（因为他对子查询中的表执行了一个全表遍历）。为了避免使用NOT IN，我们可以把它改写成外连接（Outer Joins）或NOT EXISTS。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select nsrsbh,nsrmc,nsr_swjg_dm from dj_nsrxx where nsr_swjg_dm in(select swjg_dm from dm_swjg start with swjg_dm&#x3D;&#39;13400000000&#39; connect by prior swjg_dm&#x3D;sj_swjg_dm)</span><br><span class="line">select nsrsbh,nsrmc,nsr_swjg_dm from dj_nsrxx where exists(select 1 from dm_swjg where swjg_dm&#x3D;dj_nsrxx.nsr_swjg_dm start with swjg_dm&#x3D;&#39;13400000000&#39; connect by prior swjg_dm&#x3D;sj_swjg_dm)</span><br></pre></td></tr></table></figure><p>5.用索引提高效率</p><ul><li>索引用来提高检索数据的效率，在大型表中使用索引十分有效。索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时，索引本身也会被修改，这意味着每条记录的INSERAT，DELETE，UPDATE将为此多付出４，５次的磁盘I/O。因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢</li><li>定期重构索引能够提高使用索引的效率</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER INDEX&lt;INDEXNAME&gt; REBUILD &lt;TABLESPACENAME&gt;</span><br></pre></td></tr></table></figure><p>6.用EXISTS代替DISTINCT</p><ul><li>当查询一个包含一对多表信息的连接查询时，避免在SELECT子句中使用DISTINCT，可以考虑使用EXISTS替换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select distinct nsrsbh,nsrmc from dj_nsrxx,sb_sbxx where dj_nsrxx.nsrdzdah&#x3D;sb_sbxx.nsrdzdah</span><br><span class="line">select nsrsbh,nsrmc from dj_nsrxx where exists(select 1 from sb_sbxx where nsrdzdah&#x3D;dj_nsrxx.nsrdzdah)</span><br></pre></td></tr></table></figure><p>7.避免在索引列上使用NOT</p><ul><li>当在索引列上使用NOT时，Oracle会自动进行全表扫描，不再使用索引</li></ul><p>8.避免在索引列上使用函数</p><ul><li>WHERE子句中，假如索引列是函数的一部分。优化器将不使用索引而使用全表扫描</li></ul><p>9.用&gt;=替代&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select nsrsbh,nsrmc from dj_nsrxx where Irrq &gt;&#x3D; to_date(&#39;20131201&#39;,&#39;yyyymmdd&#39;);</span><br><span class="line">select nsrsbh,nsrmc from dj_nsrxx where Irrq&gt;to_date(&#39;20131130&#39;,&#39;yyyymmdd&#39;);</span><br></pre></td></tr></table></figure><p>10.用UNION替换OR（适用于索引列）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select nsrsbh,nsrmc from dj_nsrxx where nsr_swjg_dm&#x3D;&#39;13401010000&#39; or djzclx_dm&#x3D;&#39;410&#39;;</span><br><span class="line"></span><br><span class="line">select nsrsbh,nsrmc from dj_nsrxx where nsr_swjg_dm&#x3D;&#39;13401010000&#39; union select nsrsbh,nsrmc from dj_nsrxx where djzclx_dm&#x3D;&#39;410&#39;;</span><br></pre></td></tr></table></figure><p>11.用IN来替换OR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select nsrsbh,nsrmc from dj_nsrxx where nsr_swjg_dm&#x3D;&#39;111111111&#39; or nsr_swjg_dm&#x3D;&#39;22222222&#39;;</span><br><span class="line">select nsrsbh,nsrmc from dj_nsrxx where nsr_swjg_dm in (&#39;11111111&#39;,&#39;22222222&#39;);</span><br></pre></td></tr></table></figure><p>12.避免在索引列上使用IS NULL或IS NOT NULL</p><ul><li>假如唯一性索引建立在表的A列和B列上，并且表中存在一条记录的值为（123,null），Oracle将不接受下一条具有相同A、B值（123,null）的记录插入。然而假如所有的索引列都为空，Oracle将认为整个键值为空，但是空不等于空。因此你可以插入1000条具有相同键值的记录，当然他们都是空。因为空值不存在索引，所以WHERE子句中对索引列进行控制比较将使Oracle停用该索引。</li></ul><p>13.总是使用索引的第一个列</p><ul><li>假如索引是建立在多个列上，只有在他的第一个列被where子句引用时，优化器才会选择使用该索引。即表的（A，B）列上建立了联合索引，则当where条件中有where A=’a’时才能使用索引，若只有where B=’b’语句的话，不能使用索引</li></ul><p>14.在可能的情况下使用UNION ALL 代替UNION</p><ul><li>UNION会对两个子查询结果进行排序，并去掉重复记录；UNION ALL不进行排序和去重处理</li></ul><p>15.避免隐式改变索引的类型</p><ul><li>当比较不同数据类型的数据时，Oracle自动对列进行简单的类型转换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select nsrsbh,nsrmc from dj_nsrxx where djzclx_dm&#x3D;410;</span><br><span class="line">select nsrsbh,nsrmc from dj_nsrxx where to_number(djzclx_dm)&#x3D;410;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0901总结</title>
      <link href="/jokerboozp.github.io/2019/09/01/2019-09-01-Java%E5%9F%BA%E7%A1%80-%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93/"/>
      <url>/jokerboozp.github.io/2019/09/01/2019-09-01-Java%E5%9F%BA%E7%A1%80-%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h4 id="容器总结"><a href="#容器总结" class="headerlink" title="容器总结"></a>容器总结</h4><ul><li>1136<ul><li>一个图<ul><li><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-08-31%20093107.png" alt="Aaron Swartz"></li></ul></li><li>一个类<ul><li>Collections</li></ul></li><li>三个知识点<ul><li>For<a id="more"></a></li><li>Generic//泛型</li><li>Auto-boxing/unboxing</li></ul></li><li>六个接口<ul><li>collection</li><li>set</li><li>list</li><li>map</li><li>iterator</li><li>comparable</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0901</title>
      <link href="/jokerboozp.github.io/2019/09/01/2019-09-01-Java%E5%9F%BA%E7%A1%80-Set%E3%80%81List%E3%80%81Comparable%E3%80%81Map%E3%80%81%E6%B3%9B%E5%9E%8B/"/>
      <url>/jokerboozp.github.io/2019/09/01/2019-09-01-Java%E5%9F%BA%E7%A1%80-Set%E3%80%81List%E3%80%81Comparable%E3%80%81Map%E3%80%81%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><ul><li>Set接口是Cllection的子接口，Set接口没有提供额外的方法，但实现Set接口的容器类中的元素是没有顺序的，且不可以重复</li><li>Set容器与数学中“集合“的概念项对应</li><li>JDK API中所提供的Set容器类有HashSet、TreeSet等</li><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Set s=<span class="keyword">new</span> HashSet();</span><br><span class="line">        s.add(<span class="string">"hello"</span>);</span><br><span class="line">        s.add(<span class="string">"world"</span>);</span><br><span class="line">        s.add(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"f2"</span>));</span><br><span class="line">        s.add(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">        s.add(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"f2"</span>));<span class="comment">//相同元素不会被加入</span></span><br><span class="line">        s.add(<span class="string">"hello"</span>);<span class="comment">//相同元素不会被加入</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果:</span><br><span class="line">[<span class="number">100</span>,helolo,world,f1 f2]</span><br></pre></td></tr></table></figure><ul><li>例2：<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Set s1=<span class="keyword">new</span> HashSet();</span><br><span class="line">        Set s2=<span class="keyword">new</span> HashSet();</span><br><span class="line">        s1.add(<span class="string">"a"</span>);</span><br><span class="line">        s1.add(<span class="string">"b"</span>);</span><br><span class="line">        s1.add(<span class="string">"c"</span>);</span><br><span class="line">        s2.add(<span class="string">"d"</span>);</span><br><span class="line">        s2.add(<span class="string">"a"</span>);</span><br><span class="line">        s2.add(<span class="string">"b"</span>);</span><br><span class="line">        <span class="comment">//Set和List容器类都具有Constructor(Collection c)</span></span><br><span class="line">        <span class="comment">//构造方法用以初始化容器类</span></span><br><span class="line">        Set sn=<span class="keyword">new</span> HashSet(s1);</span><br><span class="line">        sn.retainAll(s2);<span class="comment">//s1,s2求交集</span></span><br><span class="line">        Set su=<span class="keyword">new</span> HashSet(s1);</span><br><span class="line">        su.addAll(s2);<span class="comment">//s1、s2添加到一起</span></span><br><span class="line">        System.out.println(sn);</span><br><span class="line">        System.out.println(su);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">[a,b]</span><br><span class="line">[d,a,c,b]</span><br></pre></td></tr></table></figure><hr><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><ul><li>List接口是Collection接口的子接口，实现List接口的容器类中的元素是有顺序的，而且可重复</li><li>List容器中的元素都对应一个整数型的序号记载其在其容器中的位置，可以根据序号存取容器中的元素</li><li>JDK所提供的LIst容器类有ArrayList(底层是以数组实现的)、LinkedList(底层是以链表实现的)等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,Object element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,Object element)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List l1=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            l1.add(<span class="string">"a"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        l1.add(<span class="number">3</span>,<span class="string">"a100"</span>);</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        l1.set(<span class="number">6</span>,<span class="string">"a200"</span>);</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        System.out.print((String)l1.get(<span class="number">2</span>)+<span class="string">" "</span>);</span><br><span class="line">        System.out.println(l1.indexOf(<span class="string">"a3"</span>));</span><br><span class="line">        l1.remove(<span class="number">1</span>);</span><br><span class="line">        System.out,println(l1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">[a0,a1,a2,a3,a4,a5]</span><br><span class="line">[a0,a1,a2,a100,a3,a4,a5]</span><br><span class="line">[a0,a1,a2,a100,a3,a4,a200]</span><br><span class="line">a2 <span class="number">4</span></span><br><span class="line">[a0,a2,a100,a3,a4,a200]</span><br></pre></td></tr></table></figure><ul><li>List常用算法<ul><li>类<strong><em>java.util.Collections</em></strong>提供了一些静态方法实现了基于List容器的一些常用算法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List)</span></span>;<span class="comment">//对List容器内的元素排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List)</span></span>;<span class="comment">//对List容器内的对象进行随机排列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List)</span></span>;<span class="comment">//对List容器内的对象进行逆序排列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List,Object)</span></span>;<span class="comment">//用一个特定的对象重写整个List容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(List dest,List src)</span></span>;<span class="comment">//将src List容器内的内容拷贝到dest List容器中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List,Object)</span></span>;<span class="comment">//对于顺序的List容器，采用折半查找的方法查找特定对象</span></span><br></pre></td></tr></table></figure><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List l1=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        List l2=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            System.out.println(l1);</span><br><span class="line">            Collections.shuffle(l1);<span class="comment">//随机排列</span></span><br><span class="line">            System.out.println(l1);</span><br><span class="line">            Collections.reverse(l1);<span class="comment">//逆序</span></span><br><span class="line">            System.out.println(l1);</span><br><span class="line">            Collections.sort(l1);<span class="comment">//排序</span></span><br><span class="line">            System.out.println(l1);</span><br><span class="line">            System.out.println(Collections.binarySearch(l1,<span class="string">"a5"</span>));<span class="comment">//折半查找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9]</span><br><span class="line">[a0,a3,a8,a9,a4,a6,a5,a2,a0,a7]</span><br><span class="line">[a7,a0,a2,a5,a6,a4,a9,a8,a3,a1]</span><br><span class="line">[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9]</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h4><ul><li><p>所有可以”排序“的类都实现了java.lang.Comparable接口，Comparable接口中只有一个方法：<code>public int compareTo(Object obj);</code></p></li><li><p>该方法：</p><ul><li>返回0表示<strong>this==obj</strong></li><li>返回正数表示<strong>this&gt;obj</strong></li><li>返回负数表示<strong>this&lt;obj</strong></li></ul></li><li><p>实现了Comparable接口的类通过实现compareTo方法从而确定该类对象的排序方式</p></li><li><p>Comparable定义了一个类的两个对象怎么比较</p></li><li><p>例子：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List l1=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        l1.add(<span class="keyword">new</span> Name(<span class="string">"Karl"</span>,<span class="string">"M"</span>));</span><br><span class="line">        l1.add(<span class="keyword">new</span> Name(<span class="string">"Steven"</span>,<span class="string">"Lee"</span>));</span><br><span class="line">        l1.add(<span class="keyword">new</span> Name(<span class="string">"John"</span>,<span class="string">"O"</span>));</span><br><span class="line">        l1.add(<span class="keyword">new</span> Name(<span class="string">"Tom"</span>,<span class="string">"M"</span>));</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">        Collections.sort(l1);</span><br><span class="line">        System.out.println(l1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String firstName,lastName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String firstName,String lastName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName=firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName=lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName+<span class="string">" "</span>+lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Name)&#123;</span><br><span class="line">        Name name=(Name)obj;</span><br><span class="line">        <span class="keyword">return</span> (firstName.equals(name.firstName))</span><br><span class="line">        &amp;&amp; (lastName.equals(name.lastName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.equals(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName.hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">    Name n=(Name)o;</span><br><span class="line">    <span class="keyword">int</span> lastCmp=lastName.compareTo(n.lastName);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    (lastCmp!=<span class="number">0</span> ? lastCmp:</span><br><span class="line">    firstName.compareTo(n.firstName));</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">[Karl M,Steven Lee,John O,Tom M]</span><br><span class="line">[Steven Lee,Karl M,Tom M,John O]</span><br></pre></td></tr></table></figure><h4 id="如何选择数据结构"><a href="#如何选择数据结构" class="headerlink" title="如何选择数据结构"></a>如何选择数据结构</h4><ul><li>衡量标准：读和改的效率<ul><li><strong>Array读快改慢</strong></li><li><strong>Linked改快读慢</strong></li><li><strong>Hash在两者之间</strong></li></ul></li></ul><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><ul><li>实现Map接口的类用来存储键-值对</li><li>Map接口的实现类有HashMap和TreeMap等</li><li>Map类中存储的键-值对通过键来标识，所以键值不能重复</li><li>Map接口常用方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">put</span><span class="params">(Object key,Object value)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(Object key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span>;<span class="comment">//是否包含键</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span></span>;<span class="comment">//是否包含值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>自动打包（<strong>Auto-boxing/unboxing</strong>）<ul><li>在合适的时机自动打包、解包<ul><li>自动将基础类型转换为对象</li><li>自动将对象转换为基础类型</li></ul></li></ul></li><li>例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Map m1=<span class="keyword">new</span> HashMap();</span><br><span class="line">        Map m2=<span class="keyword">new</span> TreeMap();</span><br><span class="line">        m1.put(<span class="string">"one"</span>,<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//m1.put("one",1);自动打包</span></span><br><span class="line">        m1.put(<span class="string">"two"</span>,<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//m1.put("two",2);</span></span><br><span class="line">        m1.put(<span class="string">"three"</span>,<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//m1.put("three",3);</span></span><br><span class="line">        m2.put(<span class="string">"A"</span>,<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//m2.put("A",1);</span></span><br><span class="line">        m2.put(<span class="string">"B"</span>,<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//m2.put("B",2);</span></span><br><span class="line">        System.out.println(m1.size());</span><br><span class="line">        System.out.println(m1.containsKey(<span class="string">"one"</span>));</span><br><span class="line">        System.out.println(m2.containsValue(<span class="keyword">new</span> Integer(<span class="number">1</span>)));</span><br><span class="line">        <span class="comment">//m2.containsValue(1);</span></span><br><span class="line">        <span class="keyword">if</span>(m1.containsKey(<span class="string">"two"</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> i=((Integer)m1.get(<span class="string">"two"</span>)).intValue();</span><br><span class="line">            <span class="comment">//int i=(Integer)m1.get("two");</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Map m3=<span class="keyword">new</span> HashMap(m1);</span><br><span class="line">        m3.putAll(m2);</span><br><span class="line">        System.out.println(m3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">&#123;A=<span class="number">1</span>, B=<span class="number">2</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, one=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ONE=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//public static final int ONE=1;自动打包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Map m=<span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            *Integer freq=(Integer)m.get(args[i]);<span class="comment">//freq为空</span></span><br><span class="line">            m.put(args[i],(freq == <span class="keyword">null</span> ? ONE :<span class="keyword">new</span> Integer(freq.intValue() + <span class="number">1</span>)));*</span><br><span class="line">            <span class="comment">//int freq=(Integer)m.get(args[i] == null ? 0 : (Integer)m.get(args[i]));自动打包</span></span><br><span class="line">            <span class="comment">//m.put(args[i],freq==0?ONE:freq+1);自动打包</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m.size() + <span class="string">" distinct words detected:"</span>);</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">java Test aaa bbb AAA ccc AAA</span><br><span class="line"><span class="number">4</span> distinct words detected:</span><br><span class="line">&#123;aaa=<span class="number">1</span>, AAA=<span class="number">2</span>, ccc=<span class="number">1</span>, bbb=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><ul><li>例子：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; c=<span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//在List中只能够装String</span></span><br><span class="line">        c.add(<span class="string">"aaa"</span>);</span><br><span class="line">        c.add(<span class="string">"bbb"</span>);</span><br><span class="line">        c.add(<span class="string">"ccc"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)&#123;</span><br><span class="line">            String s=c.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;String&gt; c2=<span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        c2.add(<span class="string">"aaa"</span>);</span><br><span class="line">        c2.add(<span class="string">"bbb"</span>);</span><br><span class="line">        c2.add(<span class="string">"ccc"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; it=c2.iterator();it.hasNext();)&#123;</span><br><span class="line">            String s=it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyName</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">MyName</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//只和MyName进行比较</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(MyName mn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.age&gt;mn.age)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&lt;mn.age)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">aaa</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure><ul><li><p>在定义集合的时候同时定义集合里面对象的类型</p><ul><li>可以在定义Collection时指定</li><li>也可以在循环时使用Iterator指定</li></ul></li><li><p>好处是增强了程序的可读性和稳定性</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0831</title>
      <link href="/jokerboozp.github.io/2019/08/31/2019-08-31-Java%E5%9F%BA%E7%A1%80-collection-iterator/"/>
      <url>/jokerboozp.github.io/2019/08/31/2019-08-31-Java%E5%9F%BA%E7%A1%80-collection-iterator/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><ul><li><p>概念：Java API所提供的一系列类的实例，用于在程序中存放对象</p></li><li><p>jdk所提供的容器API都位于java.util包内<br><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-08-31%20093107.png" alt="Aaron Swartz"></p></li><li><p>Collection接口定义了存取一组对象的方法，其子接口Set和List分别定义了存储方式</p><ul><li>Set中的数据对象没有顺序且不可以重复</li><li>List中的数据对象有顺序且可以重复</li></ul></li><li><p>Map接口定义了存储“键（key）——值（value）映射对”的方法</p></li><li><p>Collection接口中所定义的方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;<span class="comment">//装了个多少个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;<span class="comment">//清空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object element)</span></span>;<span class="comment">//是否包含某一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object element)</span></span>;<span class="comment">//添加进去某一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object element)</span></span>;<span class="comment">//去除某一个元素</span></span><br><span class="line"><span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection c)</span></span>;<span class="comment">//是不是包含另一个集合里所有的元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection c)</span></span>;<span class="comment">//添加</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection)</span></span>;<span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection c)</span></span>;<span class="comment">//当前集合类和c的交集</span></span><br><span class="line">Object[] toArray();<span class="comment">//全部转换为对象类型数组</span></span><br></pre></td></tr></table></figure><ul><li><a id="more"></a>例1：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Stirng[] args)</span></span>&#123;</span><br><span class="line">        Collection c=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//父类引用指向子类对象</span></span><br><span class="line">        <span class="comment">//通过父类引用访问一个子类对象，但是不能访问子类对象特有的方法</span></span><br><span class="line">        <span class="comment">//可以放入不同类型的对象</span></span><br><span class="line">        <span class="comment">//这样写最大程度保证了灵活性</span></span><br><span class="line">        c.add(<span class="string">"hello"</span>);</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"l1"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">        System.out.println(c.size());</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String firstName,String lastName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName=firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName=lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName+<span class="string">" "</span>+lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[hello,f1 l1,<span class="number">100</span>]</span><br></pre></td></tr></table></figure></li><li><p>例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Collection c=<span class="keyword">new</span> HashSet();</span><br><span class="line">        c.add(<span class="string">"hello"</span>);</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"l1"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">        c.remove(<span class="string">"hello"</span>);<span class="comment">//会挨个比较内容是否equals，而不是==</span></span><br><span class="line">        c.remove(<span class="keyword">new</span> Integer(<span class="number">100</span>));</span><br><span class="line">        System.out.println(c.remove(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"l1"</span>)));</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String firstName,String lastName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName=firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName=lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName+<span class="string">" "</span>+lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">[f1 l1]</span><br></pre></td></tr></table></figure></li><li><p>容器类对象在调用remove、contains等方法时需要比较对象是否相等，这会涉及到对象类型的equals方法和hashCode方法(当一个类的某个对象被当作键值或索引来使用时，会用到他的hashCode方法)；对于自定义的类型，需要重写equals和hashCode方法以实现自定义的对象相等规则。</p><ul><li>注意：相等的对象应具有相等的hashCode</li><li>重写equals方法时必须重写hashCode方法</li></ul></li><li><p>增加name类的equals和hashCode方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Name)&#123;</span><br><span class="line">        Name name=(Name)obj;</span><br><span class="line">        <span class="keyword">return</span> (firstName.equals(name.firstName))</span><br><span class="line">        &amp;&amp; (lastName.equals(name.lastName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.equals(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName.hashCode();</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h4><ul><li>所有实现了Collection接口的容器类都有一个iterator方法用以返回一个实现了Iterator接口的对象</li><li>Iterator对象称作迭代器，用以方便的实现对容器内元素的遍历操作</li><li>Iterator接口定义了如下方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;<span class="comment">//判断游标左边是否有元素</span></span><br><span class="line"><span class="function">Object <span class="title">next</span><span class="params">()</span></span>;<span class="comment">//返回游标右边的元素并将游标移动到下一个位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;<span class="comment">//删除游标左边的元素，在执行完next之后该操作只能执行一次</span></span><br></pre></td></tr></table></figure><img data-src="https://github.com/Jokerboozp/Jokerboozp.github.io/raw/master/img/%E6%89%B9%E6%B3%A8%202019-08-31%20110725.png" alt="Aaron Swartz"><br>Iterator实际上就是一个统一的用来遍历collection里面的所有元素的接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Collection c=<span class="keyword">new</span> HashSet();</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f1"</span>,<span class="string">"l1"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f2"</span>,<span class="string">"l2"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f3"</span>,<span class="string">"l3"</span>));</span><br><span class="line">        Iterator i=c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next()的返回值为Object类型，需要转换为相应类型</span></span><br><span class="line">            Name n=(Name)i.next();</span><br><span class="line">            System.out.println(n.getFirstName()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   输出结果：</span><br><span class="line">   f2 f1 f3</span><br></pre></td></tr></table></figure></li><li>Iterator对象的remove方法是在迭代过程中删除元素的唯一的安全方法</li><li>例1：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Collection c=<span class="keyword">new</span> HashSet();</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"fff1"</span>,<span class="string">"llll"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"f2"</span>,<span class="string">"l2"</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Name(<span class="string">"fff3"</span>,<span class="string">"lll3"</span>));</span><br><span class="line">        <span class="keyword">for</span>(Iterator i=c.iterator();i.hasNext();)&#123;</span><br><span class="line">            Name name=(Name)i.next();</span><br><span class="line">            <span class="keyword">if</span>(name.getFirstName().length()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                i.remove();</span><br><span class="line">                <span class="comment">//如果换成c.remove(name)会产生例外</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">[fff3 lll3,fff1 lll1]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0830</title>
      <link href="/jokerboozp.github.io/2019/08/30/2019-08-30-Java%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E7%B1%BB-Math-File/"/>
      <url>/jokerboozp.github.io/2019/08/30/2019-08-30-Java%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E7%B1%BB-Math-File/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><ul><li>java.lang.Math提供了一系列静态方法用于科学计算；其方法的参数和返回值类型一般为double型</li></ul><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><ul><li>java.io.File类代表系统文件名（路径和文件名）</li><li>File类常见的构造方法<ul><li><code>public File(String pathname)</code><br>以pathname为路径创建file对象，如果pathname为绝对路径，则默认的当前路径在系统属性user.dir中存储</li><li><code>public File(String parent,String child)</code><br>以parent为父路径，child为子路径创建File对象</li></ul></li><li>File的静态属性String separator存储了当前系统的路径分隔符</li><li>文件路径名分隔符在Windows下是“/”，在Linux下是“\”。可以在任何平台上写“\”来避免错误。<a id="more"></a></li></ul><hr><h4 id="File类常用方法"><a href="#File类常用方法" class="headerlink" title="File类常用方法"></a>File类常用方法</h4><ul><li>通过File对象可以访问文件的属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastmodified</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li>通过File对象创建空文件或目录（在该对象所指的文件或目录不存在的情况下）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span>throw IOException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;<span class="comment">//创建在路径中的一系列目录</span></span><br></pre></td></tr></table></figure></li><li>例子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String separator=File.separator;</span><br><span class="line">        String filename=<span class="string">"myfile.txt"</span>;</span><br><span class="line">        String directory=<span class="string">"mydir1"</span>+separator+<span class="string">"mydir2"</span>;</span><br><span class="line">        File f=<span class="keyword">new</span> File(directory,filename);</span><br><span class="line">        <span class="keyword">if</span>(f.exists())&#123;</span><br><span class="line">            System.out.println(<span class="string">"文件名："</span>+f.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">"文件大小:"</span>+f.length());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f.getParentFile().mkdirs();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                f.createNewFile();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归列出目录结构"><a href="#递归列出目录结构" class="headerlink" title="递归列出目录结构"></a>递归列出目录结构</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        File f=<span class="keyword">new</span> File(<span class="string">"d:/A"</span>);</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        tree(f,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tree</span><span class="params">(File f,<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        String preStr=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;level;i++)&#123;</span><br><span class="line">            preStr +=<span class="string">"   "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File[] childs=f.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;childs.length;i++)&#123;</span><br><span class="line">            System.out.println(preStr + childs[i].getName());</span><br><span class="line">            <span class="keyword">if</span>(childs[i].isDirectory())&#123;</span><br><span class="line">                tree(childs[i],level + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Enum枚举类型"><a href="#Enum枚举类型" class="headerlink" title="Enum枚举类型"></a>Enum枚举类型</h4><ul><li><p>枚举类型：</p><ul><li>只能够取特定值中的一个</li><li>使用enum关键字</li><li>是java.lang.Enum类型</li></ul></li><li><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MyColor&#123;red,green.blue&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyColor m=MyColor.red;</span><br><span class="line">        <span class="keyword">switch</span>(m)&#123;</span><br><span class="line">            <span class="keyword">case</span> red:</span><br><span class="line">            System.out.println(<span class="string">"red"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> green:</span><br><span class="line">            System.out.println(<span class="string">"green"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"default"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle复杂查询</title>
      <link href="/jokerboozp.github.io/2019/08/30/2019-08-30-Oracle%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/"/>
      <url>/jokerboozp.github.io/2019/08/30/2019-08-30-Oracle%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle复杂查询"><a href="#Oracle复杂查询" class="headerlink" title="Oracle复杂查询"></a>Oracle复杂查询</h1><hr><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><ul><li><code>UNION、UNION ALL、_INTERSECT、MINUS</code><ul><li><code>UNION</code>可以完成将两个以上的表的相类似的查询结果合并在一起，并且相同的只取其一<br><code>SELECT emp_no,emp_name from emp1 UNION SELECT emp_no,emp_name from emp2;</code></li><li><code>UNION ALL</code>也可以完成将两个以上的表的相类似的查询结果合并在一起，如果有相同记录，不会去掉相同记录<br><code>SELECT emp_no,emp_name from emp1 UNION ALL SELECT emp_no,emp_name from emp2;</code></li><li><code>_INTERSECT</code>:返回在两个查询结果中都有相同内容的信息<br><code>SELECT emp_no,emp_name from emp1 INTERSECT SELECT emp_no,emp_name from emp2;</code></li><li><code>MINUS</code>：返回只在一个查询中出现的信息<br><code>SELECT emp_no,emp_name from emp1 MINUS SELECT emp_no,emp_name from emp2;</code><a id="more"></a></li></ul></li></ul><hr><h3 id="DECODE"><a href="#DECODE" class="headerlink" title="DECODE"></a><code>DECODE</code></h3><ul><li>在逻辑编程中，经常用到If-Then-Else进行逻辑判断。在DECODE的语法中，实际上就是这样的逻辑处理过程。语法如下：<br> <code>DECODE(value,if1,then1,if2,then2,if3,then3,...,else)</code></li><li><code>value</code>代表某个表的任何类型的任意列或一个通过得到的任何结果。当每一个value值被测试，如果value的值为if1，DECODE函数的结果就是then1；如果value的值等于if2，DECODE函数的结果就是then2；事实上，可以给出多个if/then配对。如果value结果不等于给出的任何配对时，DECODE结果就返回else。</li><li>需要注意的是，这里的if、then、else都可以是函数或计算表达式</li><li>例：<br> <code>SELECT emp_no,emp_name,decode(emp_type,&#39;01&#39;,&#39;正式员工&#39;,&#39;02&#39;,&#39;派遣员工&#39;,&#39;03&#39;,&#39;外包员工&#39;,&#39;其他员工&#39;)emp_type from emp;</code></li></ul><hr><h3 id="递归查询（树查询）"><a href="#递归查询（树查询）" class="headerlink" title="递归查询（树查询）"></a>递归查询（树查询）</h3><ul><li>基本语法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ... from tablename where 条件1</span><br><span class="line">start with 条件2</span><br><span class="line">connect by prior 条件3;</span><br></pre></td></tr></table></figure></li><li>其中：</li><li>条件1是过滤条件，用于对返回的所有记录进行过滤</li><li>条件2是根节点的限定语句，当然也可以放宽限定条件，以取得多个根节点，实际就是多棵树</li><li>条件3是连接条件，其中用PRIOR表示上一条记录，比如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect by prior org_id&#x3D;parent_id</span><br></pre></td></tr></table></figure>就是说上一条记录的org_id是本条记录的parent_id,即本条记录的父亲是上一条记录</li><li>例：从DM_SWJG中查询根节点为‘0000000000’的所有区县级税务机关代码和名称（从根节点开始遍历所有下级）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select swjg_dm,swjg_mc where jgjc_dm&#x3D;&#39;05&#39; start with swjg_dm&#x3D;&#39;0000000000&#39; connect by prior swjg_dm&#x3D;sj_swjg_dm</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle内置函数</title>
      <link href="/jokerboozp.github.io/2019/08/29/2019-08-29-Oracle%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/jokerboozp.github.io/2019/08/29/2019-08-29-Oracle%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle内置函数"><a href="#Oracle内置函数" class="headerlink" title="Oracle内置函数"></a>Oracle内置函数</h1><hr><h3 id="单记录字符函数"><a href="#单记录字符函数" class="headerlink" title="单记录字符函数"></a>单记录字符函数</h3><h4 id="INSTR"><a href="#INSTR" class="headerlink" title="INSTR(,[,[,]])"></a>INSTR(<c1>,<c2>[,<l>[,<j>]])</h4><ul><li>在一个字符串中搜索指定的字符，返回发现指定的字符的位置</li><li>c1：被搜索的字符串</li><li>c2：希望搜索的字符串</li><li>l：搜索的开始位置，缺省是1</li><li>j：第j次出现，缺省是1</li><li><code>SELECT INSTR(&#39;Oracle Training&#39;,&#39;ra&#39;,1,2) &quot;Instring&quot; FORM DUAL;</code></li></ul><h4 id="LENGTH"><a href="#LENGTH" class="headerlink" title="LENGTH()"></a>LENGTH(<c>)</h4><ul><li>返回字符串c的长度<a id="more"></a></li><li><code>SELECT LENGTH(&#39;Oracle Training&#39;) FROM DUAL;</code></li></ul><h4 id="LOWER"><a href="#LOWER" class="headerlink" title="LOWER()"></a>LOWER(<c>)</h4><ul><li>返回字符串并将所有字符变为小写</li><li><code>SELECT LOWER (&#39;Oracle Training&#39;) FROM DUAL;</code></li></ul><h4 id="UPPER"><a href="#UPPER" class="headerlink" title="UPPER()"></a>UPPER(<c>)</h4><ul><li>返回所有字符串并将所有字符转换为大写</li><li><code>SELECT UPPER(&#39;Oracle Training&#39;) FORM DUAL;</code></li></ul><h4 id="LAPD-String1，Length-String2"><a href="#LAPD-String1，Length-String2" class="headerlink" title="LAPD(String1，Length[,String2])"></a>LAPD(String1，Length[,String2])</h4><ul><li>在字符串Stirng1的左边填充字符串String2，填充后的长度为Length。String2的参数可选，若String2的参数不填，则在String1的左侧补空格</li><li><code>SELECT LAPD (&#39;abcde&#39;,10,&#39;x&#39;) FROM DUAL;</code>——结果为xxxxxabcde</li></ul><h4 id="RPAD-String1-Length-String2"><a href="#RPAD-String1-Length-String2" class="headerlink" title="RPAD(String1,Length[,String2])"></a>RPAD(String1,Length[,String2])</h4><ul><li>在字符串String1的右边填充字符串String2，填充后的长度为Length，String2的参数可选，若String2参数不填，则在String1的右侧补空格</li><li><code>SELECT RPAD(&#39;abcde&#39;,10,x) FROM DUAL;</code>——结果为abcdexxxxx</li></ul><h4 id="LTRIM-String1-String2"><a href="#LTRIM-String1-String2" class="headerlink" title="LTRIM(String1 [,String2])"></a>LTRIM(String1 [,String2])</h4><ul><li>删除String1左边出现的任何String2字符，保证String1的第一个字符不能出现在String2字符串中。String2的参数可选，不String2不填，则将String1的左侧所有空白字符去掉。</li><li><code>SELECT LTRIM(&#39;MISS LIU&#39;,&#39;M IS&#39;) RESULT FROM DUAL;</code>——结果为LIU</li></ul><h4 id="RTRIM-String1-String2"><a href="#RTRIM-String1-String2" class="headerlink" title="RTRIM(String1[,String2])"></a>RTRIM(String1[,String2])</h4><ul><li>删除String1右边出现的任何String2字符，保证String1的最后一个字符不能出现在String2字符串中。String2的参数可选，若String2的参数不填，则将String1的右侧所有空格删去</li><li><code>SELECT RTRIM(&#39;Mississippi&#39;,&#39;ip&#39;) test,RTRIM(&#39;Mississippi&#39;,&#39;sip&#39;) test2 FROM DUAL;</code>——结果为test1：Mississ     test2：M</li></ul><h4 id="Substr-String-start-Count"><a href="#Substr-String-start-Count" class="headerlink" title="Substr(String,start[,Count])"></a>Substr(String,start[,Count])</h4><ul><li>对字符串或（字段），从start字符开始，连续取count个字符并返回结果，如果没有指定count则一只取到结尾</li><li><code>SELECT substr(&#39;Miss Lis Mis&#39;,6,3) RESULT FROM DUAL;</code>——结果为Lis</li></ul><h4 id="Replace-‘String1’-’String2’-’Stirng3’"><a href="#Replace-‘String1’-’String2’-’Stirng3’" class="headerlink" title="Replace(‘String1’[,’String2’,’Stirng3’])"></a>Replace(‘String1’[,’String2’,’Stirng3’])</h4><ul><li>String1：希望被替换的字符串或变量</li><li>String2：被替换字符串</li><li>String3：要替换字符串</li><li><code>SELECT REPLACE(&#39;Oracle&#39;,&#39;Or&#39;,&#39;Mir&#39;) &quot;Example&quot; FORM DUAL;</code>——结果为Miracle</li></ul><h4 id="CEIL"><a href="#CEIL" class="headerlink" title="CEIL()"></a>CEIL(<n>)</h4><ul><li>返回大于或等于给出数字的最小整数，即向上取整</li><li><code>SELECT CEIL(3.141598) FROM DUAL;</code>——结果为4</li></ul><h4 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR()"></a>FLOOR(<n>)</h4><ul><li>返回小于或等于给出数字的最大整数，即向下取整</li><li><code>SELECT FLOOR(3.141598) FROM DUAL;</code>———结果为3</li></ul><h4 id="MOD"><a href="#MOD" class="headerlink" title="MOD(,)"></a>MOD(<n1>,<n2>)</h4><ul><li>返回整数n1除以n2之后的余数</li><li><code>SELECT MOD(10,3)FORM DUAL;</code>——结果为1</li></ul><h4 id="ROUND-VALUE-PRECISION"><a href="#ROUND-VALUE-PRECISION" class="headerlink" title="ROUND(VALUE,PRECISION)"></a>ROUND(VALUE,PRECISION)</h4><ul><li>按照precision指定的精度对value进行四舍五入</li><li><code>SELECT ROUND(3.14159,2)FROM DUAL;</code>——结果为3.14</li></ul><hr><h3 id="单记录日期函数"><a href="#单记录日期函数" class="headerlink" title="单记录日期函数"></a>单记录日期函数</h3><h4 id="ADD-MONTHS"><a href="#ADD-MONTHS" class="headerlink" title="ADD_MONTHS(,)"></a>ADD_MONTHS(<d>,<l>)</h4><ul><li>增加月份或减去月份，在d日期的基础上，增加l（l可为负数）个月之后的时间</li><li><code>SELECT to_char(add_months(to_date(&#39;2019-01-01&#39;,&#39;yyyy-mm-dd&#39;),2),&#39;yyyy-mm-dd&#39;) from dual;</code>——结果为2019-03-01</li><li><code>SELECT to_cahr(add_month(to_date(&#39;2019-03-01&#39;,&#39;yyyy-mm-dd&#39;),-2),&#39;yyyy-mm-dd&#39;)from dual;</code>——结果为2019-01-01</li></ul><h4 id="LAST-DAY-date"><a href="#LAST-DAY-date" class="headerlink" title="LAST_DAY(date)"></a>LAST_DAY(date)</h4><ul><li>返回日期date所在月的最后一天</li><li><code>SELECT to_char(last_day(to_date(&#39;2019-02-01&#39;,&#39;yyyy-mm-dd&#39;)),&#39;yyyy-mm-dd&#39;)from dual;</code>——结果为2019-02-28</li></ul><h4 id="MONTHS-BETWEEN-date2-date1"><a href="#MONTHS-BETWEEN-date2-date1" class="headerlink" title="MONTHS_BETWEEN(date2,date1)"></a>MONTHS_BETWEEN(date2,date1)</h4><ul><li>返回date2-date1的月数（可以是小数）</li><li><code>SELECT months_between(to_date(&#39;2014-02-01&#39;,&#39;yyyy-mm-dd&#39;),to_date(&#39;2014-04-01&#39;,&#39;yyyy-mm-dd&#39;))from dual;</code>——结果为2</li></ul><h4 id="SYSDATE"><a href="#SYSDATE" class="headerlink" title="SYSDATE"></a>SYSDATE</h4><ul><li>返回系统的当前时间</li><li><code>SELECT to_cahr(sysdate,&#39;yyyy-mm-dd&#39;)from dual;</code></li></ul><h4 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC(,[,])"></a>TRUNC(<date>,[,<fmt>])</h4><ul><li>按照给出的fmt要求将日期截断</li><li><code>SELECT to_char(trunc(sysdate,&#39;dd&#39;),&#39;yyyy-mm-dd&#39;)from dual;</code>——结果为2019-08-29</li><li><code>SELECT to_char(trunc(sysdate,&#39;mm&#39;),&#39;yyyy-mm-dd&#39;)from dual;</code>——结果为2019-08-01</li><li><code>SELECT to_char(trunc(sysdate,&#39;yy&#39;),&#39;yyyy-mm-dd&#39;)from dual;</code>——结果为2019-01-01</li></ul><hr><h3 id="单记录转换函数"><a href="#单记录转换函数" class="headerlink" title="单记录转换函数"></a>单记录转换函数</h3><h4 id="TO-CHAR-date-’format’"><a href="#TO-CHAR-date-’format’" class="headerlink" title="TO_CHAR(date,’format’)"></a>TO_CHAR(date,’format’)</h4><ul><li>根据format格式将日期date转换为对象格式的字符串</li></ul><h4 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR()"></a>TO_CHAR(<n>)</h4><ul><li>将数字n转换为字符串</li></ul><h4 id="TO-NUMBER"><a href="#TO-NUMBER" class="headerlink" title="TO_NUMBER()"></a>TO_NUMBER(<c>)</h4><ul><li>将字符串c转换为数字</li></ul><h4 id="TO-DATE-string-’format’"><a href="#TO-DATE-string-’format’" class="headerlink" title="TO_DATE(string,’format’)"></a>TO_DATE(string,’format’)</h4><ul><li>根据format格式将指定格式的字符串string转换为date类型</li></ul><h3 id="单记录函数小结"><a href="#单记录函数小结" class="headerlink" title="单记录函数小结"></a>单记录函数小结</h3><ul><li>单记录函数可以用在查询结果中</li><li>单记录函数可以用在where条件中</li><li><code>SELECT to_char(emp_birthday,&#39;yyyy-mm-dd&#39;)from emp;</code></li><li><code>SELECT * from whrer emp_birthday &gt;=to_date(&#39;1980-01-01&#39;,&#39;yyyy-mm-dd&#39;) and emp_birthday &lt; to_day(&#39;1990-01-01&#39;,&#39;yyyy-mm-dd&#39;);</code></li></ul><hr><h3 id="组函数"><a href="#组函数" class="headerlink" title="组函数"></a>组函数</h3><h4 id="AVG-DISTINCT-ALL"><a href="#AVG-DISTINCT-ALL" class="headerlink" title="AVG([{DISTINCT|ALL}])"></a>AVG([{DISTINCT|ALL}])</h4><ul><li>求平均值，ALL表示对所有求平均值，DISTINCT只对不同的求平均值，相同只取一个</li></ul><h4 id="MAX-DISTINCT-ALL"><a href="#MAX-DISTINCT-ALL" class="headerlink" title="MAX([{DISTINCT|ALL}])"></a>MAX([{DISTINCT|ALL}])</h4><ul><li>求最大值，ALL表示对所有求最大值，DISTINCT只对不同的求最大值，相同只取一个</li></ul><h4 id="MIN-DISTINCT-ALL"><a href="#MIN-DISTINCT-ALL" class="headerlink" title="MIN([{DISTINCT|ALL}])"></a>MIN([{DISTINCT|ALL}])</h4><ul><li>求最小值，ALL表示对所有求最小值，DISTINCT只对不同的求最小值，相同只取一个</li></ul><hr><h4 id="带group-by的计算"><a href="#带group-by的计算" class="headerlink" title="带group by的计算"></a>带group by的计算</h4><ul><li>可以用group by来实现对一组数进行分组统计</li><li>例：统计每个部门的员工数和工资总额</li><li><code>select dept.dept_no,count(*),sum(sal.sal) from dept,emp,sal where dept.dept_no=emp.emp_dept_no and emp.emp_no=sal.emp_no group by dept.dept_no;</code></li></ul><h4 id="Having的用法"><a href="#Having的用法" class="headerlink" title="Having的用法"></a>Having的用法</h4><ul><li>在分组group by中，一般不管统计的结果是多少都要全部显示，我们可以在group by前或后加having子句来限制结果的统计</li><li>例：统计员工数超过5个人的部门员工数和工资总额</li><li><code>select dept.dept_no,count(*),sum(sal.sal) from dept,emp,sal where dept.dept_no=emp.emp_dept_no and emp.emp_no=sal.emp_no group by dept.dept_no having count(*) &gt; 5;</code></li></ul><h4 id="查询结果的排序"><a href="#查询结果的排序" class="headerlink" title="查询结果的排序"></a>查询结果的排序</h4><ul><li>使用order by进行查询结果的排序，order by语句应位于查询语句的结尾</li><li>例：按照部门编号和工资升序排列</li><li><code>select dept.dept_no,emp.emp_no,sal.sal from emp,dept,sal where emp.emp_dept_no=dept.dept_no and emp.emp_no=sal.emp_no order by dept.dept_no,sal.sal;</code></li><li>按照部门编号升序，工资降序排序</li><li>order by dept.dept_no,sal.sal des;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0826</title>
      <link href="/jokerboozp.github.io/2019/08/26/2019-08-26-Java%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E7%B1%BB-String/"/>
      <url>/jokerboozp.github.io/2019/08/26/2019-08-26-Java%E5%9F%BA%E7%A1%80-%E5%B8%B8%E7%94%A8%E7%B1%BB-String/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><ul><li>字符串相关的类（String、StringBuffer）</li><li>基本数据类型包装类</li><li>Math类</li><li>File类</li><li>枚举类</li></ul><hr><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><ul><li>java.lang.String类代表了不可变的字符序列</li></ul><h5 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h5><ul><li><p><code>public char charAt(int index)</code><br>返回字符串中第index个字符</p></li><li><p><code>public int length()</code><br>返回字符串的长度</p></li><li><p><code>public int indexOf(String str)</code><br>返回字符串中出现str的第一个位置</p></li><li><p><code>public int indexOf(String str,int fromIndex)</code><br>返回字符串中从fromIndex开始出现str的第一个位置</p></li><li><p><code>public boolean equalsIgnoreCase(String another)</code><br>比较字符串与another是否一样（忽略大小写）</p></li><li><p><code>public String replace(char oldChar,char newChar)</code><br>在字符串中用newChar字符替换oldChar字符</p></li><li><p><code>public boolean startsWith(String prefix)</code><br>判断字符串是否以prefix字符串开头</p></li><li><p><code>public boolean endsWith(String prefix)</code><br>判断字符串是否以prefix字符串结尾<a id="more"></a></p></li><li><p><code>public String toUpperCase()</code><br>返回一个字符串为该字符串的大写形式</p></li><li><p><code>public String toLowerCase()</code><br>返回一个字符串为该字符串的小写形式</p></li><li><p><code>public String substring(int beginIndex)</code><br>返回该字符串从beginIndex开始到结尾的字符串</p></li><li><p><code>public String substring(int beginIndex,int endIndex)</code><br>返回该字符串从beginIndex开始，到endIndex结束的子字符串</p></li><li><p><code>public String trim()</code><br>返回将该字符串去掉开头和结尾空格之后的字符串</p></li><li><p><code>public static String valueOf(......)</code><br>将基本数据类型转换为字符串</p></li><li><p><code>public String[] split(Stirng regex)</code><br>将一个字符串按照指定的分隔符分隔，返回分隔后的字符串数组</p><ul><li><p>例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s1=<span class="string">"sun java"</span>,s2=<span class="string">"Sun Java"</span>;</span><br><span class="line">        System.out.println(s1.cahrAt(<span class="number">1</span>));<span class="comment">//u</span></span><br><span class="line">        System.out.println(s2.length());<span class="comment">//8</span></span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">"java"</span>));<span class="comment">//4</span></span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">"Java"</span>));<span class="comment">//-1</span></span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        String s=<span class="string">"我是程序员，我在学java"</span>;</span><br><span class="line">        String sr=s.replace(<span class="string">'我'</span>,<span class="string">'你'</span>);</span><br><span class="line">        System.out.println(sr);<span class="comment">//你是程序员，你在学java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s=<span class="string">"Welcome to Java World!"</span>;</span><br><span class="line">        String s1=<span class="string">"   sun java   "</span>;</span><br><span class="line">        System.out.println(s.startsWith(<span class="string">"Welcome"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s.endsWith(<span class="string">"World"</span>));<span class="comment">//false</span></span><br><span class="line">        String sL=s.toLowerCase();</span><br><span class="line">        String sU=s.toUpperCase();</span><br><span class="line">        System.out.println(sL);<span class="comment">//welcome to java world!</span></span><br><span class="line">        System.out.println(sU);<span class="comment">//WELCOME TO JAVA WORLD!</span></span><br><span class="line">        String subs=s.substring(<span class="number">11</span>);</span><br><span class="line">        System.out.println(subs);<span class="comment">//Java World!</span></span><br><span class="line">        String sp=s1.trim();</span><br><span class="line">        System.out.println(sp);<span class="comment">//sun java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">1234567</span>;</span><br><span class="line">        String sNumber=String.valueOf(j);</span><br><span class="line">        System.out.println(<span class="string">"j是"</span>+sNumber.length()+<span class="string">"位数。"</span>)；</span><br><span class="line">        String s=<span class="string">"Mary,F,1976"</span>;</span><br><span class="line">        String[] sPlit=s.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sPlit.length;i++)&#123;</span><br><span class="line">            System.out.println(sPlit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">j是<span class="number">7</span>位数</span><br><span class="line">Mary</span><br><span class="line">F</span><br><span class="line"><span class="number">1976</span></span><br></pre></td></tr></table></figure></li><li><p>例4：编写一个程序，输出一个字符串中的大写英文字母数，小写英文字母数以及非英文字母数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String s=<span class="string">"AAAAaaaa12345646_+_+_&amp;&amp;*HNBGada"</span>;</span><br><span class="line"><span class="keyword">int</span> lCount=<span class="number">0</span>,uCount=<span class="number">0</span>,oCount=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="keyword">char</span> c=s.charAt(i);</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">lCount++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">uCount++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">oCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(lCount+<span class="string">" "</span>+uCount+<span class="string">" "</span>+oCount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例5：编写一个方法，输出在一个字符串中，指定字符串出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String s=<span class="string">"sunjavasunjavasunjavasunjavasunjavasunjavasunjavasunjavasunjavasunjava"</span>;</span><br><span class="line">String sToFind=<span class="string">"java"</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index= -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((index = s.indexOf(sToFind)) != -<span class="number">1</span>)&#123;</span><br><span class="line">s=s.substring(index+sToFind.length());</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h4><ul><li>java.lang.StringBuffer代表可变的字符序列</li><li>String和StringBuffer类似，但StringBuffer可以对其字符串进行改变</li></ul><h5 id="StringBuffer类常见的构造方法"><a href="#StringBuffer类常见的构造方法" class="headerlink" title="StringBuffer类常见的构造方法"></a>StringBuffer类常见的构造方法</h5><ul><li><p><code>StringBuffer()</code><br>创建一个不包含字符序列的“空”的StringBuffer对象</p></li><li><p><code>StringBuffer(String str)</code><br>创建一个StringBuffer对象，包含与String对象str相同的字符序列</p></li><li><p><code>public StringBuffer append()</code><br>可以为该StringBuffer对象添加字符序列，返回添加后的该StringBuffer对象引用</p></li><li><p><code>public StringBuffer insert()</code><br>可以为该StringBuffer对象在指定位置插入字符序列，返回修改后的该StringBuffer对象引用</p></li><li><p><code>public StringBuffer delete(int start,int end)</code><br>可以删除从start开始到end-1为止的一段字符序列，返回修改后的该StringBuffer对象引用</p></li><li><p><code>public StringBuffer reverse()</code><br>用于将字符序列逆序，返回修改后的该StringBuffer对象引用</p><ul><li>例子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">String s=<span class="string">"Microsoft"</span>;</span><br><span class="line"><span class="keyword">char</span>[] a=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">StringBuffer sb1=<span class="keyword">new</span> StringBuffer(s);</span><br><span class="line">sb1.append(<span class="string">'/'</span>).append(<span class="string">"IBM"</span>).append(<span class="string">'/'</span>).append(<span class="string">"Sun"</span>);</span><br><span class="line">System.out.println(sb1);</span><br><span class="line">StringBuffer sb2=<span class="keyword">new</span> StringBuffer(<span class="string">"数字"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">sb2.append(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb2);</span><br><span class="line">sb2.delete(<span class="number">8</span>,sb2.length()).insert(<span class="number">0</span>,a);</span><br><span class="line">System.out.println(sb2);</span><br><span class="line">System.out.println(sb2.reverse());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">Microsoft/IBM/Sun</span><br><span class="line">数字<span class="number">012345678</span></span><br><span class="line">abc数字<span class="number">012345</span></span><br><span class="line"><span class="number">543210</span>字数cba</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="基本数据类型包装类"><a href="#基本数据类型包装类" class="headerlink" title="基本数据类型包装类"></a>基本数据类型包装类</h4><ul><li><p>包装类（如Integer、Double等）这些类封装了一个相应的基本数据类型，并为其提供了一系列操作</p></li><li><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Integer i=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Double d=<span class="keyword">new</span> Double(<span class="string">"123.456"</span>);</span><br><span class="line"><span class="keyword">int</span> j=i.intValue()+d.intValue();</span><br><span class="line"><span class="keyword">float</span> f=i.floatValue()+d.floatValue();</span><br><span class="line">System.out.println(j);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="keyword">double</span> pi=Double.parseDouble(<span class="string">"3.1415926"</span>);</span><br><span class="line"><span class="keyword">double</span> r=Double.valueOf(<span class="string">"2.0"</span>).doubleValue();</span><br><span class="line"><span class="keyword">double</span> s=pi*r*r;</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=Integer.parseInt(<span class="string">"1.25"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">System.out.println(<span class="string">"数据格式不对！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">123</span>)+<span class="string">"B"</span>);<span class="comment">//把123以2进制显示</span></span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">123</span>)+<span class="string">"H"</span>);<span class="comment">//把123以16进制显示</span></span><br><span class="line">System.out.println(Integer.toOctalString(<span class="number">123</span>)+<span class="string">"O"</span>);<span class="comment">//把123以八进制显示</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">223</span></span><br><span class="line"><span class="number">223.456</span></span><br><span class="line"><span class="number">12.5663704</span></span><br><span class="line">数据格式不对！</span><br><span class="line"><span class="number">1111011</span>B</span><br><span class="line"><span class="number">7</span>bH</span><br><span class="line"><span class="number">1730</span></span><br></pre></td></tr></table></figure></li><li><p>例2：<br>编写一个方法，返回一个double型二维数组，数组中的元素通过解析字符串参数获得。如字符串参数：“1,2;3,4,5;6,7,8”<br>对应数组为：<br>d[0,0]=1.0 d[0,1]=2.0<br>d[1,0]=3.0 d[1.1]=4.0 d[1,2]=5.0<br>d[2,0]=6.0 d[2,1]=7.0 d[2,2]=8.0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[][] d;</span><br><span class="line">        String s=<span class="string">"1,2;3,4,5;6,7,8"</span>;</span><br><span class="line">        String[] sFirst=s.split(<span class="string">";"</span>);</span><br><span class="line">        d=<span class="keyword">new</span> <span class="keyword">double</span>[sFirst.length][];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sFirst.length;i++)&#123;</span><br><span class="line">            String[] sSecond=sFirst[i].split(<span class="string">","</span>);</span><br><span class="line">            d[i]=<span class="keyword">new</span> <span class="keyword">double</span>[sSecond.length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sSecond.length;j++)&#123;</span><br><span class="line">                d[i][j]=Double.parseDouble(sSecond[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;d[i].length;j++)&#123;</span><br><span class="line">                System.out.print(d[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0824</title>
      <link href="/jokerboozp.github.io/2019/08/24/2019-08-24-Java%E5%9F%BA%E7%A1%80-%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%80%BB%E7%BB%93/"/>
      <url>/jokerboozp.github.io/2019/08/24/2019-08-24-Java%E5%9F%BA%E7%A1%80-%E7%AC%AC%E4%B8%89%E7%AB%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><ul><li>类：具有相同特征的同一类事物的抽象</li><li>对象：该类事物的特殊的实例</li><li>类和对象之间的关系：关联、继承、聚合（聚集、组合）、多态、实现</li><li>class：Java中使用class关键字定义一个类</li><li>new</li><li>引用：一大块内存指向一小块内存</li><li>构造方法：当一个类new一个新的对象时调用的方法，这个方法比较特殊，和类同名，没有返回值</li><li>方法重载、构造方法的重载：方法名字相同，参数类型或内容不一样</li><li>this关键字：this指的是当前对象，你现在在调用哪一个方法，这个this指的就是谁。<a id="more"></a></li><li>static：static的成员变量是属于所有类的，static的成员变量一般分配在data区域里面，属于这个类的所有对象，属于整个类，不需要去new这个对象就可以访问它；非static的只能new一个对象才能访问它。static变量的访问方法：<code>类名.static对象</code></li><li>package &amp;&amp; import：package是用来解决类重名的问题。import可以引入单个类，也可以用<code>*</code>引入所有类</li><li>返回控制（四个关键字）<ul><li>private：修饰成员变量，私有的，只有自己能够访问，出了类，没人能够访问</li><li>default：default不算是关键字，默认为空，同一个包里其他类可以访问</li><li>protected：子类可以访问</li><li>public：所有人可以访问</li><li>default和public还可以修饰class<ul><li>public class：所有类都可以访问这个类</li><li>default class：同一个包里的其他类可以访问这个类</li></ul></li><li>所有的关键字都可以修饰内部类</li></ul></li><li>extends：一个类从另一个类继承。相当于这个类拥有了另一个类的所有成员变量和方法，包括private方法（但是只是继承过来，不能够去使用）</li><li>overwirte：方法的重写</li><li>final：final变量的值不能够被改变；final方法不能够被重写；final的类不能被继承</li><li>object类：toString()方法；equals方法</li><li>转型：父类引用指向子类对象或接口的引用指向实现了接口的类的对象叫做向上转型（upcasting）；反之叫做向下转型（downcasting）。</li><li>多态<ul><li>三个必要条件：要有继承、要有重写、要有父类引用指向子类对象。</li><li>new的是哪一个类，就找哪一个类的方法</li></ul></li><li>抽象：含有抽象方法的类叫做抽象类；抽象方法只有方法的定义没有实现</li><li>接口<ul><li>接口是一种特殊的抽象类，里面所有的方法都是抽象方法，所有的成员变量都是public、static、final的。</li><li>接口之间可以相互继承；类与类之间可以相互继承；类和接口之间只能是类实现接口</li><li>一个类可以实现多个接口；多个类可以实现一个接口</li></ul></li></ul><hr><h4 id="方法的重写与重载"><a href="#方法的重写与重载" class="headerlink" title="方法的重写与重载"></a>方法的重写与重载</h4><ul><li>方法的重写（overwirte/override）<ul><li>在子类中可以根据需要对从基类中继承来的方法进行重写</li><li>重写方法必须和被重写方法具有相同方法名称、参数列表和返回类型</li><li>重写方法不能使用比被重写方法更严格的访问权限</li></ul></li><li>方法的重载（overload）<ul><li>方法的重载是指一个类中可以定义有相同的名字，但参数不同的多个方法。调用时会根据不同的参数选择对应的方法。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0824数组</title>
      <link href="/jokerboozp.github.io/2019/08/24/2019-08-24-Java%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84/"/>
      <url>/jokerboozp.github.io/2019/08/24/2019-08-24-Java%E5%9F%BA%E7%A1%80-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>数组可以看成是多个相同类型数据的组合，对这些数据的统一管理</p></li><li><p>数组变量属于引用类型，也可以看作是对象，数组中的每个元素相当于该对象的成员变量</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型</p></li><li><p>Java中声明数组不能指定其长度（数组元素中的个数），例如：<code>int[5]</code>是错误的</p></li><li><p>一维数组的声明方式：<code>int[] a</code>或<code>double b[]</code></p></li><li><p>Java中使用new关键字创建数组对象，格式为：数组名=new 数组元素的类型[数组元素的个数]。例如：<code>s= new int[5]</code>。</p></li><li><p>new出来的东西都放在堆内存里面</p></li><li><p>元素为引用数据类型的数组：数组中的每个元素都需要实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date[] days;</span><br><span class="line">        days=<span class="keyword">new</span> Date[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            days[i]=<span class="keyword">new</span> Date(<span class="number">2004.4</span>.i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year;<span class="keyword">int</span> month;<span class="keyword">int</span> day;</span><br><span class="line">    Date(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d)&#123;</span><br><span class="line">        year=y;</span><br><span class="line">        month=m;</span><br><span class="line">        day=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组初始化</p><ul><li><p>分为静态初始化和动态初始化<a id="more"></a></p><ul><li>动态初始化：数组定义与数组元素分配空间和赋值操作分开进行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[];</span><br><span class="line">        a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        a[<span class="number">0</span>]=<span class="number">3</span>;</span><br><span class="line">        a[<span class="number">1</span>]=<span class="number">9</span>;</span><br><span class="line">        a[<span class="number">2</span>]=<span class="number">8</span>;</span><br><span class="line">        Date days[];</span><br><span class="line">        days=<span class="keyword">new</span> Date[<span class="number">3</span>];</span><br><span class="line">        days[<span class="number">0</span>]=<span class="keyword">new</span> Date(<span class="number">1</span>,<span class="number">4</span>,<span class="number">2004</span>);</span><br><span class="line">        days[<span class="number">1</span>]=<span class="keyword">new</span> Date(<span class="number">2</span>,<span class="number">6</span>,<span class="number">2015</span>);</span><br><span class="line">        days[<span class="number">2</span>]=<span class="keyword">new</span> Date(<span class="number">3</span>,<span class="number">5</span>,<span class="number">2019</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">    Date(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d)&#123;</span><br><span class="line">        year=y;</span><br><span class="line">        month=m;</span><br><span class="line">        day=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>静态初始化：在定义数组的同时为数组元素分配空间并赋值 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        Date days[]=&#123;</span><br><span class="line">            <span class="keyword">new</span> Date(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3005</span>),</span><br><span class="line">            <span class="keyword">new</span> Date(<span class="number">5</span>,<span class="number">6</span>,<span class="number">2019</span>),</span><br><span class="line">            <span class="keyword">new</span> Date(<span class="number">3</span>,<span class="number">6</span>,<span class="number">2018</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">    Date(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d)&#123;</span><br><span class="line">        year=y;</span><br><span class="line">        month=m;</span><br><span class="line">        day=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组元素的默认初始化</p><ul><li>数组是引用类型，他的类型相当于类的成员变量。因此数组分配空间后，每一个元素也按照成员变量的规则被隐式初始化<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        Date[] days=<span class="keyword">new</span> Date[<span class="number">3</span>];</span><br><span class="line">        System.out.println(a[<span class="number">3</span>]);</span><br><span class="line">        System.out,println(days[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">    Date(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d)&#123;</span><br><span class="line">        year=y;</span><br><span class="line">        month=m;</span><br><span class="line">        day=d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组元素的引用</p><ul><li>定义并用运算符new为之分配空间，才可以引用数组中的每个元素，数组元素下标从0开始，长度为n的数组的合法下标取值范围为0~n-1</li></ul></li><li><p>每个数组都有一个length属性指明他的长度</p></li></ul></li></ul><hr><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul><li>选择排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">把输入的数转成<span class="keyword">int</span>数组，并从大到小排序</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Stirng[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[args.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            a[i]=Integer.parseInt(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line">        selectionSort(a);</span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k,temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            k=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&lt;a[k])&#123;</span><br><span class="line">                    k=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k!=i)&#123;</span><br><span class="line">                temp=a[i];</span><br><span class="line">                a[i]=a[k];</span><br><span class="line">                a[k]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">java Test <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">9</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure></li><li>冒泡排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date[] days=<span class="keyword">new</span> Date[<span class="number">5</span>];</span><br><span class="line">        days[<span class="number">0</span>]=<span class="keyword">new</span> Date[<span class="number">2016</span>,<span class="number">5</span>,<span class="number">4</span>];</span><br><span class="line">        days[<span class="number">1</span>]=<span class="keyword">new</span> Date[<span class="number">2017</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line">        days[<span class="number">2</span>]=<span class="keyword">new</span> Date[<span class="number">2018</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line">        days[<span class="number">3</span>]=<span class="keyword">new</span> Date[<span class="number">2019</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">        days[<span class="number">4</span>]=<span class="keyword">new</span> Date[<span class="number">2010</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">        bubbleSort(days);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;days.length;i++)&#123;</span><br><span class="line">            System.out.println(days[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date[] bubbleSort(Date[] a)&#123;</span><br><span class="line">        <span class="keyword">int</span> len=a.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j].compare(a[j+<span class="number">1</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    Date temp=a[j];</span><br><span class="line">                    a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">    Date(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d)&#123;</span><br><span class="line">        year=y;</span><br><span class="line">        month=m;</span><br><span class="line">        day=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year&gt;date.year?<span class="number">1</span></span><br><span class="line">        :year&lt;date.year?-<span class="number">1</span></span><br><span class="line">        :month&gt;date.month?<span class="number">1</span></span><br><span class="line">        :month&lt;date.month?-<span class="number">1</span></span><br><span class="line">        :day&gt;date.day?<span class="number">1</span></span><br><span class="line">        :day&lt;date.day?-<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Year:Month:Day=="</span>+year+<span class="string">"-"</span>+month+<span class="string">"-"</span>+day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数三退1问题<ul><li>500个人，围成一个圈，挨个数数，数到三一直循环，数到三的退出去。数到剩最后一个人的时候停下，打印出最后一个人原来是第几个人<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span>[] arr=<span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i]=<span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">int</span> leftCount=arr.length;</span><br><span class="line"><span class="keyword">int</span> countNum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(leftCount&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[index]==<span class="keyword">true</span>)&#123;</span><br><span class="line">countNum++;</span><br><span class="line"><span class="keyword">if</span>(countNum==<span class="number">3</span>)&#123;</span><br><span class="line">countNum=<span class="number">0</span>;</span><br><span class="line">arr[index]=<span class="keyword">false</span>;</span><br><span class="line">leftCount--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index==arr.length)&#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==<span class="keyword">true</span>)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>折半查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">34</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">12</span>;</span><br><span class="line">System.out.println(binarySearch(a,i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==num)<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.length==<span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> startPos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> endPos=a.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> m=(startPos+endPos)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(startPos&lt;=endPos)&#123;</span><br><span class="line"><span class="keyword">if</span>(num==a[m])<span class="keyword">return</span> m;</span><br><span class="line"><span class="keyword">if</span>(num&gt;a[m])&#123;</span><br><span class="line">startPos=m+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&lt;a[m])&#123;</span><br><span class="line">endPos=m-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">m=(startPos+endPos)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0823</title>
      <link href="/jokerboozp.github.io/2019/08/23/2019-08-23-Java%E5%9F%BA%E7%A1%80-%E6%8E%A5%E5%8F%A3/"/>
      <url>/jokerboozp.github.io/2019/08/23/2019-08-23-Java%E5%9F%BA%E7%A1%80-%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><ul><li>Java只支持单继承，不支持多继承</li></ul><h3 id="接口Interface"><a href="#接口Interface" class="headerlink" title="接口Interface"></a>接口Interface</h3><ul><li>接口的本质是一种特殊的抽象类，这种抽象类只包含常量值和方法的定义，而没有变量和方法的实现</li><li>接口是抽象方法和常量值定义的集合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runner</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> id=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的特性"><a href="#接口的特性" class="headerlink" title="接口的特性"></a>接口的特性</h4></li><li>接口可以多重实现<a id="more"></a></li><li>接口中声明（成员变量）的默认实现是<code>public static final</code>,而且只能是<code>public static final</code>&gt;</li><li>接口中只能定义抽象方法（abstract），这些方法只能是public，而且默认的就是public</li><li>接口可以继承其他的接口，并添加新的属性和方法</li><li>多个无关的类可以实现同一个接口</li><li>一个类可以实现多个无关的接口</li><li>与继承关系类似，接口与实现类之间存在多态性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Singer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Singer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Student(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"studying"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"student is singing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"student is sleeping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Singer</span>,<span class="title">Painter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    Teacher(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Teacher is teaching"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Teacher is singing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Teacher is eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Teacher is painting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现一个接口相当于实现这个接口里面的抽象方法，要用implements， 不能用extends</li><li>因为接口里面都是抽象方法，所以在实现一个接口后必须重写里面的方法</li><li>接口之间可以相互继承，类和类之间可以相互继承，类和接口之间只能是类实现接口</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础0822</title>
      <link href="/jokerboozp.github.io/2019/08/22/2019-08-22-Java%E5%9F%BA%E7%A1%80-object-equals-toString_%E5%A4%9A%E6%80%81/"/>
      <url>/jokerboozp.github.io/2019/08/22/2019-08-22-Java%E5%9F%BA%E7%A1%80-object-equals-toString_%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><ul><li><p>object类是所有Java类的根基类</p></li><li><p>如果在类的声明中未使用extends关键字指明其基类，则默认基类为object类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3></li><li><p>object类中定义有<code>public String toString()</code>方法，其返回值是String类型，描述当前对象的有关信息。<a id="more"></a></p></li><li><p>在进行String与其他类型数据的连接操作时（如<code>System.out.println(&quot;info&quot;+person)</code>），将自动调用该对象的类的toString()方法。</p></li><li><p>可以根据用户需要在用户自定义类型中重写toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Dog d=<span class="keyword">new</span> Dog();</span><br><span class="line">        System.out.println(<span class="string">"d="</span>+d.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I'm a cool dog!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h3><ul><li>独一无二的代表了一个对象，并且可以根据哈希编码找到一个对象所在的位置</li></ul><h3 id="Equals方法"><a href="#Equals方法" class="headerlink" title="Equals方法"></a>Equals方法</h3><ul><li><p><code>public Boolean equals(Object obj)</code>：提供定义对象是否相等的逻辑</p></li><li><p>Object的equals方法定义为：<code>x.equals(y)</code>，当x和y是同一个对象的引用时返回true，否则返回false</p></li><li><p>JDK提供的一些类，如String、Date等，重写了Object类的equals方法，调用这些类 的equals方法时，当x和y所引用的对象是同一类是对象且属性相同时（并不一定是相同对象），返回true，否则返回false。(也就是说不需要重写方法，直接比较即可)</p></li><li><p>可以根据用户需要在用户自定义类型中重写equals方法。</p></li><li><p>引用之间比较的是内存地址，不是数值（x==y比较的是x和y在内存中的地址以及数值，不能只看数值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cat c1=<span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        Cat c2=<span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(c1==c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">int</span> height,weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> color,<span class="keyword">int</span> height,<span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">        <span class="keyword">this</span>.height=height;</span><br><span class="line">        <span class="keyword">this</span>.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>obj instanceof cat:判断obj是否是cat的一个引用</p></li><li><p>equals为空值，则返回的值为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cat c1=<span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        Cat c2=<span class="keyword">new</span> Cat(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(c1==c2);</span><br><span class="line">        System.out.println(c1.equals(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">int</span> height,weight;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(<span class="keyword">int</span> color,<span class="keyword">int</span> height,<span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color=color;</span><br><span class="line">        <span class="keyword">this</span>.height=height;</span><br><span class="line">        <span class="keyword">this</span>.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">                Cat c=(Cat)obj;</span><br><span class="line">                <span class="keyword">if</span>(c.color=<span class="keyword">this</span>.color &amp;&amp; c.height=<span class="keyword">this</span>.height &amp;&amp; c.weight=<span class="keyword">this</span>.weight)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象转型（casting）"><a href="#对象转型（casting）" class="headerlink" title="对象转型（casting）"></a>对象转型（casting）</h3></li><li><p>一个基类的引用类型变量可以“指向”其子类的对象（A要求传过来一只猫，B传过来一只狗，这是可以的，猫属于动物，狗从动物继承就可以了）</p></li><li><p>一个基类的引用不可以访问其子类对象新增的成员（属性和方法）（要求传过来一只动物，结果传过来一只狗，这时候不能把这只狗当作狗看待，他只是一只动物，狗所新增加的方法动物就不能够访问了）——在你眼中只能看见子类对象中的父类对象</p></li><li><p>可以使用引用变量instanceof类名来判断该引用类型变量所“指向”的对象是否属于该类或该类的子类</p></li><li><p>子类的对象可以当作基类的对象来使用称为向上转型（upcasting），反之称为向下转型（downcasting）——父类对象或基类对象引用指向子类对象叫做向上转型，反之叫做向下转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal a=<span class="keyword">new</span> Animal(<span class="string">"name"</span>);</span><br><span class="line">        Cat c=<span class="keyword">new</span> Cat(<span class="string">"catname"</span>,<span class="string">"blue"</span>);</span><br><span class="line">        Dog d=<span class="keyword">new</span> Dog(<span class="string">"dogname"</span>,<span class="string">"black"</span>);</span><br><span class="line">        System.out.println(a <span class="keyword">instanceof</span> Animal);</span><br><span class="line">        System.out.println(c <span class="keyword">instanceof</span> Animal);</span><br><span class="line">        System.out.println(d <span class="keyword">instanceof</span> Animal);</span><br><span class="line">        System.out.println(a <span class="keyword">instanceof</span> c);</span><br><span class="line">        a=<span class="keyword">new</span> Dog(<span class="string">"bigyellow"</span>,<span class="string">"yellow"</span>);</span><br><span class="line">        System.out.println(a.name);</span><br><span class="line">        System.out.println(a.furname);</span><br><span class="line">        System.out.println(a <span class="keyword">instanceof</span> Animal);</span><br><span class="line">        System.out.println(a <span class="keyword">instanceof</span> dog);</span><br><span class="line">        Dog d1=Dog(a);</span><br><span class="line">        System.out.println(d1.furcolor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="多态（动态绑定）"><a href="#多态（动态绑定）" class="headerlink" title="多态（动态绑定）"></a>多态（动态绑定）</h3><ul><li>多态指的是在执行期间（而非在编译期间）判断所引用对象的实际类型，根据其实际的类型调用相应的方法</li><li>实际当中引用的是哪一种对象，就调用哪一类对象的方法，只有在运行时才会进行，所以叫做动态绑定（new的是谁就调用谁的方法）</li><li>多态的三大条件：要有继承、要有重写、要有父类引用指向子类对象</li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>用abstract关键字修饰一个类时，这个类就叫做抽象类；用abstract关键字修饰一个方法时，这个方法叫做抽象方法</li><li>含有抽象方法的类必须声明为抽象类，抽象类必须被继承，抽象方法必须被重写</li><li>抽象类不能被实例化</li><li>抽象方法只需声明，而不需实现</li></ul><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul><li>final的变量的值不能够被改变</li><li>final的方法不能被重写</li><li>final的类不能被继承</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
